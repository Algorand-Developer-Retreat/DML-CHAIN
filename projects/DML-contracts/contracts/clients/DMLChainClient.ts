/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"printHash","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"paramkeys","type":"string[]"},{"name":"paramValues","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"submitLocalUpdate","args":[{"name":"paramKeys","type":"string[]"},{"name":"paramValues","type":"uint64[]"},{"name":"dataSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"finalizeFedAvg","args":[{"name":"paramKeys","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"specificity","type":"uint64"},{"name":"f1Score","type":"uint64"},{"name":"roc","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"parameterKeys":{"keyType":"string","valueType":"string","prefix":"parameterKeys"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression","prefix":"regressionPerformanceMetrics"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification","prefix":"classificationPerformanceMetrics"},"aggregatorParameterSums":{"keyType":"string","valueType":"uint64","prefix":"aggrSums"},"totalDataSize":{"keyType":"string","valueType":"uint64","prefix":"totalDataSize"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:23","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:23","pc":[1,2,3,4,5,6,7,8,9,10,11]},{"teal":3,"source":"contracts\\Moderator.algo.ts:23","pc":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247]},{"teal":15,"source":"contracts\\Moderator.algo.ts:23","pc":[248,249]},{"teal":16,"source":"contracts\\Moderator.algo.ts:23","pc":[250]},{"teal":17,"source":"contracts\\Moderator.algo.ts:23","pc":[251,252]},{"teal":18,"source":"contracts\\Moderator.algo.ts:23","pc":[253]},{"teal":19,"source":"contracts\\Moderator.algo.ts:23","pc":[254,255]},{"teal":20,"source":"contracts\\Moderator.algo.ts:23","pc":[256]},{"teal":21,"source":"contracts\\Moderator.algo.ts:23","pc":[257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282]},{"teal":25,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[283]},{"teal":30,"source":"contracts\\Moderator.algo.ts:42","pc":[284,285,286]},{"teal":31,"source":"contracts\\Moderator.algo.ts:42","pc":[287,288,289]},{"teal":34,"source":"contracts\\Moderator.algo.ts:42","pc":[290,291,292]},{"teal":35,"source":"contracts\\Moderator.algo.ts:42","pc":[293]},{"teal":36,"source":"contracts\\Moderator.algo.ts:42","pc":[294]},{"teal":40,"source":"contracts\\Moderator.algo.ts:42","pc":[295,296,297]},{"teal":44,"source":"contracts\\Moderator.algo.ts:43","pc":[298]},{"teal":45,"source":"contracts\\Moderator.algo.ts:43","pc":[299,300]},{"teal":46,"source":"contracts\\Moderator.algo.ts:43","pc":[301]},{"teal":47,"source":"contracts\\Moderator.algo.ts:43","pc":[302]},{"teal":48,"source":"contracts\\Moderator.algo.ts:43","pc":[303]},{"teal":49,"source":"contracts\\Moderator.algo.ts:43","pc":[304,305,306]},{"teal":50,"source":"contracts\\Moderator.algo.ts:43","pc":[307]},{"teal":51,"source":"contracts\\Moderator.algo.ts:43","pc":[308]},{"teal":52,"source":"contracts\\Moderator.algo.ts:43","pc":[309]},{"teal":53,"source":"contracts\\Moderator.algo.ts:42","pc":[310]},{"teal":58,"source":"contracts\\Moderator.algo.ts:47","pc":[311,312,313]},{"teal":59,"source":"contracts\\Moderator.algo.ts:47","pc":[314,315,316]},{"teal":62,"source":"contracts\\Moderator.algo.ts:47","pc":[317,318,319]},{"teal":63,"source":"contracts\\Moderator.algo.ts:47","pc":[320]},{"teal":64,"source":"contracts\\Moderator.algo.ts:47","pc":[321]},{"teal":68,"source":"contracts\\Moderator.algo.ts:47","pc":[322,323,324]},{"teal":72,"source":"contracts\\Moderator.algo.ts:48","pc":[325,326]},{"teal":73,"source":"contracts\\Moderator.algo.ts:48","pc":[327,328,329]},{"teal":74,"source":"contracts\\Moderator.algo.ts:48","pc":[330,331]},{"teal":75,"source":"contracts\\Moderator.algo.ts:48","pc":[332]},{"teal":76,"source":"contracts\\Moderator.algo.ts:48","pc":[333]},{"teal":77,"source":"contracts\\Moderator.algo.ts:48","pc":[334]},{"teal":81,"source":"contracts\\Moderator.algo.ts:49","pc":[335]},{"teal":82,"source":"contracts\\Moderator.algo.ts:49","pc":[336,337]},{"teal":83,"source":"contracts\\Moderator.algo.ts:49","pc":[338]},{"teal":84,"source":"contracts\\Moderator.algo.ts:49","pc":[339]},{"teal":85,"source":"contracts\\Moderator.algo.ts:49","pc":[340]},{"teal":86,"source":"contracts\\Moderator.algo.ts:49","pc":[341,342,343]},{"teal":87,"source":"contracts\\Moderator.algo.ts:49","pc":[344]},{"teal":88,"source":"contracts\\Moderator.algo.ts:49","pc":[345]},{"teal":89,"source":"contracts\\Moderator.algo.ts:49","pc":[346]},{"teal":90,"source":"contracts\\Moderator.algo.ts:47","pc":[347]},{"teal":95,"source":"contracts\\Moderator.algo.ts:53","pc":[348,349]},{"teal":98,"source":"contracts\\Moderator.algo.ts:53","pc":[350,351,352]},{"teal":99,"source":"contracts\\Moderator.algo.ts:53","pc":[353,354,355]},{"teal":102,"source":"contracts\\Moderator.algo.ts:53","pc":[356,357,358]},{"teal":103,"source":"contracts\\Moderator.algo.ts:53","pc":[359]},{"teal":104,"source":"contracts\\Moderator.algo.ts:53","pc":[360]},{"teal":105,"source":"contracts\\Moderator.algo.ts:53","pc":[361]},{"teal":106,"source":"contracts\\Moderator.algo.ts:53","pc":[362,363,364]},{"teal":107,"source":"contracts\\Moderator.algo.ts:53","pc":[365]},{"teal":108,"source":"contracts\\Moderator.algo.ts:53","pc":[366]},{"teal":109,"source":"contracts\\Moderator.algo.ts:53","pc":[367]},{"teal":110,"source":"contracts\\Moderator.algo.ts:53","pc":[368]},{"teal":111,"source":"contracts\\Moderator.algo.ts:53","pc":[369]},{"teal":112,"source":"contracts\\Moderator.algo.ts:53","pc":[370]},{"teal":116,"source":"contracts\\Moderator.algo.ts:53","pc":[371,372,373]},{"teal":120,"source":"contracts\\Moderator.algo.ts:54","pc":[374]},{"teal":121,"source":"contracts\\Moderator.algo.ts:54","pc":[375,376]},{"teal":122,"source":"contracts\\Moderator.algo.ts:54","pc":[377]},{"teal":123,"source":"contracts\\Moderator.algo.ts:54","pc":[378]},{"teal":124,"source":"contracts\\Moderator.algo.ts:54","pc":[379]},{"teal":125,"source":"contracts\\Moderator.algo.ts:54","pc":[380,381,382]},{"teal":126,"source":"contracts\\Moderator.algo.ts:54","pc":[383]},{"teal":127,"source":"contracts\\Moderator.algo.ts:54","pc":[384]},{"teal":128,"source":"contracts\\Moderator.algo.ts:54","pc":[385]},{"teal":132,"source":"contracts\\Moderator.algo.ts:55","pc":[386]},{"teal":133,"source":"contracts\\Moderator.algo.ts:55","pc":[387]},{"teal":134,"source":"contracts\\Moderator.algo.ts:55","pc":[388,389,390]},{"teal":135,"source":"contracts\\Moderator.algo.ts:53","pc":[391]},{"teal":140,"source":"contracts\\Moderator.algo.ts:59","pc":[392,393,394]},{"teal":143,"source":"contracts\\Moderator.algo.ts:59","pc":[395,396,397]},{"teal":146,"source":"contracts\\Moderator.algo.ts:59","pc":[398,399,400]},{"teal":147,"source":"contracts\\Moderator.algo.ts:59","pc":[401]},{"teal":148,"source":"contracts\\Moderator.algo.ts:59","pc":[402]},{"teal":152,"source":"contracts\\Moderator.algo.ts:59","pc":[403,404,405]},{"teal":155,"source":"contracts\\Moderator.algo.ts:59","pc":[406]},{"teal":156,"source":"contracts\\Moderator.algo.ts:59","pc":[407,408]},{"teal":160,"source":"contracts\\Moderator.algo.ts:60","pc":[409,410]},{"teal":161,"source":"contracts\\Moderator.algo.ts:60","pc":[411,412,413]},{"teal":162,"source":"contracts\\Moderator.algo.ts:60","pc":[414,415]},{"teal":163,"source":"contracts\\Moderator.algo.ts:60","pc":[416]},{"teal":164,"source":"contracts\\Moderator.algo.ts:60","pc":[417]},{"teal":165,"source":"contracts\\Moderator.algo.ts:60","pc":[418]},{"teal":169,"source":"contracts\\Moderator.algo.ts:61","pc":[419,420]},{"teal":170,"source":"contracts\\Moderator.algo.ts:61","pc":[421]},{"teal":171,"source":"contracts\\Moderator.algo.ts:61","pc":[422]},{"teal":172,"source":"contracts\\Moderator.algo.ts:61","pc":[423,424]},{"teal":173,"source":"contracts\\Moderator.algo.ts:61","pc":[425]},{"teal":174,"source":"contracts\\Moderator.algo.ts:61","pc":[426]},{"teal":175,"source":"contracts\\Moderator.algo.ts:61","pc":[427]},{"teal":176,"source":"contracts\\Moderator.algo.ts:61","pc":[428]},{"teal":180,"source":"contracts\\Moderator.algo.ts:63","pc":[429]},{"teal":181,"source":"contracts\\Moderator.algo.ts:63","pc":[430,431]},{"teal":188,"source":"contracts\\Moderator.algo.ts:64","pc":[432,433]},{"teal":189,"source":"contracts\\Moderator.algo.ts:64","pc":[434,435]},{"teal":190,"source":"contracts\\Moderator.algo.ts:64","pc":[436]},{"teal":191,"source":"contracts\\Moderator.algo.ts:64","pc":[437]},{"teal":192,"source":"contracts\\Moderator.algo.ts:64","pc":[438]},{"teal":193,"source":"contracts\\Moderator.algo.ts:64","pc":[439,440,441]},{"teal":197,"source":"contracts\\Moderator.algo.ts:65","pc":[442,443]},{"teal":198,"source":"contracts\\Moderator.algo.ts:65","pc":[444,445]},{"teal":199,"source":"contracts\\Moderator.algo.ts:65","pc":[446]},{"teal":200,"source":"contracts\\Moderator.algo.ts:65","pc":[447,448]},{"teal":201,"source":"contracts\\Moderator.algo.ts:65","pc":[449]},{"teal":202,"source":"contracts\\Moderator.algo.ts:65","pc":[450]},{"teal":203,"source":"contracts\\Moderator.algo.ts:65","pc":[451]},{"teal":204,"source":"contracts\\Moderator.algo.ts:65","pc":[452]},{"teal":205,"source":"contracts\\Moderator.algo.ts:65","pc":[453]},{"teal":206,"source":"contracts\\Moderator.algo.ts:65","pc":[454,455]},{"teal":207,"source":"contracts\\Moderator.algo.ts:65","pc":[456,457]},{"teal":208,"source":"contracts\\Moderator.algo.ts:65","pc":[458,459]},{"teal":209,"source":"contracts\\Moderator.algo.ts:65","pc":[460]},{"teal":210,"source":"contracts\\Moderator.algo.ts:65","pc":[461]},{"teal":211,"source":"contracts\\Moderator.algo.ts:65","pc":[462]},{"teal":212,"source":"contracts\\Moderator.algo.ts:65","pc":[463]},{"teal":213,"source":"contracts\\Moderator.algo.ts:65","pc":[464,465]},{"teal":214,"source":"contracts\\Moderator.algo.ts:65","pc":[466]},{"teal":215,"source":"contracts\\Moderator.algo.ts:65","pc":[467]},{"teal":216,"source":"contracts\\Moderator.algo.ts:65","pc":[468]},{"teal":217,"source":"contracts\\Moderator.algo.ts:65","pc":[469]},{"teal":218,"source":"contracts\\Moderator.algo.ts:65","pc":[470]},{"teal":219,"source":"contracts\\Moderator.algo.ts:65","pc":[471]},{"teal":220,"source":"contracts\\Moderator.algo.ts:65","pc":[472]},{"teal":221,"source":"contracts\\Moderator.algo.ts:65","pc":[473,474,475]},{"teal":222,"source":"contracts\\Moderator.algo.ts:65","pc":[476,477]},{"teal":226,"source":"contracts\\Moderator.algo.ts:66","pc":[478,479]},{"teal":227,"source":"contracts\\Moderator.algo.ts:66","pc":[480,481]},{"teal":228,"source":"contracts\\Moderator.algo.ts:66","pc":[482]},{"teal":229,"source":"contracts\\Moderator.algo.ts:66","pc":[483,484]},{"teal":230,"source":"contracts\\Moderator.algo.ts:66","pc":[485]},{"teal":231,"source":"contracts\\Moderator.algo.ts:66","pc":[486]},{"teal":232,"source":"contracts\\Moderator.algo.ts:66","pc":[487]},{"teal":233,"source":"contracts\\Moderator.algo.ts:66","pc":[488]},{"teal":234,"source":"contracts\\Moderator.algo.ts:66","pc":[489]},{"teal":235,"source":"contracts\\Moderator.algo.ts:66","pc":[490,491]},{"teal":236,"source":"contracts\\Moderator.algo.ts:66","pc":[492,493]},{"teal":237,"source":"contracts\\Moderator.algo.ts:66","pc":[494,495]},{"teal":238,"source":"contracts\\Moderator.algo.ts:66","pc":[496]},{"teal":239,"source":"contracts\\Moderator.algo.ts:66","pc":[497]},{"teal":240,"source":"contracts\\Moderator.algo.ts:66","pc":[498]},{"teal":241,"source":"contracts\\Moderator.algo.ts:66","pc":[499]},{"teal":242,"source":"contracts\\Moderator.algo.ts:66","pc":[500,501]},{"teal":243,"source":"contracts\\Moderator.algo.ts:66","pc":[502]},{"teal":244,"source":"contracts\\Moderator.algo.ts:66","pc":[503]},{"teal":245,"source":"contracts\\Moderator.algo.ts:66","pc":[504]},{"teal":246,"source":"contracts\\Moderator.algo.ts:66","pc":[505]},{"teal":247,"source":"contracts\\Moderator.algo.ts:66","pc":[506]},{"teal":248,"source":"contracts\\Moderator.algo.ts:66","pc":[507]},{"teal":249,"source":"contracts\\Moderator.algo.ts:66","pc":[508]},{"teal":250,"source":"contracts\\Moderator.algo.ts:66","pc":[509,510,511]},{"teal":251,"source":"contracts\\Moderator.algo.ts:66","pc":[512,513]},{"teal":255,"source":"contracts\\Moderator.algo.ts:68","pc":[514,515]},{"teal":256,"source":"contracts\\Moderator.algo.ts:68","pc":[516,517]},{"teal":257,"source":"contracts\\Moderator.algo.ts:68","pc":[518]},{"teal":258,"source":"contracts\\Moderator.algo.ts:68","pc":[519]},{"teal":259,"source":"contracts\\Moderator.algo.ts:68","pc":[520]},{"teal":260,"source":"contracts\\Moderator.algo.ts:68","pc":[521,522,523]},{"teal":261,"source":"contracts\\Moderator.algo.ts:68","pc":[524]},{"teal":262,"source":"contracts\\Moderator.algo.ts:68","pc":[525]},{"teal":263,"source":"contracts\\Moderator.algo.ts:68","pc":[526]},{"teal":264,"source":"contracts\\Moderator.algo.ts:68","pc":[527]},{"teal":265,"source":"contracts\\Moderator.algo.ts:68","pc":[528]},{"teal":266,"source":"contracts\\Moderator.algo.ts:68","pc":[529]},{"teal":267,"source":"contracts\\Moderator.algo.ts:68","pc":[530,531]},{"teal":268,"source":"contracts\\Moderator.algo.ts:68","pc":[532]},{"teal":269,"source":"contracts\\Moderator.algo.ts:68","pc":[533]},{"teal":270,"source":"contracts\\Moderator.algo.ts:68","pc":[534]},{"teal":271,"source":"contracts\\Moderator.algo.ts:68","pc":[535,536,537]},{"teal":272,"source":"contracts\\Moderator.algo.ts:68","pc":[538]},{"teal":273,"source":"contracts\\Moderator.algo.ts:68","pc":[539]},{"teal":274,"source":"contracts\\Moderator.algo.ts:68","pc":[540]},{"teal":278,"source":"contracts\\Moderator.algo.ts:70","pc":[541,542]},{"teal":279,"source":"contracts\\Moderator.algo.ts:70","pc":[543]},{"teal":280,"source":"contracts\\Moderator.algo.ts:70","pc":[544]},{"teal":281,"source":"contracts\\Moderator.algo.ts:70","pc":[545,546]},{"teal":282,"source":"contracts\\Moderator.algo.ts:64","pc":[547,548,549]},{"teal":285,"source":"contracts\\Moderator.algo.ts:59","pc":[550]},{"teal":290,"source":"contracts\\Moderator.algo.ts:87","pc":[551,552,553]},{"teal":291,"source":"contracts\\Moderator.algo.ts:87","pc":[554]},{"teal":292,"source":"contracts\\Moderator.algo.ts:87","pc":[555]},{"teal":293,"source":"contracts\\Moderator.algo.ts:87","pc":[556,557]},{"teal":294,"source":"contracts\\Moderator.algo.ts:87","pc":[558]},{"teal":297,"source":"contracts\\Moderator.algo.ts:87","errorMessage":"argument 0 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64,uint64,uint64)","pc":[559]},{"teal":300,"source":"contracts\\Moderator.algo.ts:87","pc":[560,561,562]},{"teal":301,"source":"contracts\\Moderator.algo.ts:87","pc":[563]},{"teal":302,"source":"contracts\\Moderator.algo.ts:87","pc":[564]},{"teal":306,"source":"contracts\\Moderator.algo.ts:87","pc":[565,566,567]},{"teal":311,"source":"contracts\\Moderator.algo.ts:88","pc":[568,569]},{"teal":312,"source":"contracts\\Moderator.algo.ts:88","pc":[570,571,572]},{"teal":313,"source":"contracts\\Moderator.algo.ts:88","pc":[573,574]},{"teal":314,"source":"contracts\\Moderator.algo.ts:88","pc":[575]},{"teal":315,"source":"contracts\\Moderator.algo.ts:88","pc":[576]},{"teal":318,"source":"contracts\\Moderator.algo.ts:88","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[577]},{"teal":322,"source":"contracts\\Moderator.algo.ts:89","pc":[578]},{"teal":323,"source":"contracts\\Moderator.algo.ts:89","pc":[579,580]},{"teal":324,"source":"contracts\\Moderator.algo.ts:89","pc":[581]},{"teal":325,"source":"contracts\\Moderator.algo.ts:87","pc":[582]},{"teal":330,"source":"contracts\\Moderator.algo.ts:93","pc":[583,584,585]},{"teal":331,"source":"contracts\\Moderator.algo.ts:93","pc":[586]},{"teal":332,"source":"contracts\\Moderator.algo.ts:93","pc":[587]},{"teal":333,"source":"contracts\\Moderator.algo.ts:93","pc":[588,589]},{"teal":334,"source":"contracts\\Moderator.algo.ts:93","pc":[590]},{"teal":337,"source":"contracts\\Moderator.algo.ts:93","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[591]},{"teal":340,"source":"contracts\\Moderator.algo.ts:93","pc":[592,593,594]},{"teal":341,"source":"contracts\\Moderator.algo.ts:93","pc":[595]},{"teal":342,"source":"contracts\\Moderator.algo.ts:93","pc":[596]},{"teal":346,"source":"contracts\\Moderator.algo.ts:93","pc":[597,598,599]},{"teal":351,"source":"contracts\\Moderator.algo.ts:94","pc":[600,601]},{"teal":352,"source":"contracts\\Moderator.algo.ts:94","pc":[602,603,604]},{"teal":353,"source":"contracts\\Moderator.algo.ts:94","pc":[605,606]},{"teal":354,"source":"contracts\\Moderator.algo.ts:94","pc":[607]},{"teal":355,"source":"contracts\\Moderator.algo.ts:94","pc":[608]},{"teal":358,"source":"contracts\\Moderator.algo.ts:94","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[609]},{"teal":362,"source":"contracts\\Moderator.algo.ts:95","pc":[610]},{"teal":363,"source":"contracts\\Moderator.algo.ts:95","pc":[611,612]},{"teal":364,"source":"contracts\\Moderator.algo.ts:95","pc":[613]},{"teal":365,"source":"contracts\\Moderator.algo.ts:93","pc":[614]},{"teal":370,"source":"contracts\\Moderator.algo.ts:99","pc":[615,616]},{"teal":373,"source":"contracts\\Moderator.algo.ts:99","pc":[617,618,619]},{"teal":374,"source":"contracts\\Moderator.algo.ts:99","pc":[620]},{"teal":375,"source":"contracts\\Moderator.algo.ts:99","pc":[621]},{"teal":376,"source":"contracts\\Moderator.algo.ts:99","pc":[622,623]},{"teal":377,"source":"contracts\\Moderator.algo.ts:99","pc":[624]},{"teal":380,"source":"contracts\\Moderator.algo.ts:99","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[625]},{"teal":383,"source":"contracts\\Moderator.algo.ts:99","pc":[626,627,628]},{"teal":384,"source":"contracts\\Moderator.algo.ts:99","pc":[629]},{"teal":385,"source":"contracts\\Moderator.algo.ts:99","pc":[630]},{"teal":386,"source":"contracts\\Moderator.algo.ts:99","pc":[631]},{"teal":387,"source":"contracts\\Moderator.algo.ts:99","pc":[632,633,634]},{"teal":388,"source":"contracts\\Moderator.algo.ts:99","pc":[635]},{"teal":389,"source":"contracts\\Moderator.algo.ts:99","pc":[636]},{"teal":390,"source":"contracts\\Moderator.algo.ts:99","pc":[637]},{"teal":391,"source":"contracts\\Moderator.algo.ts:99","pc":[638]},{"teal":392,"source":"contracts\\Moderator.algo.ts:99","pc":[639]},{"teal":393,"source":"contracts\\Moderator.algo.ts:99","pc":[640]},{"teal":397,"source":"contracts\\Moderator.algo.ts:99","pc":[641,642,643]},{"teal":405,"source":"contracts\\Moderator.algo.ts:102","pc":[644,645]},{"teal":406,"source":"contracts\\Moderator.algo.ts:102","pc":[646,647,648]},{"teal":407,"source":"contracts\\Moderator.algo.ts:102","pc":[649]},{"teal":408,"source":"contracts\\Moderator.algo.ts:100","pc":[650]},{"teal":409,"source":"contracts\\Moderator.algo.ts:100","pc":[651]},{"teal":410,"source":"contracts\\Moderator.algo.ts:100","pc":[652]},{"teal":411,"source":"contracts\\Moderator.algo.ts:100","pc":[653]},{"teal":412,"source":"contracts\\Moderator.algo.ts:102","pc":[654]},{"teal":413,"source":"contracts\\Moderator.algo.ts:102","pc":[655]},{"teal":414,"source":"contracts\\Moderator.algo.ts:102","pc":[656]},{"teal":415,"source":"contracts\\Moderator.algo.ts:102","pc":[657,658,659]},{"teal":416,"source":"contracts\\Moderator.algo.ts:103","pc":[660,661]},{"teal":417,"source":"contracts\\Moderator.algo.ts:103","pc":[662,663,664]},{"teal":418,"source":"contracts\\Moderator.algo.ts:103","pc":[665]},{"teal":419,"source":"contracts\\Moderator.algo.ts:100","pc":[666]},{"teal":420,"source":"contracts\\Moderator.algo.ts:100","pc":[667,668]},{"teal":421,"source":"contracts\\Moderator.algo.ts:100","pc":[669]},{"teal":422,"source":"contracts\\Moderator.algo.ts:100","pc":[670]},{"teal":423,"source":"contracts\\Moderator.algo.ts:103","pc":[671]},{"teal":424,"source":"contracts\\Moderator.algo.ts:103","pc":[672]},{"teal":425,"source":"contracts\\Moderator.algo.ts:102","pc":[673]},{"teal":428,"source":"contracts\\Moderator.algo.ts:103","pc":[674]},{"teal":429,"source":"contracts\\Moderator.algo.ts:103","pc":[675,676,677]},{"teal":430,"source":"contracts\\Moderator.algo.ts:104","pc":[678,679]},{"teal":431,"source":"contracts\\Moderator.algo.ts:104","pc":[680,681,682]},{"teal":432,"source":"contracts\\Moderator.algo.ts:104","pc":[683]},{"teal":433,"source":"contracts\\Moderator.algo.ts:100","pc":[684]},{"teal":434,"source":"contracts\\Moderator.algo.ts:100","pc":[685]},{"teal":435,"source":"contracts\\Moderator.algo.ts:100","pc":[686]},{"teal":436,"source":"contracts\\Moderator.algo.ts:100","pc":[687]},{"teal":437,"source":"contracts\\Moderator.algo.ts:104","pc":[688]},{"teal":438,"source":"contracts\\Moderator.algo.ts:104","pc":[689]},{"teal":439,"source":"contracts\\Moderator.algo.ts:103","pc":[690]},{"teal":442,"source":"contracts\\Moderator.algo.ts:104","pc":[691]},{"teal":443,"source":"contracts\\Moderator.algo.ts:104","pc":[692,693,694]},{"teal":444,"source":"contracts\\Moderator.algo.ts:105","pc":[695,696]},{"teal":445,"source":"contracts\\Moderator.algo.ts:105","pc":[697,698,699]},{"teal":446,"source":"contracts\\Moderator.algo.ts:105","pc":[700]},{"teal":447,"source":"contracts\\Moderator.algo.ts:100","pc":[701]},{"teal":448,"source":"contracts\\Moderator.algo.ts:100","pc":[702,703]},{"teal":449,"source":"contracts\\Moderator.algo.ts:100","pc":[704]},{"teal":450,"source":"contracts\\Moderator.algo.ts:100","pc":[705]},{"teal":451,"source":"contracts\\Moderator.algo.ts:105","pc":[706]},{"teal":452,"source":"contracts\\Moderator.algo.ts:105","pc":[707]},{"teal":453,"source":"contracts\\Moderator.algo.ts:104","pc":[708]},{"teal":456,"source":"contracts\\Moderator.algo.ts:101","pc":[709,710,711]},{"teal":461,"source":"contracts\\Moderator.algo.ts:107","pc":[712,713]},{"teal":462,"source":"contracts\\Moderator.algo.ts:107","pc":[714]},{"teal":467,"source":"contracts\\Moderator.algo.ts:109","pc":[715,716]},{"teal":468,"source":"contracts\\Moderator.algo.ts:99","pc":[717]},{"teal":473,"source":"contracts\\Moderator.algo.ts:113","pc":[718,719]},{"teal":476,"source":"contracts\\Moderator.algo.ts:113","pc":[720,721,722]},{"teal":477,"source":"contracts\\Moderator.algo.ts:113","pc":[723]},{"teal":478,"source":"contracts\\Moderator.algo.ts:113","pc":[724]},{"teal":479,"source":"contracts\\Moderator.algo.ts:113","pc":[725,726]},{"teal":480,"source":"contracts\\Moderator.algo.ts:113","pc":[727]},{"teal":483,"source":"contracts\\Moderator.algo.ts:113","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64,uint64,uint64)","pc":[728]},{"teal":486,"source":"contracts\\Moderator.algo.ts:113","pc":[729,730,731]},{"teal":487,"source":"contracts\\Moderator.algo.ts:113","pc":[732]},{"teal":488,"source":"contracts\\Moderator.algo.ts:113","pc":[733]},{"teal":489,"source":"contracts\\Moderator.algo.ts:113","pc":[734]},{"teal":490,"source":"contracts\\Moderator.algo.ts:113","pc":[735,736,737]},{"teal":491,"source":"contracts\\Moderator.algo.ts:113","pc":[738]},{"teal":492,"source":"contracts\\Moderator.algo.ts:113","pc":[739]},{"teal":493,"source":"contracts\\Moderator.algo.ts:113","pc":[740]},{"teal":494,"source":"contracts\\Moderator.algo.ts:113","pc":[741]},{"teal":495,"source":"contracts\\Moderator.algo.ts:113","pc":[742]},{"teal":496,"source":"contracts\\Moderator.algo.ts:113","pc":[743]},{"teal":500,"source":"contracts\\Moderator.algo.ts:113","pc":[744,745,746]},{"teal":505,"source":"contracts\\Moderator.algo.ts:114","pc":[747,748]},{"teal":506,"source":"contracts\\Moderator.algo.ts:114","pc":[749,750,751]},{"teal":507,"source":"contracts\\Moderator.algo.ts:114","pc":[752,753]},{"teal":508,"source":"contracts\\Moderator.algo.ts:114","pc":[754]},{"teal":509,"source":"contracts\\Moderator.algo.ts:114","pc":[755]},{"teal":512,"source":"contracts\\Moderator.algo.ts:114","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[756]},{"teal":522,"source":"contracts\\Moderator.algo.ts:117","pc":[757,758]},{"teal":523,"source":"contracts\\Moderator.algo.ts:117","pc":[759,760,761]},{"teal":524,"source":"contracts\\Moderator.algo.ts:117","pc":[762]},{"teal":525,"source":"contracts\\Moderator.algo.ts:115","pc":[763]},{"teal":526,"source":"contracts\\Moderator.algo.ts:115","pc":[764]},{"teal":527,"source":"contracts\\Moderator.algo.ts:115","pc":[765]},{"teal":528,"source":"contracts\\Moderator.algo.ts:115","pc":[766]},{"teal":529,"source":"contracts\\Moderator.algo.ts:117","pc":[767]},{"teal":530,"source":"contracts\\Moderator.algo.ts:117","pc":[768]},{"teal":531,"source":"contracts\\Moderator.algo.ts:117","pc":[769]},{"teal":532,"source":"contracts\\Moderator.algo.ts:117","pc":[770,771,772]},{"teal":533,"source":"contracts\\Moderator.algo.ts:118","pc":[773,774]},{"teal":534,"source":"contracts\\Moderator.algo.ts:118","pc":[775,776,777]},{"teal":535,"source":"contracts\\Moderator.algo.ts:118","pc":[778]},{"teal":536,"source":"contracts\\Moderator.algo.ts:115","pc":[779]},{"teal":537,"source":"contracts\\Moderator.algo.ts:115","pc":[780]},{"teal":538,"source":"contracts\\Moderator.algo.ts:115","pc":[781]},{"teal":539,"source":"contracts\\Moderator.algo.ts:115","pc":[782]},{"teal":540,"source":"contracts\\Moderator.algo.ts:118","pc":[783]},{"teal":541,"source":"contracts\\Moderator.algo.ts:118","pc":[784]},{"teal":542,"source":"contracts\\Moderator.algo.ts:117","pc":[785]},{"teal":545,"source":"contracts\\Moderator.algo.ts:118","pc":[786]},{"teal":546,"source":"contracts\\Moderator.algo.ts:118","pc":[787,788,789]},{"teal":547,"source":"contracts\\Moderator.algo.ts:119","pc":[790,791]},{"teal":548,"source":"contracts\\Moderator.algo.ts:119","pc":[792,793,794]},{"teal":549,"source":"contracts\\Moderator.algo.ts:119","pc":[795]},{"teal":550,"source":"contracts\\Moderator.algo.ts:115","pc":[796]},{"teal":551,"source":"contracts\\Moderator.algo.ts:115","pc":[797,798]},{"teal":552,"source":"contracts\\Moderator.algo.ts:115","pc":[799]},{"teal":553,"source":"contracts\\Moderator.algo.ts:115","pc":[800]},{"teal":554,"source":"contracts\\Moderator.algo.ts:119","pc":[801]},{"teal":555,"source":"contracts\\Moderator.algo.ts:119","pc":[802]},{"teal":556,"source":"contracts\\Moderator.algo.ts:118","pc":[803]},{"teal":559,"source":"contracts\\Moderator.algo.ts:119","pc":[804]},{"teal":560,"source":"contracts\\Moderator.algo.ts:119","pc":[805,806,807]},{"teal":561,"source":"contracts\\Moderator.algo.ts:120","pc":[808,809]},{"teal":562,"source":"contracts\\Moderator.algo.ts:120","pc":[810,811,812]},{"teal":563,"source":"contracts\\Moderator.algo.ts:120","pc":[813]},{"teal":564,"source":"contracts\\Moderator.algo.ts:115","pc":[814]},{"teal":565,"source":"contracts\\Moderator.algo.ts:115","pc":[815,816]},{"teal":566,"source":"contracts\\Moderator.algo.ts:115","pc":[817]},{"teal":567,"source":"contracts\\Moderator.algo.ts:115","pc":[818]},{"teal":568,"source":"contracts\\Moderator.algo.ts:120","pc":[819]},{"teal":569,"source":"contracts\\Moderator.algo.ts:120","pc":[820]},{"teal":570,"source":"contracts\\Moderator.algo.ts:119","pc":[821]},{"teal":573,"source":"contracts\\Moderator.algo.ts:120","pc":[822]},{"teal":574,"source":"contracts\\Moderator.algo.ts:120","pc":[823,824,825]},{"teal":575,"source":"contracts\\Moderator.algo.ts:121","pc":[826,827]},{"teal":576,"source":"contracts\\Moderator.algo.ts:121","pc":[828,829,830]},{"teal":577,"source":"contracts\\Moderator.algo.ts:121","pc":[831]},{"teal":578,"source":"contracts\\Moderator.algo.ts:115","pc":[832]},{"teal":579,"source":"contracts\\Moderator.algo.ts:115","pc":[833,834]},{"teal":580,"source":"contracts\\Moderator.algo.ts:115","pc":[835]},{"teal":581,"source":"contracts\\Moderator.algo.ts:115","pc":[836]},{"teal":582,"source":"contracts\\Moderator.algo.ts:121","pc":[837]},{"teal":583,"source":"contracts\\Moderator.algo.ts:121","pc":[838]},{"teal":584,"source":"contracts\\Moderator.algo.ts:120","pc":[839]},{"teal":587,"source":"contracts\\Moderator.algo.ts:121","pc":[840]},{"teal":588,"source":"contracts\\Moderator.algo.ts:121","pc":[841,842,843]},{"teal":589,"source":"contracts\\Moderator.algo.ts:122","pc":[844,845]},{"teal":590,"source":"contracts\\Moderator.algo.ts:122","pc":[846,847,848]},{"teal":591,"source":"contracts\\Moderator.algo.ts:122","pc":[849]},{"teal":592,"source":"contracts\\Moderator.algo.ts:115","pc":[850]},{"teal":593,"source":"contracts\\Moderator.algo.ts:115","pc":[851,852]},{"teal":594,"source":"contracts\\Moderator.algo.ts:115","pc":[853]},{"teal":595,"source":"contracts\\Moderator.algo.ts:115","pc":[854]},{"teal":596,"source":"contracts\\Moderator.algo.ts:122","pc":[855]},{"teal":597,"source":"contracts\\Moderator.algo.ts:122","pc":[856]},{"teal":598,"source":"contracts\\Moderator.algo.ts:121","pc":[857]},{"teal":601,"source":"contracts\\Moderator.algo.ts:116","pc":[858,859,860]},{"teal":606,"source":"contracts\\Moderator.algo.ts:124","pc":[861,862]},{"teal":607,"source":"contracts\\Moderator.algo.ts:124","pc":[863]},{"teal":612,"source":"contracts\\Moderator.algo.ts:126","pc":[864,865]},{"teal":613,"source":"contracts\\Moderator.algo.ts:113","pc":[866]},{"teal":618,"source":"contracts\\Moderator.algo.ts:130","pc":[867,868,869]},{"teal":619,"source":"contracts\\Moderator.algo.ts:130","pc":[870]},{"teal":622,"source":"contracts\\Moderator.algo.ts:130","pc":[871,872,873]},{"teal":623,"source":"contracts\\Moderator.algo.ts:130","pc":[874,875,876]},{"teal":626,"source":"contracts\\Moderator.algo.ts:130","pc":[877,878,879]},{"teal":629,"source":"contracts\\Moderator.algo.ts:130","pc":[880,881,882]},{"teal":630,"source":"contracts\\Moderator.algo.ts:130","pc":[883]},{"teal":631,"source":"contracts\\Moderator.algo.ts:130","pc":[884]},{"teal":635,"source":"contracts\\Moderator.algo.ts:130","pc":[885,886,887]},{"teal":638,"source":"contracts\\Moderator.algo.ts:130","pc":[888]},{"teal":639,"source":"contracts\\Moderator.algo.ts:130","pc":[889,890]},{"teal":643,"source":"contracts\\Moderator.algo.ts:131","pc":[891,892]},{"teal":644,"source":"contracts\\Moderator.algo.ts:131","pc":[893]},{"teal":647,"source":"contracts\\Moderator.algo.ts:131","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[894]},{"teal":648,"source":"contracts\\Moderator.algo.ts:131","pc":[895]},{"teal":649,"source":"contracts\\Moderator.algo.ts:131","pc":[896,897]},{"teal":653,"source":"contracts\\Moderator.algo.ts:132","pc":[898,899]},{"teal":654,"source":"contracts\\Moderator.algo.ts:132","pc":[900,901]},{"teal":655,"source":"contracts\\Moderator.algo.ts:132","pc":[902,903]},{"teal":656,"source":"contracts\\Moderator.algo.ts:132","pc":[904]},{"teal":657,"source":"contracts\\Moderator.algo.ts:132","pc":[905]},{"teal":658,"source":"contracts\\Moderator.algo.ts:132","pc":[906]},{"teal":662,"source":"contracts\\Moderator.algo.ts:134","pc":[907,908]},{"teal":663,"source":"contracts\\Moderator.algo.ts:134","pc":[909]},{"teal":664,"source":"contracts\\Moderator.algo.ts:134","pc":[910]},{"teal":665,"source":"contracts\\Moderator.algo.ts:134","pc":[911,912]},{"teal":666,"source":"contracts\\Moderator.algo.ts:134","pc":[913]},{"teal":667,"source":"contracts\\Moderator.algo.ts:134","pc":[914]},{"teal":668,"source":"contracts\\Moderator.algo.ts:134","pc":[915]},{"teal":669,"source":"contracts\\Moderator.algo.ts:134","pc":[916]},{"teal":670,"source":"contracts\\Moderator.algo.ts:134","pc":[917]},{"teal":674,"source":"contracts\\Moderator.algo.ts:136","pc":[918]},{"teal":675,"source":"contracts\\Moderator.algo.ts:136","pc":[919,920]},{"teal":682,"source":"contracts\\Moderator.algo.ts:137","pc":[921,922]},{"teal":683,"source":"contracts\\Moderator.algo.ts:137","pc":[923,924]},{"teal":684,"source":"contracts\\Moderator.algo.ts:137","pc":[925]},{"teal":685,"source":"contracts\\Moderator.algo.ts:137","pc":[926]},{"teal":686,"source":"contracts\\Moderator.algo.ts:137","pc":[927]},{"teal":687,"source":"contracts\\Moderator.algo.ts:137","pc":[928,929,930]},{"teal":691,"source":"contracts\\Moderator.algo.ts:138","pc":[931,932]},{"teal":692,"source":"contracts\\Moderator.algo.ts:138","pc":[933,934]},{"teal":693,"source":"contracts\\Moderator.algo.ts:138","pc":[935]},{"teal":694,"source":"contracts\\Moderator.algo.ts:138","pc":[936,937]},{"teal":695,"source":"contracts\\Moderator.algo.ts:138","pc":[938]},{"teal":696,"source":"contracts\\Moderator.algo.ts:138","pc":[939]},{"teal":697,"source":"contracts\\Moderator.algo.ts:138","pc":[940]},{"teal":698,"source":"contracts\\Moderator.algo.ts:138","pc":[941]},{"teal":699,"source":"contracts\\Moderator.algo.ts:138","pc":[942]},{"teal":700,"source":"contracts\\Moderator.algo.ts:138","pc":[943,944]},{"teal":701,"source":"contracts\\Moderator.algo.ts:138","pc":[945,946]},{"teal":702,"source":"contracts\\Moderator.algo.ts:138","pc":[947,948]},{"teal":703,"source":"contracts\\Moderator.algo.ts:138","pc":[949]},{"teal":704,"source":"contracts\\Moderator.algo.ts:138","pc":[950]},{"teal":705,"source":"contracts\\Moderator.algo.ts:138","pc":[951]},{"teal":706,"source":"contracts\\Moderator.algo.ts:138","pc":[952]},{"teal":707,"source":"contracts\\Moderator.algo.ts:138","pc":[953,954]},{"teal":708,"source":"contracts\\Moderator.algo.ts:138","pc":[955]},{"teal":709,"source":"contracts\\Moderator.algo.ts:138","pc":[956]},{"teal":710,"source":"contracts\\Moderator.algo.ts:138","pc":[957]},{"teal":711,"source":"contracts\\Moderator.algo.ts:138","pc":[958]},{"teal":712,"source":"contracts\\Moderator.algo.ts:138","pc":[959]},{"teal":713,"source":"contracts\\Moderator.algo.ts:138","pc":[960]},{"teal":714,"source":"contracts\\Moderator.algo.ts:138","pc":[961]},{"teal":715,"source":"contracts\\Moderator.algo.ts:138","pc":[962,963,964]},{"teal":716,"source":"contracts\\Moderator.algo.ts:138","pc":[965,966]},{"teal":720,"source":"contracts\\Moderator.algo.ts:139","pc":[967,968]},{"teal":721,"source":"contracts\\Moderator.algo.ts:139","pc":[969,970]},{"teal":722,"source":"contracts\\Moderator.algo.ts:139","pc":[971]},{"teal":723,"source":"contracts\\Moderator.algo.ts:139","pc":[972,973]},{"teal":724,"source":"contracts\\Moderator.algo.ts:139","pc":[974]},{"teal":725,"source":"contracts\\Moderator.algo.ts:139","pc":[975]},{"teal":726,"source":"contracts\\Moderator.algo.ts:139","pc":[976]},{"teal":727,"source":"contracts\\Moderator.algo.ts:139","pc":[977,978]},{"teal":728,"source":"contracts\\Moderator.algo.ts:139","pc":[979]},{"teal":729,"source":"contracts\\Moderator.algo.ts:139","pc":[980]},{"teal":730,"source":"contracts\\Moderator.algo.ts:139","pc":[981]},{"teal":731,"source":"contracts\\Moderator.algo.ts:139","pc":[982]},{"teal":732,"source":"contracts\\Moderator.algo.ts:139","pc":[983,984]},{"teal":736,"source":"contracts\\Moderator.algo.ts:141","pc":[985,986]},{"teal":737,"source":"contracts\\Moderator.algo.ts:141","pc":[987,988]},{"teal":738,"source":"contracts\\Moderator.algo.ts:141","pc":[989]},{"teal":739,"source":"contracts\\Moderator.algo.ts:141","pc":[990]},{"teal":740,"source":"contracts\\Moderator.algo.ts:141","pc":[991]},{"teal":741,"source":"contracts\\Moderator.algo.ts:141","pc":[992,993,994]},{"teal":742,"source":"contracts\\Moderator.algo.ts:141","pc":[995]},{"teal":743,"source":"contracts\\Moderator.algo.ts:141","pc":[996]},{"teal":744,"source":"contracts\\Moderator.algo.ts:141","pc":[997]},{"teal":745,"source":"contracts\\Moderator.algo.ts:141","pc":[998]},{"teal":748,"source":"contracts\\Moderator.algo.ts:141","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[999]},{"teal":749,"source":"contracts\\Moderator.algo.ts:141","pc":[1000]},{"teal":750,"source":"contracts\\Moderator.algo.ts:141","pc":[1001,1002]},{"teal":754,"source":"contracts\\Moderator.algo.ts:142","pc":[1003,1004]},{"teal":755,"source":"contracts\\Moderator.algo.ts:142","pc":[1005,1006]},{"teal":756,"source":"contracts\\Moderator.algo.ts:142","pc":[1007,1008]},{"teal":757,"source":"contracts\\Moderator.algo.ts:142","pc":[1009]},{"teal":758,"source":"contracts\\Moderator.algo.ts:142","pc":[1010]},{"teal":759,"source":"contracts\\Moderator.algo.ts:142","pc":[1011,1012]},{"teal":763,"source":"contracts\\Moderator.algo.ts:144","pc":[1013,1014]},{"teal":764,"source":"contracts\\Moderator.algo.ts:144","pc":[1015,1016]},{"teal":765,"source":"contracts\\Moderator.algo.ts:144","pc":[1017]},{"teal":766,"source":"contracts\\Moderator.algo.ts:144","pc":[1018]},{"teal":767,"source":"contracts\\Moderator.algo.ts:144","pc":[1019]},{"teal":768,"source":"contracts\\Moderator.algo.ts:144","pc":[1020,1021,1022]},{"teal":769,"source":"contracts\\Moderator.algo.ts:144","pc":[1023]},{"teal":770,"source":"contracts\\Moderator.algo.ts:144","pc":[1024]},{"teal":771,"source":"contracts\\Moderator.algo.ts:144","pc":[1025]},{"teal":772,"source":"contracts\\Moderator.algo.ts:144","pc":[1026,1027]},{"teal":773,"source":"contracts\\Moderator.algo.ts:144","pc":[1028]},{"teal":774,"source":"contracts\\Moderator.algo.ts:144","pc":[1029]},{"teal":778,"source":"contracts\\Moderator.algo.ts:145","pc":[1030,1031]},{"teal":779,"source":"contracts\\Moderator.algo.ts:145","pc":[1032]},{"teal":780,"source":"contracts\\Moderator.algo.ts:145","pc":[1033]},{"teal":781,"source":"contracts\\Moderator.algo.ts:145","pc":[1034,1035]},{"teal":782,"source":"contracts\\Moderator.algo.ts:137","pc":[1036,1037,1038]},{"teal":785,"source":"contracts\\Moderator.algo.ts:130","pc":[1039]},{"teal":790,"source":"contracts\\Moderator.algo.ts:150","pc":[1040,1041,1042]},{"teal":793,"source":"contracts\\Moderator.algo.ts:150","pc":[1043,1044,1045]},{"teal":794,"source":"contracts\\Moderator.algo.ts:150","pc":[1046]},{"teal":795,"source":"contracts\\Moderator.algo.ts:150","pc":[1047]},{"teal":799,"source":"contracts\\Moderator.algo.ts:150","pc":[1048,1049,1050]},{"teal":802,"source":"contracts\\Moderator.algo.ts:150","pc":[1051]},{"teal":803,"source":"contracts\\Moderator.algo.ts:150","pc":[1052,1053]},{"teal":807,"source":"contracts\\Moderator.algo.ts:151","pc":[1054,1055]},{"teal":808,"source":"contracts\\Moderator.algo.ts:151","pc":[1056,1057,1058]},{"teal":809,"source":"contracts\\Moderator.algo.ts:151","pc":[1059,1060]},{"teal":810,"source":"contracts\\Moderator.algo.ts:151","pc":[1061]},{"teal":811,"source":"contracts\\Moderator.algo.ts:151","pc":[1062]},{"teal":812,"source":"contracts\\Moderator.algo.ts:151","pc":[1063]},{"teal":816,"source":"contracts\\Moderator.algo.ts:153","pc":[1064,1065]},{"teal":817,"source":"contracts\\Moderator.algo.ts:153","pc":[1066]},{"teal":820,"source":"contracts\\Moderator.algo.ts:153","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[1067]},{"teal":821,"source":"contracts\\Moderator.algo.ts:153","pc":[1068]},{"teal":822,"source":"contracts\\Moderator.algo.ts:153","pc":[1069,1070]},{"teal":826,"source":"contracts\\Moderator.algo.ts:154","pc":[1071,1072]},{"teal":827,"source":"contracts\\Moderator.algo.ts:154","pc":[1073]},{"teal":828,"source":"contracts\\Moderator.algo.ts:154","pc":[1074]},{"teal":831,"source":"contracts\\Moderator.algo.ts:154","errorMessage":"No data has been aggregated yet.","pc":[1075]},{"teal":835,"source":"contracts\\Moderator.algo.ts:156","pc":[1076]},{"teal":836,"source":"contracts\\Moderator.algo.ts:156","pc":[1077,1078]},{"teal":843,"source":"contracts\\Moderator.algo.ts:157","pc":[1079,1080]},{"teal":844,"source":"contracts\\Moderator.algo.ts:157","pc":[1081,1082]},{"teal":845,"source":"contracts\\Moderator.algo.ts:157","pc":[1083]},{"teal":846,"source":"contracts\\Moderator.algo.ts:157","pc":[1084]},{"teal":847,"source":"contracts\\Moderator.algo.ts:157","pc":[1085]},{"teal":848,"source":"contracts\\Moderator.algo.ts:157","pc":[1086,1087,1088]},{"teal":852,"source":"contracts\\Moderator.algo.ts:158","pc":[1089,1090]},{"teal":853,"source":"contracts\\Moderator.algo.ts:158","pc":[1091,1092]},{"teal":854,"source":"contracts\\Moderator.algo.ts:158","pc":[1093]},{"teal":855,"source":"contracts\\Moderator.algo.ts:158","pc":[1094,1095]},{"teal":856,"source":"contracts\\Moderator.algo.ts:158","pc":[1096]},{"teal":857,"source":"contracts\\Moderator.algo.ts:158","pc":[1097]},{"teal":858,"source":"contracts\\Moderator.algo.ts:158","pc":[1098]},{"teal":859,"source":"contracts\\Moderator.algo.ts:158","pc":[1099]},{"teal":860,"source":"contracts\\Moderator.algo.ts:158","pc":[1100]},{"teal":861,"source":"contracts\\Moderator.algo.ts:158","pc":[1101,1102]},{"teal":862,"source":"contracts\\Moderator.algo.ts:158","pc":[1103,1104]},{"teal":863,"source":"contracts\\Moderator.algo.ts:158","pc":[1105,1106]},{"teal":864,"source":"contracts\\Moderator.algo.ts:158","pc":[1107]},{"teal":865,"source":"contracts\\Moderator.algo.ts:158","pc":[1108]},{"teal":866,"source":"contracts\\Moderator.algo.ts:158","pc":[1109]},{"teal":867,"source":"contracts\\Moderator.algo.ts:158","pc":[1110]},{"teal":868,"source":"contracts\\Moderator.algo.ts:158","pc":[1111,1112]},{"teal":869,"source":"contracts\\Moderator.algo.ts:158","pc":[1113]},{"teal":870,"source":"contracts\\Moderator.algo.ts:158","pc":[1114]},{"teal":871,"source":"contracts\\Moderator.algo.ts:158","pc":[1115]},{"teal":872,"source":"contracts\\Moderator.algo.ts:158","pc":[1116]},{"teal":873,"source":"contracts\\Moderator.algo.ts:158","pc":[1117]},{"teal":874,"source":"contracts\\Moderator.algo.ts:158","pc":[1118]},{"teal":875,"source":"contracts\\Moderator.algo.ts:158","pc":[1119]},{"teal":876,"source":"contracts\\Moderator.algo.ts:158","pc":[1120,1121,1122]},{"teal":877,"source":"contracts\\Moderator.algo.ts:158","pc":[1123,1124]},{"teal":881,"source":"contracts\\Moderator.algo.ts:159","pc":[1125,1126]},{"teal":882,"source":"contracts\\Moderator.algo.ts:159","pc":[1127,1128]},{"teal":883,"source":"contracts\\Moderator.algo.ts:159","pc":[1129]},{"teal":884,"source":"contracts\\Moderator.algo.ts:159","pc":[1130]},{"teal":885,"source":"contracts\\Moderator.algo.ts:159","pc":[1131]},{"teal":886,"source":"contracts\\Moderator.algo.ts:159","pc":[1132,1133,1134]},{"teal":887,"source":"contracts\\Moderator.algo.ts:159","pc":[1135]},{"teal":888,"source":"contracts\\Moderator.algo.ts:159","pc":[1136]},{"teal":889,"source":"contracts\\Moderator.algo.ts:159","pc":[1137]},{"teal":890,"source":"contracts\\Moderator.algo.ts:159","pc":[1138]},{"teal":893,"source":"contracts\\Moderator.algo.ts:159","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[1139]},{"teal":894,"source":"contracts\\Moderator.algo.ts:159","pc":[1140]},{"teal":895,"source":"contracts\\Moderator.algo.ts:159","pc":[1141,1142]},{"teal":899,"source":"contracts\\Moderator.algo.ts:161","pc":[1143,1144]},{"teal":900,"source":"contracts\\Moderator.algo.ts:161","pc":[1145,1146]},{"teal":901,"source":"contracts\\Moderator.algo.ts:161","pc":[1147]},{"teal":902,"source":"contracts\\Moderator.algo.ts:161","pc":[1148,1149]},{"teal":906,"source":"contracts\\Moderator.algo.ts:163","pc":[1150,1151]},{"teal":907,"source":"contracts\\Moderator.algo.ts:163","pc":[1152,1153]},{"teal":908,"source":"contracts\\Moderator.algo.ts:163","pc":[1154]},{"teal":909,"source":"contracts\\Moderator.algo.ts:163","pc":[1155]},{"teal":910,"source":"contracts\\Moderator.algo.ts:163","pc":[1156]},{"teal":911,"source":"contracts\\Moderator.algo.ts:163","pc":[1157,1158,1159]},{"teal":912,"source":"contracts\\Moderator.algo.ts:163","pc":[1160]},{"teal":913,"source":"contracts\\Moderator.algo.ts:163","pc":[1161]},{"teal":914,"source":"contracts\\Moderator.algo.ts:163","pc":[1162]},{"teal":915,"source":"contracts\\Moderator.algo.ts:163","pc":[1163]},{"teal":916,"source":"contracts\\Moderator.algo.ts:163","pc":[1164]},{"teal":917,"source":"contracts\\Moderator.algo.ts:163","pc":[1165]},{"teal":918,"source":"contracts\\Moderator.algo.ts:163","pc":[1166,1167]},{"teal":919,"source":"contracts\\Moderator.algo.ts:163","pc":[1168,1169,1170]},{"teal":920,"source":"contracts\\Moderator.algo.ts:163","pc":[1171]},{"teal":921,"source":"contracts\\Moderator.algo.ts:163","pc":[1172]},{"teal":922,"source":"contracts\\Moderator.algo.ts:163","pc":[1173]},{"teal":923,"source":"contracts\\Moderator.algo.ts:163","pc":[1174,1175,1176]},{"teal":924,"source":"contracts\\Moderator.algo.ts:163","pc":[1177]},{"teal":925,"source":"contracts\\Moderator.algo.ts:163","pc":[1178]},{"teal":926,"source":"contracts\\Moderator.algo.ts:163","pc":[1179]},{"teal":930,"source":"contracts\\Moderator.algo.ts:165","pc":[1180,1181]},{"teal":931,"source":"contracts\\Moderator.algo.ts:165","pc":[1182]},{"teal":932,"source":"contracts\\Moderator.algo.ts:165","pc":[1183]},{"teal":933,"source":"contracts\\Moderator.algo.ts:165","pc":[1184,1185]},{"teal":934,"source":"contracts\\Moderator.algo.ts:157","pc":[1186,1187,1188]},{"teal":937,"source":"contracts\\Moderator.algo.ts:150","pc":[1189]},{"teal":942,"source":"contracts\\Moderator.algo.ts:170","pc":[1190,1191,1192]},{"teal":943,"source":"contracts\\Moderator.algo.ts:170","pc":[1193]},{"teal":944,"source":"contracts\\Moderator.algo.ts:170","pc":[1194]},{"teal":948,"source":"contracts\\Moderator.algo.ts:170","pc":[1195,1196,1197]},{"teal":952,"source":"contracts\\Moderator.algo.ts:171","pc":[1198,1199]},{"teal":953,"source":"contracts\\Moderator.algo.ts:171","pc":[1200,1201,1202]},{"teal":954,"source":"contracts\\Moderator.algo.ts:171","pc":[1203,1204]},{"teal":955,"source":"contracts\\Moderator.algo.ts:171","pc":[1205]},{"teal":956,"source":"contracts\\Moderator.algo.ts:171","pc":[1206]},{"teal":957,"source":"contracts\\Moderator.algo.ts:171","pc":[1207]},{"teal":958,"source":"contracts\\Moderator.algo.ts:170","pc":[1208]},{"teal":961,"source":"contracts\\Moderator.algo.ts:23","pc":[1209,1210,1211,1212,1213,1214]},{"teal":962,"source":"contracts\\Moderator.algo.ts:23","pc":[1215,1216,1217]},{"teal":963,"source":"contracts\\Moderator.algo.ts:23","pc":[1218,1219,1220,1221]},{"teal":966,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1222]},{"teal":969,"source":"contracts\\Moderator.algo.ts:23","pc":[1223,1224,1225,1226,1227,1228]},{"teal":970,"source":"contracts\\Moderator.algo.ts:23","pc":[1229,1230,1231,1232,1233,1234]},{"teal":971,"source":"contracts\\Moderator.algo.ts:23","pc":[1235,1236,1237,1238,1239,1240]},{"teal":972,"source":"contracts\\Moderator.algo.ts:23","pc":[1241,1242,1243,1244,1245,1246]},{"teal":973,"source":"contracts\\Moderator.algo.ts:23","pc":[1247,1248,1249,1250,1251,1252]},{"teal":974,"source":"contracts\\Moderator.algo.ts:23","pc":[1253,1254,1255,1256,1257,1258]},{"teal":975,"source":"contracts\\Moderator.algo.ts:23","pc":[1259,1260,1261,1262,1263,1264]},{"teal":976,"source":"contracts\\Moderator.algo.ts:23","pc":[1265,1266,1267,1268,1269,1270]},{"teal":977,"source":"contracts\\Moderator.algo.ts:23","pc":[1271,1272,1273]},{"teal":978,"source":"contracts\\Moderator.algo.ts:23","pc":[1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291]},{"teal":981,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1292]},{"teal":984,"source":"contracts\\Moderator.algo.ts:23","pc":[1293,1294,1295,1296,1297,1298]},{"teal":985,"source":"contracts\\Moderator.algo.ts:23","pc":[1299,1300,1301]},{"teal":986,"source":"contracts\\Moderator.algo.ts:23","pc":[1302,1303,1304,1305]},{"teal":989,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1306]},{"teal":992,"source":"contracts\\Moderator.algo.ts:23","pc":[1307,1308,1309,1310,1311,1312]},{"teal":993,"source":"contracts\\Moderator.algo.ts:23","pc":[1313,1314,1315]},{"teal":994,"source":"contracts\\Moderator.algo.ts:23","pc":[1316,1317,1318,1319]},{"teal":997,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1320]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:23","pc":[1321,1322,1323]},{"teal":1001,"source":"contracts\\Moderator.algo.ts:23","pc":[1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335]},{"teal":1002,"source":"contracts\\Moderator.algo.ts:23","pc":[1336,1337]},{"teal":1003,"source":"contracts\\Moderator.algo.ts:23","pc":[1338]},{"teal":1004,"source":"contracts\\Moderator.algo.ts:23","pc":[1339]},{"teal":1005,"source":"contracts\\Moderator.algo.ts:23","pc":[1340]},{"teal":1009,"source":"contracts\\Moderator.algo.ts:23","pc":[1341,1342,1343]},{"teal":1010,"source":"contracts\\Moderator.algo.ts:23","pc":[1344,1345]},{"teal":1011,"source":"contracts\\Moderator.algo.ts:23","pc":[1346]},{"teal":1012,"source":"contracts\\Moderator.algo.ts:23","pc":[1347]},{"teal":1013,"source":"contracts\\Moderator.algo.ts:23","pc":[1348,1349,1350]},{"teal":1014,"source":"contracts\\Moderator.algo.ts:23","pc":[1351,1352,1353]},{"teal":1015,"source":"contracts\\Moderator.algo.ts:23","pc":[1354]},{"teal":1018,"source":"contracts\\Moderator.algo.ts:23","pc":[1355,1356]},{"teal":1019,"source":"contracts\\Moderator.algo.ts:23","pc":[1357,1358]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:23","pc":[1359]},{"teal":1021,"source":"contracts\\Moderator.algo.ts:23","pc":[1360]},{"teal":1022,"source":"contracts\\Moderator.algo.ts:23","pc":[1361]},{"teal":1023,"source":"contracts\\Moderator.algo.ts:23","pc":[1362,1363,1364]},{"teal":1024,"source":"contracts\\Moderator.algo.ts:23","pc":[1365,1366]},{"teal":1025,"source":"contracts\\Moderator.algo.ts:23","pc":[1367,1368]},{"teal":1026,"source":"contracts\\Moderator.algo.ts:23","pc":[1369]},{"teal":1027,"source":"contracts\\Moderator.algo.ts:23","pc":[1370,1371,1372]},{"teal":1028,"source":"contracts\\Moderator.algo.ts:23","pc":[1373,1374,1375]},{"teal":1031,"source":"contracts\\Moderator.algo.ts:23","pc":[1376]},{"teal":1034,"source":"contracts\\Moderator.algo.ts:23","pc":[1377,1378]},{"teal":1035,"source":"contracts\\Moderator.algo.ts:23","pc":[1379,1380]},{"teal":1036,"source":"contracts\\Moderator.algo.ts:23","pc":[1381]},{"teal":1037,"source":"contracts\\Moderator.algo.ts:23","pc":[1382,1383,1384]},{"teal":1038,"source":"contracts\\Moderator.algo.ts:23","pc":[1385]},{"teal":1039,"source":"contracts\\Moderator.algo.ts:23","pc":[1386]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAAECCAogEBgwJgoALWNsYXNzaWZpY2F0aW9uUGVyZm9ybWFuY2VNZXRyaWNzAAtyY2xhc3NNb2RlbCZyZWdyZXNzaW9uUGVyZm9ybWFuY2VNZXRyaWNzAAhyZWdNb2RlbAhpcGZzSGFzaBx0b3RhbERhdGFTaXplAA10b3RhbERhdGFTaXplCGFnZ3JTdW1zBBUffHUxTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbh9mYWlsZWQgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnRzDXBhcmFtZXRlcktleXMxGBSBBgsxGQiNDAOsAAAAAAAAA/IEAAOeAAAAAAAAAAAAAAA2GgFXAgCIAAIjQ4oBACuL/0kVFlcGAkxQZ4k2GgFXAgCIAAIjQ4oBADEANjIAcgdIEkQri/9JFRZXBgJMUGeJJwY2GgFXAgCIAAxJFRZXBgJMUFCwI0OKAQEri/9JFRZXBgJMUGcrZFcCAIk2GgI2GgGIAAIjQ4oCAChHAjEANjIAcgdIEkSL/yJZi/4iWRJEIowAiwCL/yJZDEEAbIv/Nf8iiwAkCwgkCDT/NP9PAlkkCEk0/0xZIwskCFhXAgCMAYv+Nf8iiwAkCwgkCDT/NP9PAlkkCEk0/0xZIwskCFhXAgCMAicJiwFJFRZXBgJMUFBJvEiLAkkVFlcGAkxQv4sAIwiMAEL/iok2GgFJFSEIEkSIAAIjQ4oBADEANjIAcgdIEkQpi/+/iTYaAUkVIQUSRIgAAiNDigEAMQA2MgByB0gSRCqL/7+JJwY2GgFJFSEFEkSIAAxJFRZXBgJMUFCwI0OKAQGL/1cACBcqIiW6Fw5JQQAOi/9XEAgXKiEGJboXDhBJQQANi/9XCAgXKiUluhcOEElBAA6L/1cYCBcqIQcluhcPEEEAAycHiScIiScGNhoBSRUhCBJEiAAMSRUWVwYCTFBQsCNDigEBMQA2MgByB0gSRIv/VwAIFykiJboXD0lBAA2L/1cICBcpJSW6Fw8QSUEADov/VxAIFykhBiW6Fw8QSUEADov/VxgIFykhByW6Fw8QSUEADov/VyAIFykhBSW6Fw8QSUEADov/VygIFymBKCW6Fw8QQQADJweJJwiJNhoDFzYaAlcCADYaAYgAAiNDigMAKEcFJwS+RBeMACcEiwCL/QgWv4v/IlmL/hUlChJEIowBiwGL/yJZDEEAbIv/Nf8iiwEkCwgkCDT/NP9PAlkkCEk0/0xZIwskCFhXAgCMAov+Nf8iiwElCwg0/0wlWBeMAycFiwJJFRZXBgJMUFC+RBeMBIsEiwOL/QsIjAUnBYsCSRUWVwYCTFBQiwUWv4sBIwiMAUL/iok2GgGIAAIjQ4oBAChHBDEANjIAcgdIEkQnBL5EF4wAiwAiDUQijAGLAYv/IlkMQQBki/81/yKLASQLCCQINP80/08CWSQISTT/TFkjCyQIWFcCAIwCJwWLAkkVFlcGAkxQUL5EF4wDiwOLAAqMBCcJiwJJFRZXBgJMUFBJvEiLBIgAqkkVFlcGAkxQv4sBIwiMAUL/komIAAIjQ4oAADEANjIAcgdIEkSJgAQRV1bbNhoAjgH8VgCABJZqYLeABE5Cj4aABLx6O36ABH3i382ABL+K3t+ABJfB2rKABO3n6HiABKcGa302GgCOCPxQ/Hz9G/07/Vv9wv5X/wQAgAQXR0BbNhoAjgH8HQCABCSHwyw2GgCOAf9+AIoBAYAKMDEyMzQ1Njc4OYv/I1iJigEBi/8iEkEABIABMImL/yEECiINQQALi/8hBAqI/+BCAAEoi/8hBBiI/8BQiQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  specificity: bigint,
  f1Score: bigint,
  roc: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'printHash(string)string': {
      modelHash: string
    }
    'storeModelParams(string[],string[])void': {
      paramkeys: string[]
      paramValues: string[]
    }
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Classification
    }
    'submitLocalUpdate(string[],uint64[],uint64)void': {
      paramKeys: string[]
      paramValues: bigint[] | number[]
      dataSize: bigint | number
    }
    'finalizeFedAvg(string[])void': {
      paramKeys: string[]
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'printHash(string)string': [modelHash: string]
    'storeModelParams(string[],string[])void': [paramkeys: string[], paramValues: string[]]
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void': [evaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Classification]
    'submitLocalUpdate(string[],uint64[],uint64)void': [paramKeys: string[], paramValues: bigint[] | number[], dataSize: bigint | number]
    'finalizeFedAvg(string[])void': [paramKeys: string[]]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'printHash(string)string': string
  'storeModelParams(string[],string[])void': void
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void': void
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string': string
  'submitLocalUpdate(string[],uint64[],uint64)void': void
  'finalizeFedAvg(string[])void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'printHash(string)string' | 'printHash', {
      argsObj: DmlChainArgs['obj']['printHash(string)string']
      argsTuple: DmlChainArgs['tuple']['printHash(string)string']
      returns: DmlChainReturns['printHash(string)string']
    }>
    & Record<'storeModelParams(string[],string[])void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(string[],string[])void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(string[],string[])void']
      returns: DmlChainReturns['storeModelParams(string[],string[])void']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']
    }>
    & Record<'submitLocalUpdate(string[],uint64[],uint64)void' | 'submitLocalUpdate', {
      argsObj: DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void']
      argsTuple: DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']
      returns: DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void']
    }>
    & Record<'finalizeFedAvg(string[])void' | 'finalizeFedAvg', {
      argsObj: DmlChainArgs['obj']['finalizeFedAvg(string[])void']
      argsTuple: DmlChainArgs['tuple']['finalizeFedAvg(string[])void']
      returns: DmlChainReturns['finalizeFedAvg(string[])void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        parameterKeys: Map<string, string>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
        aggregatorParameterSums: Map<string, bigint>
        totalDataSize: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the printHash(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printHash(params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printHash(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(string[],string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(string[],string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramkeys, params.args.paramValues],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the submitLocalUpdate(string[],uint64[],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitLocalUpdate(string[],uint64[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys, params.args.paramValues, params.args.dataSize],
    }
  }
  /**
   * Constructs a no op call for the finalizeFedAvg(string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeFedAvg(string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printHash: async (params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printHash(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['printHash(string)string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(string[],string[])void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitLocalUpdate: async (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.submitLocalUpdate(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalizeFedAvg: async (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.finalizeFedAvg(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['finalizeFedAvg(string[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the parameterKeys map in box state
       */
      parameterKeys: {
        /**
         * Get all current values of the parameterKeys map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("parameterKeys")) as Map<string, string> },
        /**
         * Get a current value of the parameterKeys map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("parameterKeys", key) as string | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
      /**
       * Get values from the aggregatorParameterSums map in box state
       */
      aggregatorParameterSums: {
        /**
         * Get all current values of the aggregatorParameterSums map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("aggregatorParameterSums")) as Map<string, bigint> },
        /**
         * Get a current value of the aggregatorParameterSums map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("aggregatorParameterSums", key) as bigint | undefined },
      },
      /**
       * Get values from the totalDataSize map in box state
       */
      totalDataSize: {
        /**
         * Get all current values of the totalDataSize map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("totalDataSize")) as Map<string, bigint> },
        /**
         * Get a current value of the totalDataSize map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("totalDataSize", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a printHash(string)string method call against the DMLChain contract
       */
      printHash(params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('printHash(string)string', v))
        return this
      },
      /**
       * Add a storeModelParams(string[],string[])void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a submitLocalUpdate(string[],uint64[],uint64)void method call against the DMLChain contract
       */
      submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitLocalUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeFedAvg(string[])void method call against the DMLChain contract
       */
      finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeFedAvg(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the printHash(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printHash(params?: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']>): DmlChainComposer<[...TReturns, DmlChainReturns['printHash(string)string'] | undefined]>

  /**
   * Calls the storeModelParams(string[],string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(string[],string[])void'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the submitLocalUpdate(string[],uint64[],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitLocalUpdate(params?: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void'] | undefined]>

  /**
   * Calls the finalizeFedAvg(string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeFedAvg(params?: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['finalizeFedAvg(string[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

