/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"assignRewardPool","args":[{"name":"rewardPoolAmount","type":"uint64"},{"name":"rewardPoolTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"commitToListing","args":[{"name":"stakeAmountTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"checkBalance","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"payoutRewards","args":[{"name":"Address","type":"address"},{"name":"reward","type":"uint64"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"bulkPayoutRewards","args":[{"name":"addresses","type":"address[]"},{"name":"rewards","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getClassificationCriteria","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"mbrPay","type":"pay"},{"name":"Address","type":"address"},{"name":"paramsData","type":"(string,string,uint64,uint64)","struct":"ParamsData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string,uint64,uint64)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"distributeRewards","args":[{"name":"contributor","type":"(uint64)","struct":"rewardCalculation"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"ParamsData":[{"name":"paramHash","type":"string"},{"name":"paramKey","type":"string"},{"name":"score","type":"uint64"},{"name":"reputation","type":"uint64"}],"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}],"rewardCalculation":[{"name":"score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"},"rewardPool":{"key":"cmV3YXJkUG9vbA==","keyType":"AVMBytes","valueType":"uint64"},"stakeAmount":{"key":"c3Rha2VBbW91bnQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"paramsData":{"keyType":"address","valueType":"ParamsData"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:35","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:35","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"teal":3,"source":"contracts\\Moderator.algo.ts:35","pc":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84]},{"teal":15,"source":"contracts\\Moderator.algo.ts:35","pc":[85,86]},{"teal":16,"source":"contracts\\Moderator.algo.ts:35","pc":[87]},{"teal":17,"source":"contracts\\Moderator.algo.ts:35","pc":[88,89]},{"teal":18,"source":"contracts\\Moderator.algo.ts:35","pc":[90]},{"teal":19,"source":"contracts\\Moderator.algo.ts:35","pc":[91,92]},{"teal":20,"source":"contracts\\Moderator.algo.ts:35","pc":[93]},{"teal":21,"source":"contracts\\Moderator.algo.ts:35","pc":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119]},{"teal":25,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[120]},{"teal":30,"source":"contracts\\Moderator.algo.ts:54","pc":[121,122,123]},{"teal":31,"source":"contracts\\Moderator.algo.ts:54","pc":[124,125,126]},{"teal":34,"source":"contracts\\Moderator.algo.ts:54","pc":[127,128,129]},{"teal":35,"source":"contracts\\Moderator.algo.ts:54","pc":[130]},{"teal":36,"source":"contracts\\Moderator.algo.ts:54","pc":[131]},{"teal":40,"source":"contracts\\Moderator.algo.ts:54","pc":[132,133,134]},{"teal":44,"source":"contracts\\Moderator.algo.ts:55","pc":[135,136]},{"teal":45,"source":"contracts\\Moderator.algo.ts:55","pc":[137,138]},{"teal":46,"source":"contracts\\Moderator.algo.ts:55","pc":[139]},{"teal":47,"source":"contracts\\Moderator.algo.ts:55","pc":[140]},{"teal":48,"source":"contracts\\Moderator.algo.ts:55","pc":[141]},{"teal":49,"source":"contracts\\Moderator.algo.ts:55","pc":[142,143,144]},{"teal":50,"source":"contracts\\Moderator.algo.ts:55","pc":[145]},{"teal":51,"source":"contracts\\Moderator.algo.ts:55","pc":[146]},{"teal":52,"source":"contracts\\Moderator.algo.ts:55","pc":[147]},{"teal":53,"source":"contracts\\Moderator.algo.ts:54","pc":[148]},{"teal":58,"source":"contracts\\Moderator.algo.ts:59","pc":[149,150,151]},{"teal":59,"source":"contracts\\Moderator.algo.ts:59","pc":[152,153,154]},{"teal":62,"source":"contracts\\Moderator.algo.ts:59","pc":[155,156,157]},{"teal":63,"source":"contracts\\Moderator.algo.ts:59","pc":[158]},{"teal":64,"source":"contracts\\Moderator.algo.ts:59","pc":[159]},{"teal":68,"source":"contracts\\Moderator.algo.ts:59","pc":[160,161,162]},{"teal":72,"source":"contracts\\Moderator.algo.ts:60","pc":[163,164]},{"teal":73,"source":"contracts\\Moderator.algo.ts:60","pc":[165,166,167]},{"teal":74,"source":"contracts\\Moderator.algo.ts:60","pc":[168,169]},{"teal":75,"source":"contracts\\Moderator.algo.ts:60","pc":[170]},{"teal":76,"source":"contracts\\Moderator.algo.ts:60","pc":[171]},{"teal":77,"source":"contracts\\Moderator.algo.ts:60","pc":[172]},{"teal":81,"source":"contracts\\Moderator.algo.ts:61","pc":[173,174]},{"teal":82,"source":"contracts\\Moderator.algo.ts:61","pc":[175,176]},{"teal":83,"source":"contracts\\Moderator.algo.ts:61","pc":[177]},{"teal":84,"source":"contracts\\Moderator.algo.ts:61","pc":[178]},{"teal":85,"source":"contracts\\Moderator.algo.ts:61","pc":[179]},{"teal":86,"source":"contracts\\Moderator.algo.ts:61","pc":[180,181,182]},{"teal":87,"source":"contracts\\Moderator.algo.ts:61","pc":[183]},{"teal":88,"source":"contracts\\Moderator.algo.ts:61","pc":[184]},{"teal":89,"source":"contracts\\Moderator.algo.ts:61","pc":[185]},{"teal":90,"source":"contracts\\Moderator.algo.ts:59","pc":[186]},{"teal":95,"source":"contracts\\Moderator.algo.ts:65","pc":[187]},{"teal":98,"source":"contracts\\Moderator.algo.ts:65","pc":[188,189]},{"teal":99,"source":"contracts\\Moderator.algo.ts:65","pc":[190]},{"teal":100,"source":"contracts\\Moderator.algo.ts:65","pc":[191]},{"teal":101,"source":"contracts\\Moderator.algo.ts:65","pc":[192]},{"teal":102,"source":"contracts\\Moderator.algo.ts:65","pc":[193,194]},{"teal":103,"source":"contracts\\Moderator.algo.ts:65","pc":[195]},{"teal":104,"source":"contracts\\Moderator.algo.ts:65","pc":[196]},{"teal":107,"source":"contracts\\Moderator.algo.ts:65","errorMessage":"argument 0 (rewardPoolTxn) for assignRewardPool must be a pay transaction","pc":[197]},{"teal":110,"source":"contracts\\Moderator.algo.ts:65","pc":[198,199,200]},{"teal":111,"source":"contracts\\Moderator.algo.ts:65","pc":[201]},{"teal":114,"source":"contracts\\Moderator.algo.ts:65","pc":[202,203,204]},{"teal":115,"source":"contracts\\Moderator.algo.ts:65","pc":[205]},{"teal":116,"source":"contracts\\Moderator.algo.ts:65","pc":[206]},{"teal":117,"source":"contracts\\Moderator.algo.ts:65","pc":[207]},{"teal":118,"source":"contracts\\Moderator.algo.ts:65","pc":[208]},{"teal":119,"source":"contracts\\Moderator.algo.ts:65","pc":[209]},{"teal":123,"source":"contracts\\Moderator.algo.ts:65","pc":[210,211,212]},{"teal":132,"source":"contracts\\Moderator.algo.ts:66","pc":[213,214]},{"teal":133,"source":"contracts\\Moderator.algo.ts:67","pc":[215,216]},{"teal":134,"source":"contracts\\Moderator.algo.ts:67","pc":[217,218]},{"teal":135,"source":"contracts\\Moderator.algo.ts:67","pc":[219]},{"teal":138,"source":"contracts\\Moderator.algo.ts:67","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[220]},{"teal":141,"source":"contracts\\Moderator.algo.ts:66","pc":[221,222]},{"teal":142,"source":"contracts\\Moderator.algo.ts:68","pc":[223,224]},{"teal":143,"source":"contracts\\Moderator.algo.ts:68","pc":[225,226]},{"teal":144,"source":"contracts\\Moderator.algo.ts:68","pc":[227]},{"teal":147,"source":"contracts\\Moderator.algo.ts:68","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[228]},{"teal":150,"source":"contracts\\Moderator.algo.ts:66","pc":[229,230]},{"teal":151,"source":"contracts\\Moderator.algo.ts:69","pc":[231,232]},{"teal":152,"source":"contracts\\Moderator.algo.ts:69","pc":[233,234]},{"teal":153,"source":"contracts\\Moderator.algo.ts:69","pc":[235]},{"teal":156,"source":"contracts\\Moderator.algo.ts:69","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"amount\",\"expected\":\"rewardPoolAmount\"}","pc":[236]},{"teal":160,"source":"contracts\\Moderator.algo.ts:71","pc":[237,238,239,240,241,242,243,244,245,246,247,248]},{"teal":161,"source":"contracts\\Moderator.algo.ts:71","pc":[249,250]},{"teal":162,"source":"contracts\\Moderator.algo.ts:71","pc":[251]},{"teal":166,"source":"contracts\\Moderator.algo.ts:72","pc":[252,253]},{"teal":167,"source":"contracts\\Moderator.algo.ts:72","pc":[254]},{"teal":168,"source":"contracts\\Moderator.algo.ts:72","pc":[255,256]},{"teal":169,"source":"contracts\\Moderator.algo.ts:72","pc":[257]},{"teal":170,"source":"contracts\\Moderator.algo.ts:72","pc":[258,259]},{"teal":171,"source":"contracts\\Moderator.algo.ts:72","pc":[260]},{"teal":172,"source":"contracts\\Moderator.algo.ts:72","pc":[261]},{"teal":173,"source":"contracts\\Moderator.algo.ts:72","pc":[262]},{"teal":174,"source":"contracts\\Moderator.algo.ts:72","pc":[263]},{"teal":175,"source":"contracts\\Moderator.algo.ts:72","pc":[264]},{"teal":178,"source":"contracts\\Moderator.algo.ts:72","errorMessage":"wideRatio failed","pc":[265]},{"teal":179,"source":"contracts\\Moderator.algo.ts:72","pc":[266]},{"teal":183,"source":"contracts\\Moderator.algo.ts:73","pc":[267]},{"teal":184,"source":"contracts\\Moderator.algo.ts:65","pc":[268]},{"teal":189,"source":"contracts\\Moderator.algo.ts:77","pc":[269]},{"teal":192,"source":"contracts\\Moderator.algo.ts:77","pc":[270,271]},{"teal":193,"source":"contracts\\Moderator.algo.ts:77","pc":[272]},{"teal":194,"source":"contracts\\Moderator.algo.ts:77","pc":[273]},{"teal":195,"source":"contracts\\Moderator.algo.ts:77","pc":[274]},{"teal":196,"source":"contracts\\Moderator.algo.ts:77","pc":[275,276]},{"teal":197,"source":"contracts\\Moderator.algo.ts:77","pc":[277]},{"teal":198,"source":"contracts\\Moderator.algo.ts:77","pc":[278]},{"teal":201,"source":"contracts\\Moderator.algo.ts:77","errorMessage":"argument 0 (stakeAmountTxn) for commitToListing must be a pay transaction","pc":[279]},{"teal":204,"source":"contracts\\Moderator.algo.ts:77","pc":[280,281,282]},{"teal":205,"source":"contracts\\Moderator.algo.ts:77","pc":[283]},{"teal":206,"source":"contracts\\Moderator.algo.ts:77","pc":[284]},{"teal":207,"source":"contracts\\Moderator.algo.ts:77","pc":[285]},{"teal":208,"source":"contracts\\Moderator.algo.ts:77","pc":[286]},{"teal":209,"source":"contracts\\Moderator.algo.ts:77","pc":[287]},{"teal":213,"source":"contracts\\Moderator.algo.ts:77","pc":[288,289,290]},{"teal":222,"source":"contracts\\Moderator.algo.ts:78","pc":[291,292]},{"teal":223,"source":"contracts\\Moderator.algo.ts:79","pc":[293,294]},{"teal":224,"source":"contracts\\Moderator.algo.ts:79","pc":[295,296]},{"teal":225,"source":"contracts\\Moderator.algo.ts:79","pc":[297]},{"teal":228,"source":"contracts\\Moderator.algo.ts:79","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[298]},{"teal":231,"source":"contracts\\Moderator.algo.ts:78","pc":[299,300]},{"teal":232,"source":"contracts\\Moderator.algo.ts:80","pc":[301,302]},{"teal":233,"source":"contracts\\Moderator.algo.ts:80","pc":[303,304]},{"teal":234,"source":"contracts\\Moderator.algo.ts:80","pc":[305]},{"teal":237,"source":"contracts\\Moderator.algo.ts:80","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[306]},{"teal":240,"source":"contracts\\Moderator.algo.ts:78","pc":[307,308]},{"teal":241,"source":"contracts\\Moderator.algo.ts:81","pc":[309,310]},{"teal":242,"source":"contracts\\Moderator.algo.ts:81","pc":[311,312]},{"teal":243,"source":"contracts\\Moderator.algo.ts:81","pc":[313]},{"teal":244,"source":"contracts\\Moderator.algo.ts:81","pc":[314]},{"teal":247,"source":"contracts\\Moderator.algo.ts:81","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"amount\",\"expected\":\"this.stakeAmount.value\"}","pc":[315]},{"teal":251,"source":"contracts\\Moderator.algo.ts:84","pc":[316]},{"teal":252,"source":"contracts\\Moderator.algo.ts:77","pc":[317]},{"teal":257,"source":"contracts\\Moderator.algo.ts:88","pc":[318]},{"teal":260,"source":"contracts\\Moderator.algo.ts:88","pc":[319,320,321]},{"teal":261,"source":"contracts\\Moderator.algo.ts:88","pc":[322]},{"teal":262,"source":"contracts\\Moderator.algo.ts:88","pc":[323]},{"teal":263,"source":"contracts\\Moderator.algo.ts:88","pc":[324]},{"teal":264,"source":"contracts\\Moderator.algo.ts:88","pc":[325]},{"teal":265,"source":"contracts\\Moderator.algo.ts:88","pc":[326]},{"teal":269,"source":"contracts\\Moderator.algo.ts:88","pc":[327,328,329]},{"teal":273,"source":"contracts\\Moderator.algo.ts:89","pc":[330,331]},{"teal":274,"source":"contracts\\Moderator.algo.ts:89","pc":[332,333]},{"teal":275,"source":"contracts\\Moderator.algo.ts:89","pc":[334]},{"teal":276,"source":"contracts\\Moderator.algo.ts:88","pc":[335]},{"teal":281,"source":"contracts\\Moderator.algo.ts:93","pc":[336]},{"teal":284,"source":"contracts\\Moderator.algo.ts:93","pc":[337,338,339]},{"teal":285,"source":"contracts\\Moderator.algo.ts:93","pc":[340]},{"teal":288,"source":"contracts\\Moderator.algo.ts:93","pc":[341,342,343]},{"teal":289,"source":"contracts\\Moderator.algo.ts:93","pc":[344]},{"teal":290,"source":"contracts\\Moderator.algo.ts:93","pc":[345]},{"teal":291,"source":"contracts\\Moderator.algo.ts:93","pc":[346]},{"teal":292,"source":"contracts\\Moderator.algo.ts:93","pc":[347]},{"teal":295,"source":"contracts\\Moderator.algo.ts:93","errorMessage":"argument 1 (Address) for payoutRewards must be a address","pc":[348]},{"teal":298,"source":"contracts\\Moderator.algo.ts:93","pc":[349,350,351]},{"teal":299,"source":"contracts\\Moderator.algo.ts:93","pc":[352]},{"teal":300,"source":"contracts\\Moderator.algo.ts:93","pc":[353]},{"teal":301,"source":"contracts\\Moderator.algo.ts:93","pc":[354]},{"teal":302,"source":"contracts\\Moderator.algo.ts:93","pc":[355,356,357]},{"teal":303,"source":"contracts\\Moderator.algo.ts:93","pc":[358]},{"teal":304,"source":"contracts\\Moderator.algo.ts:93","pc":[359]},{"teal":305,"source":"contracts\\Moderator.algo.ts:93","pc":[360]},{"teal":306,"source":"contracts\\Moderator.algo.ts:93","pc":[361]},{"teal":307,"source":"contracts\\Moderator.algo.ts:93","pc":[362]},{"teal":308,"source":"contracts\\Moderator.algo.ts:93","pc":[363]},{"teal":312,"source":"contracts\\Moderator.algo.ts:93","pc":[364,365,366]},{"teal":320,"source":"contracts\\Moderator.algo.ts:94","pc":[367]},{"teal":321,"source":"contracts\\Moderator.algo.ts:94","pc":[368]},{"teal":322,"source":"contracts\\Moderator.algo.ts:94","pc":[369,370]},{"teal":326,"source":"contracts\\Moderator.algo.ts:95","pc":[371,372]},{"teal":327,"source":"contracts\\Moderator.algo.ts:95","pc":[373,374]},{"teal":331,"source":"contracts\\Moderator.algo.ts:96","pc":[375,376]},{"teal":332,"source":"contracts\\Moderator.algo.ts:96","pc":[377,378]},{"teal":336,"source":"contracts\\Moderator.algo.ts:97","pc":[379,380]},{"teal":337,"source":"contracts\\Moderator.algo.ts:97","pc":[381,382]},{"teal":340,"source":"contracts\\Moderator.algo.ts:94","pc":[383]},{"teal":341,"source":"contracts\\Moderator.algo.ts:94","pc":[384,385]},{"teal":344,"source":"contracts\\Moderator.algo.ts:94","pc":[386]},{"teal":348,"source":"contracts\\Moderator.algo.ts:100","pc":[387,388,389,390,391,392,393,394,395]},{"teal":349,"source":"contracts\\Moderator.algo.ts:93","pc":[396]},{"teal":354,"source":"contracts\\Moderator.algo.ts:104","pc":[397]},{"teal":357,"source":"contracts\\Moderator.algo.ts:104","pc":[398,399,400]},{"teal":358,"source":"contracts\\Moderator.algo.ts:104","pc":[401,402,403]},{"teal":361,"source":"contracts\\Moderator.algo.ts:104","pc":[404,405,406]},{"teal":362,"source":"contracts\\Moderator.algo.ts:104","pc":[407,408,409]},{"teal":365,"source":"contracts\\Moderator.algo.ts:104","pc":[410,411,412]},{"teal":366,"source":"contracts\\Moderator.algo.ts:104","pc":[413]},{"teal":367,"source":"contracts\\Moderator.algo.ts:104","pc":[414]},{"teal":368,"source":"contracts\\Moderator.algo.ts:104","pc":[415]},{"teal":369,"source":"contracts\\Moderator.algo.ts:104","pc":[416]},{"teal":370,"source":"contracts\\Moderator.algo.ts:104","pc":[417]},{"teal":374,"source":"contracts\\Moderator.algo.ts:104","pc":[418,419,420]},{"teal":377,"source":"contracts\\Moderator.algo.ts:104","pc":[421]},{"teal":378,"source":"contracts\\Moderator.algo.ts:104","pc":[422,423]},{"teal":382,"source":"contracts\\Moderator.algo.ts:105","pc":[424,425]},{"teal":383,"source":"contracts\\Moderator.algo.ts:105","pc":[426,427,428]},{"teal":384,"source":"contracts\\Moderator.algo.ts:105","pc":[429,430]},{"teal":385,"source":"contracts\\Moderator.algo.ts:105","pc":[431]},{"teal":386,"source":"contracts\\Moderator.algo.ts:105","pc":[432]},{"teal":387,"source":"contracts\\Moderator.algo.ts:105","pc":[433]},{"teal":391,"source":"contracts\\Moderator.algo.ts:106","pc":[434,435]},{"teal":392,"source":"contracts\\Moderator.algo.ts:106","pc":[436]},{"teal":393,"source":"contracts\\Moderator.algo.ts:106","pc":[437]},{"teal":394,"source":"contracts\\Moderator.algo.ts:106","pc":[438]},{"teal":395,"source":"contracts\\Moderator.algo.ts:106","pc":[439,440]},{"teal":396,"source":"contracts\\Moderator.algo.ts:106","pc":[441]},{"teal":397,"source":"contracts\\Moderator.algo.ts:106","pc":[442]},{"teal":398,"source":"contracts\\Moderator.algo.ts:106","pc":[443]},{"teal":399,"source":"contracts\\Moderator.algo.ts:106","pc":[444]},{"teal":402,"source":"contracts\\Moderator.algo.ts:106","errorMessage":"Arrays must have the same length","pc":[445]},{"teal":406,"source":"contracts\\Moderator.algo.ts:108","pc":[446]},{"teal":407,"source":"contracts\\Moderator.algo.ts:108","pc":[447,448]},{"teal":411,"source":"contracts\\Moderator.algo.ts:109","pc":[449]},{"teal":412,"source":"contracts\\Moderator.algo.ts:109","pc":[450,451]},{"teal":417,"source":"contracts\\Moderator.algo.ts:109","pc":[452,453]},{"teal":418,"source":"contracts\\Moderator.algo.ts:109","pc":[454,455]},{"teal":419,"source":"contracts\\Moderator.algo.ts:109","pc":[456]},{"teal":420,"source":"contracts\\Moderator.algo.ts:109","pc":[457]},{"teal":421,"source":"contracts\\Moderator.algo.ts:109","pc":[458]},{"teal":422,"source":"contracts\\Moderator.algo.ts:109","pc":[459]},{"teal":423,"source":"contracts\\Moderator.algo.ts:109","pc":[460,461,462]},{"teal":427,"source":"contracts\\Moderator.algo.ts:110","pc":[463,464]},{"teal":428,"source":"contracts\\Moderator.algo.ts:110","pc":[465,466]},{"teal":429,"source":"contracts\\Moderator.algo.ts:110","pc":[467,468]},{"teal":430,"source":"contracts\\Moderator.algo.ts:110","pc":[469]},{"teal":431,"source":"contracts\\Moderator.algo.ts:110","pc":[470,471]},{"teal":432,"source":"contracts\\Moderator.algo.ts:110","pc":[472]},{"teal":433,"source":"contracts\\Moderator.algo.ts:110","pc":[473]},{"teal":434,"source":"contracts\\Moderator.algo.ts:110","pc":[474]},{"teal":435,"source":"contracts\\Moderator.algo.ts:110","pc":[475,476]},{"teal":436,"source":"contracts\\Moderator.algo.ts:110","pc":[477]},{"teal":437,"source":"contracts\\Moderator.algo.ts:110","pc":[478]},{"teal":438,"source":"contracts\\Moderator.algo.ts:110","pc":[479]},{"teal":439,"source":"contracts\\Moderator.algo.ts:110","pc":[480]},{"teal":440,"source":"contracts\\Moderator.algo.ts:110","pc":[481]},{"teal":441,"source":"contracts\\Moderator.algo.ts:110","pc":[482,483]},{"teal":446,"source":"contracts\\Moderator.algo.ts:109","pc":[484,485]},{"teal":447,"source":"contracts\\Moderator.algo.ts:109","pc":[486]},{"teal":448,"source":"contracts\\Moderator.algo.ts:109","pc":[487]},{"teal":449,"source":"contracts\\Moderator.algo.ts:109","pc":[488,489]},{"teal":450,"source":"contracts\\Moderator.algo.ts:109","pc":[490,491,492]},{"teal":455,"source":"contracts\\Moderator.algo.ts:113","pc":[493,494]},{"teal":456,"source":"contracts\\Moderator.algo.ts:113","pc":[495]},{"teal":457,"source":"contracts\\Moderator.algo.ts:113","pc":[496]},{"teal":458,"source":"contracts\\Moderator.algo.ts:113","pc":[497]},{"teal":459,"source":"contracts\\Moderator.algo.ts:113","pc":[498,499]},{"teal":460,"source":"contracts\\Moderator.algo.ts:113","pc":[500]},{"teal":461,"source":"contracts\\Moderator.algo.ts:113","pc":[501]},{"teal":462,"source":"contracts\\Moderator.algo.ts:113","pc":[502]},{"teal":463,"source":"contracts\\Moderator.algo.ts:113","pc":[503]},{"teal":464,"source":"contracts\\Moderator.algo.ts:113","pc":[504]},{"teal":465,"source":"contracts\\Moderator.algo.ts:113","pc":[505]},{"teal":466,"source":"contracts\\Moderator.algo.ts:113","pc":[506]},{"teal":467,"source":"contracts\\Moderator.algo.ts:113","pc":[507]},{"teal":468,"source":"contracts\\Moderator.algo.ts:113","pc":[508]},{"teal":471,"source":"contracts\\Moderator.algo.ts:113","errorMessage":"wideRatio failed","pc":[509]},{"teal":472,"source":"contracts\\Moderator.algo.ts:113","pc":[510,511]},{"teal":476,"source":"contracts\\Moderator.algo.ts:115","pc":[512,513]},{"teal":477,"source":"contracts\\Moderator.algo.ts:115","pc":[514,515]},{"teal":478,"source":"contracts\\Moderator.algo.ts:115","pc":[516]},{"teal":479,"source":"contracts\\Moderator.algo.ts:115","pc":[517,518]},{"teal":483,"source":"contracts\\Moderator.algo.ts:117","pc":[519,520]},{"teal":484,"source":"contracts\\Moderator.algo.ts:117","pc":[521,522]},{"teal":485,"source":"contracts\\Moderator.algo.ts:117","pc":[523]},{"teal":486,"source":"contracts\\Moderator.algo.ts:117","pc":[524,525]},{"teal":487,"source":"contracts\\Moderator.algo.ts:117","pc":[526]},{"teal":490,"source":"contracts\\Moderator.algo.ts:117","errorMessage":"Insufficient balance for rewards","pc":[527]},{"teal":494,"source":"contracts\\Moderator.algo.ts:119","pc":[528]},{"teal":495,"source":"contracts\\Moderator.algo.ts:119","pc":[529,530]},{"teal":500,"source":"contracts\\Moderator.algo.ts:119","pc":[531,532]},{"teal":501,"source":"contracts\\Moderator.algo.ts:119","pc":[533,534]},{"teal":502,"source":"contracts\\Moderator.algo.ts:119","pc":[535]},{"teal":503,"source":"contracts\\Moderator.algo.ts:119","pc":[536]},{"teal":504,"source":"contracts\\Moderator.algo.ts:119","pc":[537]},{"teal":505,"source":"contracts\\Moderator.algo.ts:119","pc":[538]},{"teal":506,"source":"contracts\\Moderator.algo.ts:119","pc":[539,540,541]},{"teal":514,"source":"contracts\\Moderator.algo.ts:120","pc":[542]},{"teal":515,"source":"contracts\\Moderator.algo.ts:120","pc":[543]},{"teal":516,"source":"contracts\\Moderator.algo.ts:120","pc":[544,545]},{"teal":520,"source":"contracts\\Moderator.algo.ts:121","pc":[546,547]},{"teal":521,"source":"contracts\\Moderator.algo.ts:121","pc":[548,549]},{"teal":522,"source":"contracts\\Moderator.algo.ts:121","pc":[550]},{"teal":523,"source":"contracts\\Moderator.algo.ts:121","pc":[551,552]},{"teal":524,"source":"contracts\\Moderator.algo.ts:121","pc":[553]},{"teal":525,"source":"contracts\\Moderator.algo.ts:121","pc":[554]},{"teal":526,"source":"contracts\\Moderator.algo.ts:121","pc":[555]},{"teal":527,"source":"contracts\\Moderator.algo.ts:121","pc":[556,557]},{"teal":528,"source":"contracts\\Moderator.algo.ts:121","pc":[558]},{"teal":529,"source":"contracts\\Moderator.algo.ts:121","pc":[559]},{"teal":530,"source":"contracts\\Moderator.algo.ts:121","pc":[560]},{"teal":531,"source":"contracts\\Moderator.algo.ts:121","pc":[561]},{"teal":532,"source":"contracts\\Moderator.algo.ts:121","pc":[562,563]},{"teal":533,"source":"contracts\\Moderator.algo.ts:121","pc":[564]},{"teal":534,"source":"contracts\\Moderator.algo.ts:121","pc":[565]},{"teal":535,"source":"contracts\\Moderator.algo.ts:121","pc":[566,567]},{"teal":539,"source":"contracts\\Moderator.algo.ts:122","pc":[568,569]},{"teal":540,"source":"contracts\\Moderator.algo.ts:122","pc":[570,571]},{"teal":541,"source":"contracts\\Moderator.algo.ts:122","pc":[572]},{"teal":542,"source":"contracts\\Moderator.algo.ts:122","pc":[573,574]},{"teal":543,"source":"contracts\\Moderator.algo.ts:122","pc":[575]},{"teal":544,"source":"contracts\\Moderator.algo.ts:122","pc":[576]},{"teal":545,"source":"contracts\\Moderator.algo.ts:122","pc":[577]},{"teal":546,"source":"contracts\\Moderator.algo.ts:122","pc":[578,579]},{"teal":547,"source":"contracts\\Moderator.algo.ts:122","pc":[580]},{"teal":548,"source":"contracts\\Moderator.algo.ts:122","pc":[581]},{"teal":549,"source":"contracts\\Moderator.algo.ts:122","pc":[582]},{"teal":550,"source":"contracts\\Moderator.algo.ts:122","pc":[583,584]},{"teal":554,"source":"contracts\\Moderator.algo.ts:123","pc":[585,586]},{"teal":555,"source":"contracts\\Moderator.algo.ts:123","pc":[587,588]},{"teal":558,"source":"contracts\\Moderator.algo.ts:120","pc":[589]},{"teal":559,"source":"contracts\\Moderator.algo.ts:120","pc":[590,591]},{"teal":562,"source":"contracts\\Moderator.algo.ts:120","pc":[592]},{"teal":567,"source":"contracts\\Moderator.algo.ts:119","pc":[593,594]},{"teal":568,"source":"contracts\\Moderator.algo.ts:119","pc":[595]},{"teal":569,"source":"contracts\\Moderator.algo.ts:119","pc":[596]},{"teal":570,"source":"contracts\\Moderator.algo.ts:119","pc":[597,598]},{"teal":571,"source":"contracts\\Moderator.algo.ts:119","pc":[599,600,601]},{"teal":576,"source":"contracts\\Moderator.algo.ts:127","pc":[602,603,604]},{"teal":580,"source":"contracts\\Moderator.algo.ts:129","pc":[605]},{"teal":583,"source":"contracts\\Moderator.algo.ts:104","pc":[606,607]},{"teal":586,"source":"contracts\\Moderator.algo.ts:104","pc":[608,609]},{"teal":587,"source":"contracts\\Moderator.algo.ts:104","pc":[610]},{"teal":592,"source":"contracts\\Moderator.algo.ts:133","pc":[611,612]},{"teal":593,"source":"contracts\\Moderator.algo.ts:133","pc":[613]},{"teal":594,"source":"contracts\\Moderator.algo.ts:133","pc":[614]},{"teal":595,"source":"contracts\\Moderator.algo.ts:133","pc":[615]},{"teal":596,"source":"contracts\\Moderator.algo.ts:133","pc":[616,617]},{"teal":597,"source":"contracts\\Moderator.algo.ts:133","pc":[618]},{"teal":598,"source":"contracts\\Moderator.algo.ts:133","pc":[619]},{"teal":601,"source":"contracts\\Moderator.algo.ts:133","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[620]},{"teal":604,"source":"contracts\\Moderator.algo.ts:133","pc":[621,622,623]},{"teal":605,"source":"contracts\\Moderator.algo.ts:133","pc":[624]},{"teal":606,"source":"contracts\\Moderator.algo.ts:133","pc":[625]},{"teal":607,"source":"contracts\\Moderator.algo.ts:133","pc":[626]},{"teal":608,"source":"contracts\\Moderator.algo.ts:133","pc":[627]},{"teal":611,"source":"contracts\\Moderator.algo.ts:133","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[628]},{"teal":614,"source":"contracts\\Moderator.algo.ts:133","pc":[629,630,631]},{"teal":615,"source":"contracts\\Moderator.algo.ts:133","pc":[632]},{"teal":616,"source":"contracts\\Moderator.algo.ts:133","pc":[633]},{"teal":620,"source":"contracts\\Moderator.algo.ts:133","pc":[634,635,636]},{"teal":625,"source":"contracts\\Moderator.algo.ts:134","pc":[637,638]},{"teal":626,"source":"contracts\\Moderator.algo.ts:134","pc":[639,640,641]},{"teal":627,"source":"contracts\\Moderator.algo.ts:134","pc":[642,643]},{"teal":628,"source":"contracts\\Moderator.algo.ts:134","pc":[644]},{"teal":629,"source":"contracts\\Moderator.algo.ts:134","pc":[645]},{"teal":632,"source":"contracts\\Moderator.algo.ts:134","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[646]},{"teal":641,"source":"contracts\\Moderator.algo.ts:135","pc":[647,648]},{"teal":642,"source":"contracts\\Moderator.algo.ts:136","pc":[649,650]},{"teal":643,"source":"contracts\\Moderator.algo.ts:136","pc":[651,652]},{"teal":644,"source":"contracts\\Moderator.algo.ts:136","pc":[653]},{"teal":647,"source":"contracts\\Moderator.algo.ts:136","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[654]},{"teal":650,"source":"contracts\\Moderator.algo.ts:135","pc":[655,656]},{"teal":651,"source":"contracts\\Moderator.algo.ts:137","pc":[657,658]},{"teal":652,"source":"contracts\\Moderator.algo.ts:137","pc":[659,660]},{"teal":653,"source":"contracts\\Moderator.algo.ts:137","pc":[661]},{"teal":656,"source":"contracts\\Moderator.algo.ts:137","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[662]},{"teal":659,"source":"contracts\\Moderator.algo.ts:135","pc":[663,664]},{"teal":660,"source":"contracts\\Moderator.algo.ts:138","pc":[665,666]},{"teal":661,"source":"contracts\\Moderator.algo.ts:138","pc":[667,668]},{"teal":662,"source":"contracts\\Moderator.algo.ts:138","pc":[669]},{"teal":665,"source":"contracts\\Moderator.algo.ts:138","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[670]},{"teal":669,"source":"contracts\\Moderator.algo.ts:141","pc":[671]},{"teal":670,"source":"contracts\\Moderator.algo.ts:141","pc":[672]},{"teal":671,"source":"contracts\\Moderator.algo.ts:141","pc":[673]},{"teal":672,"source":"contracts\\Moderator.algo.ts:141","pc":[674]},{"teal":676,"source":"contracts\\Moderator.algo.ts:142","pc":[675]},{"teal":677,"source":"contracts\\Moderator.algo.ts:142","pc":[676,677]},{"teal":678,"source":"contracts\\Moderator.algo.ts:142","pc":[678]},{"teal":679,"source":"contracts\\Moderator.algo.ts:133","pc":[679]},{"teal":684,"source":"contracts\\Moderator.algo.ts:146","pc":[680]},{"teal":687,"source":"contracts\\Moderator.algo.ts:146","pc":[681,682,683]},{"teal":688,"source":"contracts\\Moderator.algo.ts:146","pc":[684]},{"teal":689,"source":"contracts\\Moderator.algo.ts:146","pc":[685]},{"teal":690,"source":"contracts\\Moderator.algo.ts:146","pc":[686]},{"teal":691,"source":"contracts\\Moderator.algo.ts:146","pc":[687]},{"teal":695,"source":"contracts\\Moderator.algo.ts:146","pc":[688,689,690]},{"teal":699,"source":"contracts\\Moderator.algo.ts:147","pc":[691]},{"teal":700,"source":"contracts\\Moderator.algo.ts:147","pc":[692]},{"teal":701,"source":"contracts\\Moderator.algo.ts:147","pc":[693]},{"teal":702,"source":"contracts\\Moderator.algo.ts:147","pc":[694]},{"teal":703,"source":"contracts\\Moderator.algo.ts:147","pc":[695]},{"teal":707,"source":"contracts\\Moderator.algo.ts:148","pc":[696]},{"teal":708,"source":"contracts\\Moderator.algo.ts:148","pc":[697]},{"teal":711,"source":"contracts\\Moderator.algo.ts:148","errorMessage":"box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value","pc":[698]},{"teal":712,"source":"contracts\\Moderator.algo.ts:146","pc":[699]},{"teal":717,"source":"contracts\\Moderator.algo.ts:152","pc":[700]},{"teal":720,"source":"contracts\\Moderator.algo.ts:152","pc":[701,702,703]},{"teal":721,"source":"contracts\\Moderator.algo.ts:152","pc":[704]},{"teal":722,"source":"contracts\\Moderator.algo.ts:152","pc":[705]},{"teal":723,"source":"contracts\\Moderator.algo.ts:152","pc":[706]},{"teal":724,"source":"contracts\\Moderator.algo.ts:152","pc":[707]},{"teal":727,"source":"contracts\\Moderator.algo.ts:152","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[708]},{"teal":730,"source":"contracts\\Moderator.algo.ts:152","pc":[709,710,711]},{"teal":731,"source":"contracts\\Moderator.algo.ts:152","pc":[712]},{"teal":732,"source":"contracts\\Moderator.algo.ts:152","pc":[713]},{"teal":733,"source":"contracts\\Moderator.algo.ts:152","pc":[714]},{"teal":734,"source":"contracts\\Moderator.algo.ts:152","pc":[715]},{"teal":735,"source":"contracts\\Moderator.algo.ts:152","pc":[716]},{"teal":739,"source":"contracts\\Moderator.algo.ts:152","pc":[717,718,719]},{"teal":742,"source":"contracts\\Moderator.algo.ts:152","pc":[720]},{"teal":743,"source":"contracts\\Moderator.algo.ts:152","pc":[721]},{"teal":747,"source":"contracts\\Moderator.algo.ts:153","pc":[722]},{"teal":748,"source":"contracts\\Moderator.algo.ts:153","pc":[723]},{"teal":749,"source":"contracts\\Moderator.algo.ts:153","pc":[724]},{"teal":750,"source":"contracts\\Moderator.algo.ts:153","pc":[725]},{"teal":751,"source":"contracts\\Moderator.algo.ts:153","pc":[726]},{"teal":759,"source":"contracts\\Moderator.algo.ts:154","pc":[727]},{"teal":760,"source":"contracts\\Moderator.algo.ts:154","pc":[728]},{"teal":761,"source":"contracts\\Moderator.algo.ts:154","pc":[729]},{"teal":762,"source":"contracts\\Moderator.algo.ts:154","pc":[730]},{"teal":763,"source":"contracts\\Moderator.algo.ts:157","pc":[731]},{"teal":764,"source":"contracts\\Moderator.algo.ts:154","pc":[732]},{"teal":765,"source":"contracts\\Moderator.algo.ts:154","pc":[733]},{"teal":766,"source":"contracts\\Moderator.algo.ts:154","pc":[734]},{"teal":767,"source":"contracts\\Moderator.algo.ts:154","pc":[735]},{"teal":768,"source":"contracts\\Moderator.algo.ts:158","pc":[736]},{"teal":769,"source":"contracts\\Moderator.algo.ts:157","pc":[737]},{"teal":770,"source":"contracts\\Moderator.algo.ts:154","pc":[738]},{"teal":771,"source":"contracts\\Moderator.algo.ts:154","pc":[739,740]},{"teal":772,"source":"contracts\\Moderator.algo.ts:154","pc":[741]},{"teal":773,"source":"contracts\\Moderator.algo.ts:154","pc":[742]},{"teal":774,"source":"contracts\\Moderator.algo.ts:159","pc":[743]},{"teal":775,"source":"contracts\\Moderator.algo.ts:158","pc":[744]},{"teal":776,"source":"contracts\\Moderator.algo.ts:154","pc":[745]},{"teal":777,"source":"contracts\\Moderator.algo.ts:154","pc":[746,747]},{"teal":778,"source":"contracts\\Moderator.algo.ts:154","pc":[748]},{"teal":779,"source":"contracts\\Moderator.algo.ts:154","pc":[749]},{"teal":780,"source":"contracts\\Moderator.algo.ts:160","pc":[750]},{"teal":781,"source":"contracts\\Moderator.algo.ts:159","pc":[751]},{"teal":782,"source":"contracts\\Moderator.algo.ts:156","pc":[752,753]},{"teal":790,"source":"contracts\\Moderator.algo.ts:163","pc":[754,755]},{"teal":791,"source":"contracts\\Moderator.algo.ts:163","pc":[756,757,758]},{"teal":792,"source":"contracts\\Moderator.algo.ts:163","pc":[759]},{"teal":793,"source":"contracts\\Moderator.algo.ts:164","pc":[760,761]},{"teal":794,"source":"contracts\\Moderator.algo.ts:164","pc":[762,763,764]},{"teal":795,"source":"contracts\\Moderator.algo.ts:164","pc":[765]},{"teal":796,"source":"contracts\\Moderator.algo.ts:163","pc":[766]},{"teal":797,"source":"contracts\\Moderator.algo.ts:165","pc":[767,768]},{"teal":798,"source":"contracts\\Moderator.algo.ts:165","pc":[769,770,771]},{"teal":799,"source":"contracts\\Moderator.algo.ts:165","pc":[772]},{"teal":800,"source":"contracts\\Moderator.algo.ts:164","pc":[773]},{"teal":801,"source":"contracts\\Moderator.algo.ts:166","pc":[774,775]},{"teal":802,"source":"contracts\\Moderator.algo.ts:166","pc":[776,777,778]},{"teal":803,"source":"contracts\\Moderator.algo.ts:166","pc":[779]},{"teal":804,"source":"contracts\\Moderator.algo.ts:165","pc":[780]},{"teal":805,"source":"contracts\\Moderator.algo.ts:162","pc":[781,782]},{"teal":810,"source":"contracts\\Moderator.algo.ts:168","pc":[783,784]},{"teal":811,"source":"contracts\\Moderator.algo.ts:168","pc":[785,786]},{"teal":812,"source":"contracts\\Moderator.algo.ts:168","pc":[787]},{"teal":813,"source":"contracts\\Moderator.algo.ts:168","pc":[788,789,790]},{"teal":818,"source":"contracts\\Moderator.algo.ts:169","pc":[791]},{"teal":819,"source":"contracts\\Moderator.algo.ts:169","pc":[792,793,794]},{"teal":824,"source":"contracts\\Moderator.algo.ts:172","pc":[795,796]},{"teal":825,"source":"contracts\\Moderator.algo.ts:172","pc":[797,798]},{"teal":826,"source":"contracts\\Moderator.algo.ts:172","pc":[799]},{"teal":830,"source":"contracts\\Moderator.algo.ts:152","pc":[800,801]},{"teal":833,"source":"contracts\\Moderator.algo.ts:152","pc":[802,803]},{"teal":834,"source":"contracts\\Moderator.algo.ts:152","pc":[804]},{"teal":839,"source":"contracts\\Moderator.algo.ts:176","pc":[805,806,807]},{"teal":840,"source":"contracts\\Moderator.algo.ts:176","pc":[808]},{"teal":841,"source":"contracts\\Moderator.algo.ts:176","pc":[809]},{"teal":842,"source":"contracts\\Moderator.algo.ts:176","pc":[810]},{"teal":843,"source":"contracts\\Moderator.algo.ts:176","pc":[811]},{"teal":846,"source":"contracts\\Moderator.algo.ts:176","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[812]},{"teal":849,"source":"contracts\\Moderator.algo.ts:176","pc":[813,814,815]},{"teal":850,"source":"contracts\\Moderator.algo.ts:176","pc":[816]},{"teal":851,"source":"contracts\\Moderator.algo.ts:176","pc":[817]},{"teal":855,"source":"contracts\\Moderator.algo.ts:176","pc":[818,819,820]},{"teal":860,"source":"contracts\\Moderator.algo.ts:177","pc":[821,822]},{"teal":861,"source":"contracts\\Moderator.algo.ts:177","pc":[823,824,825]},{"teal":862,"source":"contracts\\Moderator.algo.ts:177","pc":[826,827]},{"teal":863,"source":"contracts\\Moderator.algo.ts:177","pc":[828]},{"teal":864,"source":"contracts\\Moderator.algo.ts:177","pc":[829]},{"teal":867,"source":"contracts\\Moderator.algo.ts:177","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[830]},{"teal":871,"source":"contracts\\Moderator.algo.ts:178","pc":[831]},{"teal":872,"source":"contracts\\Moderator.algo.ts:178","pc":[832,833]},{"teal":873,"source":"contracts\\Moderator.algo.ts:178","pc":[834]},{"teal":874,"source":"contracts\\Moderator.algo.ts:176","pc":[835]},{"teal":879,"source":"contracts\\Moderator.algo.ts:182","pc":[836]},{"teal":882,"source":"contracts\\Moderator.algo.ts:182","pc":[837,838,839]},{"teal":883,"source":"contracts\\Moderator.algo.ts:182","pc":[840]},{"teal":884,"source":"contracts\\Moderator.algo.ts:182","pc":[841]},{"teal":885,"source":"contracts\\Moderator.algo.ts:182","pc":[842]},{"teal":886,"source":"contracts\\Moderator.algo.ts:182","pc":[843]},{"teal":889,"source":"contracts\\Moderator.algo.ts:182","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[844]},{"teal":892,"source":"contracts\\Moderator.algo.ts:182","pc":[845,846,847]},{"teal":893,"source":"contracts\\Moderator.algo.ts:182","pc":[848]},{"teal":894,"source":"contracts\\Moderator.algo.ts:182","pc":[849]},{"teal":895,"source":"contracts\\Moderator.algo.ts:182","pc":[850]},{"teal":896,"source":"contracts\\Moderator.algo.ts:182","pc":[851,852,853]},{"teal":897,"source":"contracts\\Moderator.algo.ts:182","pc":[854]},{"teal":898,"source":"contracts\\Moderator.algo.ts:182","pc":[855]},{"teal":899,"source":"contracts\\Moderator.algo.ts:182","pc":[856]},{"teal":900,"source":"contracts\\Moderator.algo.ts:182","pc":[857]},{"teal":901,"source":"contracts\\Moderator.algo.ts:182","pc":[858]},{"teal":902,"source":"contracts\\Moderator.algo.ts:182","pc":[859]},{"teal":906,"source":"contracts\\Moderator.algo.ts:182","pc":[860,861,862]},{"teal":914,"source":"contracts\\Moderator.algo.ts:185","pc":[863,864]},{"teal":915,"source":"contracts\\Moderator.algo.ts:185","pc":[865,866,867]},{"teal":916,"source":"contracts\\Moderator.algo.ts:185","pc":[868]},{"teal":917,"source":"contracts\\Moderator.algo.ts:183","pc":[869]},{"teal":918,"source":"contracts\\Moderator.algo.ts:183","pc":[870]},{"teal":919,"source":"contracts\\Moderator.algo.ts:183","pc":[871]},{"teal":920,"source":"contracts\\Moderator.algo.ts:183","pc":[872]},{"teal":921,"source":"contracts\\Moderator.algo.ts:185","pc":[873]},{"teal":922,"source":"contracts\\Moderator.algo.ts:185","pc":[874]},{"teal":923,"source":"contracts\\Moderator.algo.ts:185","pc":[875]},{"teal":924,"source":"contracts\\Moderator.algo.ts:185","pc":[876,877,878]},{"teal":925,"source":"contracts\\Moderator.algo.ts:186","pc":[879,880]},{"teal":926,"source":"contracts\\Moderator.algo.ts:186","pc":[881,882,883]},{"teal":927,"source":"contracts\\Moderator.algo.ts:186","pc":[884]},{"teal":928,"source":"contracts\\Moderator.algo.ts:183","pc":[885]},{"teal":929,"source":"contracts\\Moderator.algo.ts:183","pc":[886,887]},{"teal":930,"source":"contracts\\Moderator.algo.ts:183","pc":[888]},{"teal":931,"source":"contracts\\Moderator.algo.ts:183","pc":[889]},{"teal":932,"source":"contracts\\Moderator.algo.ts:186","pc":[890]},{"teal":933,"source":"contracts\\Moderator.algo.ts:186","pc":[891]},{"teal":934,"source":"contracts\\Moderator.algo.ts:185","pc":[892]},{"teal":937,"source":"contracts\\Moderator.algo.ts:186","pc":[893]},{"teal":938,"source":"contracts\\Moderator.algo.ts:186","pc":[894,895,896]},{"teal":939,"source":"contracts\\Moderator.algo.ts:187","pc":[897,898]},{"teal":940,"source":"contracts\\Moderator.algo.ts:187","pc":[899,900,901]},{"teal":941,"source":"contracts\\Moderator.algo.ts:187","pc":[902]},{"teal":942,"source":"contracts\\Moderator.algo.ts:183","pc":[903]},{"teal":943,"source":"contracts\\Moderator.algo.ts:183","pc":[904]},{"teal":944,"source":"contracts\\Moderator.algo.ts:183","pc":[905]},{"teal":945,"source":"contracts\\Moderator.algo.ts:183","pc":[906]},{"teal":946,"source":"contracts\\Moderator.algo.ts:187","pc":[907]},{"teal":947,"source":"contracts\\Moderator.algo.ts:187","pc":[908]},{"teal":948,"source":"contracts\\Moderator.algo.ts:186","pc":[909]},{"teal":951,"source":"contracts\\Moderator.algo.ts:187","pc":[910]},{"teal":952,"source":"contracts\\Moderator.algo.ts:187","pc":[911,912,913]},{"teal":953,"source":"contracts\\Moderator.algo.ts:188","pc":[914,915]},{"teal":954,"source":"contracts\\Moderator.algo.ts:188","pc":[916,917,918]},{"teal":955,"source":"contracts\\Moderator.algo.ts:188","pc":[919]},{"teal":956,"source":"contracts\\Moderator.algo.ts:183","pc":[920]},{"teal":957,"source":"contracts\\Moderator.algo.ts:183","pc":[921,922]},{"teal":958,"source":"contracts\\Moderator.algo.ts:183","pc":[923]},{"teal":959,"source":"contracts\\Moderator.algo.ts:183","pc":[924]},{"teal":960,"source":"contracts\\Moderator.algo.ts:188","pc":[925]},{"teal":961,"source":"contracts\\Moderator.algo.ts:188","pc":[926]},{"teal":962,"source":"contracts\\Moderator.algo.ts:187","pc":[927]},{"teal":965,"source":"contracts\\Moderator.algo.ts:184","pc":[928,929,930]},{"teal":970,"source":"contracts\\Moderator.algo.ts:190","pc":[931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981]},{"teal":971,"source":"contracts\\Moderator.algo.ts:190","pc":[982]},{"teal":976,"source":"contracts\\Moderator.algo.ts:192","pc":[983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015]},{"teal":977,"source":"contracts\\Moderator.algo.ts:182","pc":[1016]},{"teal":982,"source":"contracts\\Moderator.algo.ts:196","pc":[1017,1018,1019]},{"teal":985,"source":"contracts\\Moderator.algo.ts:196","pc":[1020,1021,1022]},{"teal":986,"source":"contracts\\Moderator.algo.ts:196","pc":[1023]},{"teal":987,"source":"contracts\\Moderator.algo.ts:196","pc":[1024]},{"teal":988,"source":"contracts\\Moderator.algo.ts:196","pc":[1025]},{"teal":989,"source":"contracts\\Moderator.algo.ts:196","pc":[1026]},{"teal":992,"source":"contracts\\Moderator.algo.ts:196","errorMessage":"argument 1 (Address) for storeModelParams must be a address","pc":[1027]},{"teal":995,"source":"contracts\\Moderator.algo.ts:196","pc":[1028,1029]},{"teal":996,"source":"contracts\\Moderator.algo.ts:196","pc":[1030]},{"teal":997,"source":"contracts\\Moderator.algo.ts:196","pc":[1031]},{"teal":998,"source":"contracts\\Moderator.algo.ts:196","pc":[1032]},{"teal":999,"source":"contracts\\Moderator.algo.ts:196","pc":[1033,1034]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:196","pc":[1035]},{"teal":1001,"source":"contracts\\Moderator.algo.ts:196","pc":[1036]},{"teal":1004,"source":"contracts\\Moderator.algo.ts:196","errorMessage":"argument 2 (mbrPay) for storeModelParams must be a pay transaction","pc":[1037]},{"teal":1007,"source":"contracts\\Moderator.algo.ts:196","pc":[1038,1039,1040]},{"teal":1008,"source":"contracts\\Moderator.algo.ts:196","pc":[1041]},{"teal":1009,"source":"contracts\\Moderator.algo.ts:196","pc":[1042]},{"teal":1013,"source":"contracts\\Moderator.algo.ts:196","pc":[1043,1044,1045]},{"teal":1018,"source":"contracts\\Moderator.algo.ts:197","pc":[1046,1047]},{"teal":1019,"source":"contracts\\Moderator.algo.ts:197","pc":[1048]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:197","pc":[1049]},{"teal":1021,"source":"contracts\\Moderator.algo.ts:197","pc":[1050]},{"teal":1022,"source":"contracts\\Moderator.algo.ts:197","pc":[1051,1052,1053]},{"teal":1028,"source":"contracts\\Moderator.algo.ts:198","pc":[1054,1055]},{"teal":1029,"source":"contracts\\Moderator.algo.ts:198","pc":[1056,1057]},{"teal":1030,"source":"contracts\\Moderator.algo.ts:198","pc":[1058]},{"teal":1033,"source":"contracts\\Moderator.algo.ts:198","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1059]},{"teal":1042,"source":"contracts\\Moderator.algo.ts:199","pc":[1060,1061]},{"teal":1043,"source":"contracts\\Moderator.algo.ts:200","pc":[1062,1063]},{"teal":1044,"source":"contracts\\Moderator.algo.ts:200","pc":[1064,1065]},{"teal":1045,"source":"contracts\\Moderator.algo.ts:200","pc":[1066]},{"teal":1048,"source":"contracts\\Moderator.algo.ts:200","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1067]},{"teal":1051,"source":"contracts\\Moderator.algo.ts:199","pc":[1068,1069]},{"teal":1052,"source":"contracts\\Moderator.algo.ts:201","pc":[1070,1071]},{"teal":1053,"source":"contracts\\Moderator.algo.ts:201","pc":[1072,1073]},{"teal":1054,"source":"contracts\\Moderator.algo.ts:201","pc":[1074]},{"teal":1057,"source":"contracts\\Moderator.algo.ts:201","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1075]},{"teal":1060,"source":"contracts\\Moderator.algo.ts:199","pc":[1076,1077]},{"teal":1061,"source":"contracts\\Moderator.algo.ts:202","pc":[1078,1079]},{"teal":1062,"source":"contracts\\Moderator.algo.ts:202","pc":[1080,1081]},{"teal":1063,"source":"contracts\\Moderator.algo.ts:202","pc":[1082]},{"teal":1066,"source":"contracts\\Moderator.algo.ts:202","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[1083]},{"teal":1070,"source":"contracts\\Moderator.algo.ts:205","pc":[1084,1085]},{"teal":1071,"source":"contracts\\Moderator.algo.ts:205","pc":[1086]},{"teal":1072,"source":"contracts\\Moderator.algo.ts:205","pc":[1087]},{"teal":1073,"source":"contracts\\Moderator.algo.ts:205","pc":[1088]},{"teal":1074,"source":"contracts\\Moderator.algo.ts:205","pc":[1089,1090]},{"teal":1075,"source":"contracts\\Moderator.algo.ts:205","pc":[1091]},{"teal":1076,"source":"contracts\\Moderator.algo.ts:197","pc":[1092,1093,1094]},{"teal":1082,"source":"contracts\\Moderator.algo.ts:207","pc":[1095,1096]},{"teal":1083,"source":"contracts\\Moderator.algo.ts:207","pc":[1097,1098]},{"teal":1084,"source":"contracts\\Moderator.algo.ts:207","pc":[1099]},{"teal":1087,"source":"contracts\\Moderator.algo.ts:207","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1100]},{"teal":1096,"source":"contracts\\Moderator.algo.ts:208","pc":[1101,1102]},{"teal":1097,"source":"contracts\\Moderator.algo.ts:209","pc":[1103,1104]},{"teal":1098,"source":"contracts\\Moderator.algo.ts:209","pc":[1105,1106]},{"teal":1099,"source":"contracts\\Moderator.algo.ts:209","pc":[1107]},{"teal":1102,"source":"contracts\\Moderator.algo.ts:209","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1108]},{"teal":1105,"source":"contracts\\Moderator.algo.ts:208","pc":[1109,1110]},{"teal":1106,"source":"contracts\\Moderator.algo.ts:210","pc":[1111,1112]},{"teal":1107,"source":"contracts\\Moderator.algo.ts:210","pc":[1113,1114]},{"teal":1108,"source":"contracts\\Moderator.algo.ts:210","pc":[1115]},{"teal":1111,"source":"contracts\\Moderator.algo.ts:210","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1116]},{"teal":1114,"source":"contracts\\Moderator.algo.ts:208","pc":[1117,1118]},{"teal":1115,"source":"contracts\\Moderator.algo.ts:211","pc":[1119,1120]},{"teal":1116,"source":"contracts\\Moderator.algo.ts:211","pc":[1121,1122]},{"teal":1117,"source":"contracts\\Moderator.algo.ts:211","pc":[1123]},{"teal":1120,"source":"contracts\\Moderator.algo.ts:211","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[1124]},{"teal":1124,"source":"contracts\\Moderator.algo.ts:214","pc":[1125,1126]},{"teal":1125,"source":"contracts\\Moderator.algo.ts:214","pc":[1127]},{"teal":1126,"source":"contracts\\Moderator.algo.ts:214","pc":[1128]},{"teal":1127,"source":"contracts\\Moderator.algo.ts:214","pc":[1129]},{"teal":1131,"source":"contracts\\Moderator.algo.ts:215","pc":[1130,1131]},{"teal":1132,"source":"contracts\\Moderator.algo.ts:215","pc":[1132]},{"teal":1133,"source":"contracts\\Moderator.algo.ts:215","pc":[1133]},{"teal":1134,"source":"contracts\\Moderator.algo.ts:215","pc":[1134]},{"teal":1135,"source":"contracts\\Moderator.algo.ts:215","pc":[1135,1136]},{"teal":1136,"source":"contracts\\Moderator.algo.ts:215","pc":[1137]},{"teal":1139,"source":"contracts\\Moderator.algo.ts:196","pc":[1138]},{"teal":1144,"source":"contracts\\Moderator.algo.ts:220","pc":[1139]},{"teal":1147,"source":"contracts\\Moderator.algo.ts:220","pc":[1140,1141,1142]},{"teal":1148,"source":"contracts\\Moderator.algo.ts:220","pc":[1143]},{"teal":1149,"source":"contracts\\Moderator.algo.ts:220","pc":[1144]},{"teal":1150,"source":"contracts\\Moderator.algo.ts:220","pc":[1145]},{"teal":1151,"source":"contracts\\Moderator.algo.ts:220","pc":[1146]},{"teal":1154,"source":"contracts\\Moderator.algo.ts:220","errorMessage":"argument 0 (Address) for getBoxValue must be a address","pc":[1147]},{"teal":1157,"source":"contracts\\Moderator.algo.ts:220","pc":[1148,1149,1150]},{"teal":1158,"source":"contracts\\Moderator.algo.ts:220","pc":[1151]},{"teal":1159,"source":"contracts\\Moderator.algo.ts:220","pc":[1152]},{"teal":1160,"source":"contracts\\Moderator.algo.ts:220","pc":[1153]},{"teal":1161,"source":"contracts\\Moderator.algo.ts:220","pc":[1154]},{"teal":1165,"source":"contracts\\Moderator.algo.ts:220","pc":[1155,1156,1157]},{"teal":1170,"source":"contracts\\Moderator.algo.ts:221","pc":[1158,1159]},{"teal":1171,"source":"contracts\\Moderator.algo.ts:221","pc":[1160,1161,1162]},{"teal":1172,"source":"contracts\\Moderator.algo.ts:221","pc":[1163,1164]},{"teal":1173,"source":"contracts\\Moderator.algo.ts:221","pc":[1165]},{"teal":1174,"source":"contracts\\Moderator.algo.ts:221","pc":[1166]},{"teal":1177,"source":"contracts\\Moderator.algo.ts:221","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[1167]},{"teal":1181,"source":"contracts\\Moderator.algo.ts:222","pc":[1168,1169]},{"teal":1182,"source":"contracts\\Moderator.algo.ts:222","pc":[1170]},{"teal":1183,"source":"contracts\\Moderator.algo.ts:222","pc":[1171]},{"teal":1184,"source":"contracts\\Moderator.algo.ts:222","pc":[1172]},{"teal":1185,"source":"contracts\\Moderator.algo.ts:222","pc":[1173]},{"teal":1189,"source":"contracts\\Moderator.algo.ts:223","pc":[1174,1175]},{"teal":1190,"source":"contracts\\Moderator.algo.ts:223","pc":[1176]},{"teal":1193,"source":"contracts\\Moderator.algo.ts:223","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[1177]},{"teal":1194,"source":"contracts\\Moderator.algo.ts:220","pc":[1178]},{"teal":1199,"source":"contracts\\Moderator.algo.ts:227","pc":[1179]},{"teal":1202,"source":"contracts\\Moderator.algo.ts:227","pc":[1180,1181,1182]},{"teal":1203,"source":"contracts\\Moderator.algo.ts:227","pc":[1183]},{"teal":1204,"source":"contracts\\Moderator.algo.ts:227","pc":[1184]},{"teal":1205,"source":"contracts\\Moderator.algo.ts:227","pc":[1185]},{"teal":1206,"source":"contracts\\Moderator.algo.ts:227","pc":[1186]},{"teal":1209,"source":"contracts\\Moderator.algo.ts:227","errorMessage":"argument 0 (contributor) for distributeRewards must be a (uint64)","pc":[1187]},{"teal":1212,"source":"contracts\\Moderator.algo.ts:227","pc":[1188,1189,1190]},{"teal":1213,"source":"contracts\\Moderator.algo.ts:227","pc":[1191]},{"teal":1214,"source":"contracts\\Moderator.algo.ts:227","pc":[1192]},{"teal":1215,"source":"contracts\\Moderator.algo.ts:227","pc":[1193]},{"teal":1216,"source":"contracts\\Moderator.algo.ts:227","pc":[1194]},{"teal":1217,"source":"contracts\\Moderator.algo.ts:227","pc":[1195]},{"teal":1218,"source":"contracts\\Moderator.algo.ts:227","pc":[1196,1197,1198]},{"teal":1219,"source":"contracts\\Moderator.algo.ts:227","pc":[1199]},{"teal":1220,"source":"contracts\\Moderator.algo.ts:227","pc":[1200]},{"teal":1221,"source":"contracts\\Moderator.algo.ts:227","pc":[1201]},{"teal":1222,"source":"contracts\\Moderator.algo.ts:227","pc":[1202]},{"teal":1223,"source":"contracts\\Moderator.algo.ts:227","pc":[1203]},{"teal":1224,"source":"contracts\\Moderator.algo.ts:227","pc":[1204]},{"teal":1228,"source":"contracts\\Moderator.algo.ts:227","pc":[1205,1206,1207]},{"teal":1231,"source":"contracts\\Moderator.algo.ts:227","pc":[1208]},{"teal":1232,"source":"contracts\\Moderator.algo.ts:227","pc":[1209,1210]},{"teal":1236,"source":"contracts\\Moderator.algo.ts:229","pc":[1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236]},{"teal":1237,"source":"contracts\\Moderator.algo.ts:229","pc":[1237,1238]},{"teal":1241,"source":"contracts\\Moderator.algo.ts:231","pc":[1239]},{"teal":1242,"source":"contracts\\Moderator.algo.ts:231","pc":[1240,1241]},{"teal":1246,"source":"contracts\\Moderator.algo.ts:228","pc":[1242]},{"teal":1247,"source":"contracts\\Moderator.algo.ts:228","pc":[1243]},{"teal":1248,"source":"contracts\\Moderator.algo.ts:228","pc":[1244]},{"teal":1249,"source":"contracts\\Moderator.algo.ts:228","pc":[1245]},{"teal":1250,"source":"contracts\\Moderator.algo.ts:233","pc":[1246]},{"teal":1251,"source":"contracts\\Moderator.algo.ts:228","pc":[1247]},{"teal":1252,"source":"contracts\\Moderator.algo.ts:228","pc":[1248]},{"teal":1253,"source":"contracts\\Moderator.algo.ts:228","pc":[1249]},{"teal":1254,"source":"contracts\\Moderator.algo.ts:228","pc":[1250]},{"teal":1255,"source":"contracts\\Moderator.algo.ts:233","pc":[1251]},{"teal":1256,"source":"contracts\\Moderator.algo.ts:233","pc":[1252]},{"teal":1257,"source":"contracts\\Moderator.algo.ts:228","pc":[1253]},{"teal":1258,"source":"contracts\\Moderator.algo.ts:228","pc":[1254,1255]},{"teal":1259,"source":"contracts\\Moderator.algo.ts:228","pc":[1256]},{"teal":1260,"source":"contracts\\Moderator.algo.ts:228","pc":[1257]},{"teal":1261,"source":"contracts\\Moderator.algo.ts:233","pc":[1258]},{"teal":1262,"source":"contracts\\Moderator.algo.ts:233","pc":[1259]},{"teal":1263,"source":"contracts\\Moderator.algo.ts:228","pc":[1260]},{"teal":1264,"source":"contracts\\Moderator.algo.ts:228","pc":[1261,1262]},{"teal":1265,"source":"contracts\\Moderator.algo.ts:228","pc":[1263]},{"teal":1266,"source":"contracts\\Moderator.algo.ts:228","pc":[1264]},{"teal":1267,"source":"contracts\\Moderator.algo.ts:233","pc":[1265]},{"teal":1268,"source":"contracts\\Moderator.algo.ts:233","pc":[1266]},{"teal":1269,"source":"contracts\\Moderator.algo.ts:233","pc":[1267,1268]},{"teal":1273,"source":"contracts\\Moderator.algo.ts:234","pc":[1269]},{"teal":1274,"source":"contracts\\Moderator.algo.ts:234","pc":[1270,1271]},{"teal":1278,"source":"contracts\\Moderator.algo.ts:235","pc":[1272]},{"teal":1279,"source":"contracts\\Moderator.algo.ts:235","pc":[1273,1274]},{"teal":1284,"source":"contracts\\Moderator.algo.ts:237","pc":[1275,1276]},{"teal":1285,"source":"contracts\\Moderator.algo.ts:237","pc":[1277,1278,1279]},{"teal":1286,"source":"contracts\\Moderator.algo.ts:237","pc":[1280]},{"teal":1287,"source":"contracts\\Moderator.algo.ts:237","pc":[1281,1282]},{"teal":1288,"source":"contracts\\Moderator.algo.ts:237","pc":[1283]},{"teal":1289,"source":"contracts\\Moderator.algo.ts:237","pc":[1284,1285,1286]},{"teal":1294,"source":"contracts\\Moderator.algo.ts:238","pc":[1287,1288]},{"teal":1295,"source":"contracts\\Moderator.algo.ts:238","pc":[1289,1290,1291]},{"teal":1296,"source":"contracts\\Moderator.algo.ts:238","pc":[1292]},{"teal":1297,"source":"contracts\\Moderator.algo.ts:238","pc":[1293,1294]},{"teal":1298,"source":"contracts\\Moderator.algo.ts:238","pc":[1295]},{"teal":1299,"source":"contracts\\Moderator.algo.ts:238","pc":[1296,1297]},{"teal":1304,"source":"contracts\\Moderator.algo.ts:241","pc":[1298,1299]},{"teal":1305,"source":"contracts\\Moderator.algo.ts:241","pc":[1300]},{"teal":1306,"source":"contracts\\Moderator.algo.ts:241","pc":[1301,1302]},{"teal":1307,"source":"contracts\\Moderator.algo.ts:241","pc":[1303,1304,1305]},{"teal":1308,"source":"contracts\\Moderator.algo.ts:241","pc":[1306]},{"teal":1309,"source":"contracts\\Moderator.algo.ts:241","pc":[1307,1308]},{"teal":1310,"source":"contracts\\Moderator.algo.ts:241","pc":[1309]},{"teal":1311,"source":"contracts\\Moderator.algo.ts:241","pc":[1310,1311]},{"teal":1316,"source":"contracts\\Moderator.algo.ts:242","pc":[1312]},{"teal":1317,"source":"contracts\\Moderator.algo.ts:242","pc":[1313,1314]},{"teal":1318,"source":"contracts\\Moderator.algo.ts:242","pc":[1315,1316]},{"teal":1319,"source":"contracts\\Moderator.algo.ts:242","pc":[1317]},{"teal":1320,"source":"contracts\\Moderator.algo.ts:242","pc":[1318,1319]},{"teal":1321,"source":"contracts\\Moderator.algo.ts:242","pc":[1320]},{"teal":1322,"source":"contracts\\Moderator.algo.ts:242","pc":[1321]},{"teal":1323,"source":"contracts\\Moderator.algo.ts:242","pc":[1322,1323]},{"teal":1324,"source":"contracts\\Moderator.algo.ts:242","pc":[1324]},{"teal":1325,"source":"contracts\\Moderator.algo.ts:242","pc":[1325]},{"teal":1326,"source":"contracts\\Moderator.algo.ts:242","pc":[1326]},{"teal":1327,"source":"contracts\\Moderator.algo.ts:242","pc":[1327]},{"teal":1328,"source":"contracts\\Moderator.algo.ts:242","pc":[1328]},{"teal":1331,"source":"contracts\\Moderator.algo.ts:242","errorMessage":"wideRatio failed","pc":[1329]},{"teal":1332,"source":"contracts\\Moderator.algo.ts:242","pc":[1330,1331]},{"teal":1336,"source":"contracts\\Moderator.algo.ts:244","pc":[1332,1333]},{"teal":1337,"source":"contracts\\Moderator.algo.ts:244","pc":[1334,1335]},{"teal":1338,"source":"contracts\\Moderator.algo.ts:244","pc":[1336]},{"teal":1339,"source":"contracts\\Moderator.algo.ts:244","pc":[1337,1338]},{"teal":1343,"source":"contracts\\Moderator.algo.ts:246","pc":[1339,1340]},{"teal":1344,"source":"contracts\\Moderator.algo.ts:246","pc":[1341,1342]},{"teal":1345,"source":"contracts\\Moderator.algo.ts:246","pc":[1343]},{"teal":1346,"source":"contracts\\Moderator.algo.ts:246","pc":[1344,1345]},{"teal":1349,"source":"contracts\\Moderator.algo.ts:241","pc":[1346,1347]},{"teal":1350,"source":"contracts\\Moderator.algo.ts:241","pc":[1348]},{"teal":1351,"source":"contracts\\Moderator.algo.ts:241","pc":[1349]},{"teal":1352,"source":"contracts\\Moderator.algo.ts:241","pc":[1350]},{"teal":1353,"source":"contracts\\Moderator.algo.ts:241","pc":[1351,1352]},{"teal":1354,"source":"contracts\\Moderator.algo.ts:241","pc":[1353]},{"teal":1355,"source":"contracts\\Moderator.algo.ts:241","pc":[1354,1355,1356]},{"teal":1356,"source":"contracts\\Moderator.algo.ts:241","pc":[1357,1358]},{"teal":1357,"source":"contracts\\Moderator.algo.ts:241","pc":[1359,1360]},{"teal":1358,"source":"contracts\\Moderator.algo.ts:241","pc":[1361,1362]},{"teal":1359,"source":"contracts\\Moderator.algo.ts:241","pc":[1363]},{"teal":1360,"source":"contracts\\Moderator.algo.ts:241","pc":[1364]},{"teal":1361,"source":"contracts\\Moderator.algo.ts:241","pc":[1365]},{"teal":1362,"source":"contracts\\Moderator.algo.ts:241","pc":[1366,1367]},{"teal":1363,"source":"contracts\\Moderator.algo.ts:241","pc":[1368,1369,1370]},{"teal":1368,"source":"contracts\\Moderator.algo.ts:249","pc":[1371,1372]},{"teal":1369,"source":"contracts\\Moderator.algo.ts:249","pc":[1373]},{"teal":1370,"source":"contracts\\Moderator.algo.ts:249","pc":[1374,1375]},{"teal":1371,"source":"contracts\\Moderator.algo.ts:249","pc":[1376,1377,1378]},{"teal":1372,"source":"contracts\\Moderator.algo.ts:249","pc":[1379]},{"teal":1373,"source":"contracts\\Moderator.algo.ts:249","pc":[1380,1381]},{"teal":1374,"source":"contracts\\Moderator.algo.ts:249","pc":[1382]},{"teal":1375,"source":"contracts\\Moderator.algo.ts:249","pc":[1383,1384]},{"teal":1380,"source":"contracts\\Moderator.algo.ts:250","pc":[1385]},{"teal":1381,"source":"contracts\\Moderator.algo.ts:250","pc":[1386,1387]},{"teal":1382,"source":"contracts\\Moderator.algo.ts:250","pc":[1388,1389]},{"teal":1383,"source":"contracts\\Moderator.algo.ts:250","pc":[1390]},{"teal":1384,"source":"contracts\\Moderator.algo.ts:250","pc":[1391,1392]},{"teal":1385,"source":"contracts\\Moderator.algo.ts:250","pc":[1393]},{"teal":1386,"source":"contracts\\Moderator.algo.ts:250","pc":[1394]},{"teal":1387,"source":"contracts\\Moderator.algo.ts:250","pc":[1395,1396]},{"teal":1388,"source":"contracts\\Moderator.algo.ts:250","pc":[1397]},{"teal":1389,"source":"contracts\\Moderator.algo.ts:250","pc":[1398]},{"teal":1390,"source":"contracts\\Moderator.algo.ts:250","pc":[1399]},{"teal":1391,"source":"contracts\\Moderator.algo.ts:250","pc":[1400]},{"teal":1392,"source":"contracts\\Moderator.algo.ts:250","pc":[1401]},{"teal":1395,"source":"contracts\\Moderator.algo.ts:250","errorMessage":"wideRatio failed","pc":[1402]},{"teal":1396,"source":"contracts\\Moderator.algo.ts:250","pc":[1403,1404]},{"teal":1400,"source":"contracts\\Moderator.algo.ts:252","pc":[1405,1406]},{"teal":1401,"source":"contracts\\Moderator.algo.ts:252","pc":[1407,1408]},{"teal":1402,"source":"contracts\\Moderator.algo.ts:252","pc":[1409]},{"teal":1403,"source":"contracts\\Moderator.algo.ts:252","pc":[1410,1411]},{"teal":1407,"source":"contracts\\Moderator.algo.ts:254","pc":[1412]},{"teal":1408,"source":"contracts\\Moderator.algo.ts:254","pc":[1413,1414]},{"teal":1409,"source":"contracts\\Moderator.algo.ts:254","pc":[1415,1416,1417,1418,1419]},{"teal":1410,"source":"contracts\\Moderator.algo.ts:254","pc":[1420]},{"teal":1411,"source":"contracts\\Moderator.algo.ts:254","pc":[1421]},{"teal":1412,"source":"contracts\\Moderator.algo.ts:254","pc":[1422,1423]},{"teal":1413,"source":"contracts\\Moderator.algo.ts:254","pc":[1424]},{"teal":1414,"source":"contracts\\Moderator.algo.ts:254","pc":[1425]},{"teal":1415,"source":"contracts\\Moderator.algo.ts:254","pc":[1426]},{"teal":1416,"source":"contracts\\Moderator.algo.ts:254","pc":[1427]},{"teal":1417,"source":"contracts\\Moderator.algo.ts:254","pc":[1428]},{"teal":1420,"source":"contracts\\Moderator.algo.ts:254","errorMessage":"wideRatio failed","pc":[1429]},{"teal":1421,"source":"contracts\\Moderator.algo.ts:254","pc":[1430,1431]},{"teal":1425,"source":"contracts\\Moderator.algo.ts:256","pc":[1432,1433]},{"teal":1426,"source":"contracts\\Moderator.algo.ts:256","pc":[1434,1435]},{"teal":1427,"source":"contracts\\Moderator.algo.ts:256","pc":[1436]},{"teal":1428,"source":"contracts\\Moderator.algo.ts:256","pc":[1437]},{"teal":1429,"source":"contracts\\Moderator.algo.ts:256","pc":[1438,1439]},{"teal":1432,"source":"contracts\\Moderator.algo.ts:249","pc":[1440,1441]},{"teal":1433,"source":"contracts\\Moderator.algo.ts:249","pc":[1442]},{"teal":1434,"source":"contracts\\Moderator.algo.ts:249","pc":[1443]},{"teal":1435,"source":"contracts\\Moderator.algo.ts:249","pc":[1444]},{"teal":1436,"source":"contracts\\Moderator.algo.ts:249","pc":[1445,1446]},{"teal":1437,"source":"contracts\\Moderator.algo.ts:249","pc":[1447]},{"teal":1438,"source":"contracts\\Moderator.algo.ts:249","pc":[1448,1449,1450]},{"teal":1439,"source":"contracts\\Moderator.algo.ts:249","pc":[1451,1452]},{"teal":1440,"source":"contracts\\Moderator.algo.ts:249","pc":[1453,1454]},{"teal":1441,"source":"contracts\\Moderator.algo.ts:249","pc":[1455,1456]},{"teal":1442,"source":"contracts\\Moderator.algo.ts:249","pc":[1457]},{"teal":1443,"source":"contracts\\Moderator.algo.ts:249","pc":[1458]},{"teal":1444,"source":"contracts\\Moderator.algo.ts:249","pc":[1459]},{"teal":1445,"source":"contracts\\Moderator.algo.ts:249","pc":[1460,1461]},{"teal":1446,"source":"contracts\\Moderator.algo.ts:249","pc":[1462,1463,1464]},{"teal":1451,"source":"contracts\\Moderator.algo.ts:259","pc":[1465,1466]},{"teal":1454,"source":"contracts\\Moderator.algo.ts:227","pc":[1467,1468]},{"teal":1457,"source":"contracts\\Moderator.algo.ts:227","pc":[1469,1470]},{"teal":1458,"source":"contracts\\Moderator.algo.ts:227","pc":[1471]},{"teal":1463,"source":"contracts\\Moderator.algo.ts:263","pc":[1472,1473,1474]},{"teal":1464,"source":"contracts\\Moderator.algo.ts:263","pc":[1475]},{"teal":1465,"source":"contracts\\Moderator.algo.ts:263","pc":[1476]},{"teal":1469,"source":"contracts\\Moderator.algo.ts:263","pc":[1477,1478,1479]},{"teal":1473,"source":"contracts\\Moderator.algo.ts:264","pc":[1480,1481]},{"teal":1474,"source":"contracts\\Moderator.algo.ts:264","pc":[1482,1483,1484]},{"teal":1475,"source":"contracts\\Moderator.algo.ts:264","pc":[1485,1486]},{"teal":1476,"source":"contracts\\Moderator.algo.ts:264","pc":[1487]},{"teal":1477,"source":"contracts\\Moderator.algo.ts:264","pc":[1488]},{"teal":1478,"source":"contracts\\Moderator.algo.ts:264","pc":[1489]},{"teal":1484,"source":"contracts\\Moderator.algo.ts:266","pc":[1490]},{"teal":1485,"source":"contracts\\Moderator.algo.ts:266","pc":[1491]},{"teal":1486,"source":"contracts\\Moderator.algo.ts:266","pc":[1492,1493]},{"teal":1490,"source":"contracts\\Moderator.algo.ts:267","pc":[1494,1495]},{"teal":1491,"source":"contracts\\Moderator.algo.ts:267","pc":[1496,1497]},{"teal":1494,"source":"contracts\\Moderator.algo.ts:266","pc":[1498]},{"teal":1495,"source":"contracts\\Moderator.algo.ts:266","pc":[1499,1500]},{"teal":1498,"source":"contracts\\Moderator.algo.ts:266","pc":[1501]},{"teal":1499,"source":"contracts\\Moderator.algo.ts:263","pc":[1502]},{"teal":1502,"source":"contracts\\Moderator.algo.ts:35","pc":[1503,1504,1505,1506,1507,1508]},{"teal":1503,"source":"contracts\\Moderator.algo.ts:35","pc":[1509,1510,1511]},{"teal":1504,"source":"contracts\\Moderator.algo.ts:35","pc":[1512,1513,1514,1515]},{"teal":1507,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1516]},{"teal":1510,"source":"contracts\\Moderator.algo.ts:35","pc":[1517,1518,1519,1520,1521,1522]},{"teal":1511,"source":"contracts\\Moderator.algo.ts:35","pc":[1523,1524,1525,1526,1527,1528]},{"teal":1512,"source":"contracts\\Moderator.algo.ts:35","pc":[1529,1530,1531,1532,1533,1534]},{"teal":1513,"source":"contracts\\Moderator.algo.ts:35","pc":[1535,1536,1537,1538,1539,1540]},{"teal":1514,"source":"contracts\\Moderator.algo.ts:35","pc":[1541,1542,1543,1544,1545,1546]},{"teal":1515,"source":"contracts\\Moderator.algo.ts:35","pc":[1547,1548,1549,1550,1551,1552]},{"teal":1516,"source":"contracts\\Moderator.algo.ts:35","pc":[1553,1554,1555,1556,1557,1558]},{"teal":1517,"source":"contracts\\Moderator.algo.ts:35","pc":[1559,1560,1561,1562,1563,1564]},{"teal":1518,"source":"contracts\\Moderator.algo.ts:35","pc":[1565,1566,1567,1568,1569,1570]},{"teal":1519,"source":"contracts\\Moderator.algo.ts:35","pc":[1571,1572,1573,1574,1575,1576]},{"teal":1520,"source":"contracts\\Moderator.algo.ts:35","pc":[1577,1578,1579,1580,1581,1582]},{"teal":1521,"source":"contracts\\Moderator.algo.ts:35","pc":[1583,1584,1585,1586,1587,1588]},{"teal":1522,"source":"contracts\\Moderator.algo.ts:35","pc":[1589,1590,1591,1592,1593,1594]},{"teal":1523,"source":"contracts\\Moderator.algo.ts:35","pc":[1595,1596,1597]},{"teal":1524,"source":"contracts\\Moderator.algo.ts:35","pc":[1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625]},{"teal":1527,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1626]},{"teal":1530,"source":"contracts\\Moderator.algo.ts:35","pc":[1627,1628,1629,1630,1631,1632]},{"teal":1531,"source":"contracts\\Moderator.algo.ts:35","pc":[1633,1634,1635]},{"teal":1532,"source":"contracts\\Moderator.algo.ts:35","pc":[1636,1637,1638,1639]},{"teal":1535,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1640]},{"teal":1538,"source":"contracts\\Moderator.algo.ts:35","pc":[1641,1642,1643,1644,1645,1646]},{"teal":1539,"source":"contracts\\Moderator.algo.ts:35","pc":[1647,1648,1649]},{"teal":1540,"source":"contracts\\Moderator.algo.ts:35","pc":[1650,1651,1652,1653]},{"teal":1543,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1654]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAQgAIBjAhD0Q6AeQTiYHABUAE0luaXRpYWxNb2RlbE1ldHJpY3MEFR98dQoACHJlZ01vZGVsC3N0YWtlQW1vdW50CGlwZnNIYXNoBnJld2FyZDEYFIEGCzEZCI0MBXUAAAAAAAAF4wXxBWcAAAAAAAAAAAAAADYaAVcCAIgAAiJDigEAJwWL/0kVFlcGAkxQZ4k2GgFXAgCIAAIiQ4oBADEANjIAcgdIEkQnBYv/SRUWVwYCTFBniSoxFiIJSTgQIhJENhoBF4gABRZQsCJDigIBi/44ADEAEkSL/jgHMgoSRIv+OAiL/xJEgApyZXdhcmRQb29si/9nJwQki/8kgQIfSEhMFERnIokqMRYiCUk4ECISRIgABRZQsCJDigEBi/84ADEAEkSL/zgHMgoSRIv/OAgnBGQSRCKJKogABRZQsCJDigABMgpzAEiJKjYaAhc2GgFJFSUSRIgADEkVFlcGAkxQULAiQ4oCAbEishCL/rIIi/+yBycGsgUksgGzgAdzdWNjZXNziSo2GgJXAgA2GgFXAgCIAAUWULAiQ4oCAShHBDEANjIAcgdIEkSL/xUlCov+FSMKEkQkjAAkjAGLAYv+FSMKDEEAHosAi/41/ySLASMLCDT/TCNYFwiMAIsBIgiMAUL/14v/FSUKJwRkHSQiH0hITBREjAKLAIsCCIwDMgpzAEiLAw9EJIwEiwSL/xUlCgxBADyxIrIQi/41/ySLBCMLCDT/TCNYFycEZAiyCIv/Nf8kiwQlCwg0/0wlWLIHJwayBSSyAbOLBCIIjARC/7mIA2gijABGBIkxFiIJSTgQIhJENhoBSRUlEkSIAAIiQ4oCADEANjIAcgdIEkSL/jgAMQASRIv+OAcyChJEi/44CCEFEkQpJblIKYv/v4kqiAAEULAiQ4oAASm9TEhEKb5EiSo2GgFJFSUSRIgABRZQsCJDigEBKEkpvUxIRCkkI7oXKSMjuhcIKSEGI7oXCCkhBCO6FwiMAIv/VwAIF4v/VwgIFwiL/1cQCBcIi/9XGAgXCIwBiwGLAA5BAAQkQgAFiwGLAAmMAEYBiTYaAUkVJRJEiAACIkOKAQAxADYyAHIHSBJEK4v/v4kqNhoBSRUlEkSIAAxJFRZXBgJMUFCwIkOKAQGL/1cACBcrJCO6Fw5JQQAOi/9XEAgXKyEGI7oXDhBJQQANi/9XCAgXKyMjuhcOEElBAA6L/1cYCBcrIQQjuhcPEEEANIAxTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbomAH2ZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHOJNhoCNhoBSRUlEkQxFiIJSTgQIhJEiAACIkOKAwCL/r1MSEEAKTEAMQASRIv/OAAxABJEi/84BzIKEkSL/zgIIQUSRIv+SbxIi/2/QgArMQAxABJEi/84ADEAEkSL/zgHMgoSRIv/OAghBRJEi/4luUiL/km8SIv9v4kqNhoBSRUlEkSIAARQsCJDigEBMQA2MgByB0gSRIv/vUxIRIv/vkSJKjYaAUkVIxJEiAAOSRUjChZXBgJMUFCwIkOKAQEoRw+AGAAAAAAAAAAyAAAAAAAAADIAAAAAAAAAMowAJIwBKSQjuhcpIyO6FwgpIQYjuhcIKSEEI7oXCIwCJIwDKIwEi/9XAAgXiwINQQALi/9XAAgXiwIJjAOLAEmMBVcACBeMBiSMBySLBosGCyEHCyQhCB9ISEwURIwIiwiLAwuMCYsBiwkIjAGLByMISSEEDEEADowHiwWLByNYF4wGQv/FiwBJjApXAAgXjAskjAwkiwuLCwshBwskIQgfSEhMFESMDYsNiwMLjA4kiw6BgK3iBAskiwEfSEhMFESMD4sEiw8WUIwEiwwjCEkhBAxBAA6MDIsKiwwjWBeMC0L/sIsEjABGD4mIAAIiQ4oAADEANjIAcgdIEkSxIrIQMQCyCSSyAbOJgAQRV1bbNhoAjgH6jQCABGboFYyABA/TaDaABChr5jaABBGneauABINF3IOABLeJGPWABG3c39yABENqApWABH3i382ABL+K3t+ABFTSUL+ABHBcsxCABNGIU2E2GgCODfph+rP65Pr2+zP8CfxO/GL8y/zq/Z/+Gf5BAIAEF0dAWzYaAI4B+i0AgAQkh8MsNhoAjgH/SgA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ParamsData = {
  paramHash: string,
  paramKey: string,
  score: bigint,
  reputation: bigint
}


/**
 * Converts the ABI tuple representation of a ParamsData to the struct representation
 */
export function ParamsDataFromTuple(abiTuple: [string, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ParamsData, APP_SPEC.structs) as ParamsData
}

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

export type RewardCalculation = {
  score: bigint
}


/**
 * Converts the ABI tuple representation of a rewardCalculation to the struct representation
 */
export function RewardCalculationFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.rewardCalculation, APP_SPEC.structs) as RewardCalculation
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'assignRewardPool(uint64,pay)uint64': {
      rewardPoolAmount: bigint | number
      rewardPoolTxn: AppMethodCallTransactionArgument
    }
    'commitToListing(pay)uint64': {
      stakeAmountTxn: AppMethodCallTransactionArgument
    }
    'checkBalance()uint64': Record<string, never>
    'payoutRewards(address,uint64)string': {
      address: string
      reward: bigint | number
    }
    'bulkPayoutRewards(address[],uint64[])uint64': {
      addresses: string[]
      rewards: bigint[] | number[]
    }
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Record<string, never>
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': {
      modelEvaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': {
      mbrPay: AppMethodCallTransactionArgument
      address: string
      paramsData: ParamsData
    }
    'getBoxValue(address)(string,string,uint64,uint64)': {
      address: string
    }
    'distributeRewards((uint64))uint64[]': {
      contributor: RewardCalculation
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'assignRewardPool(uint64,pay)uint64': [rewardPoolAmount: bigint | number, rewardPoolTxn: AppMethodCallTransactionArgument]
    'commitToListing(pay)uint64': [stakeAmountTxn: AppMethodCallTransactionArgument]
    'checkBalance()uint64': []
    'payoutRewards(address,uint64)string': [address: string, reward: bigint | number]
    'bulkPayoutRewards(address[],uint64[])uint64': [addresses: string[], rewards: bigint[] | number[]]
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': []
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': [modelEvaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': [mbrPay: AppMethodCallTransactionArgument, address: string, paramsData: ParamsData]
    'getBoxValue(address)(string,string,uint64,uint64)': [address: string]
    'distributeRewards((uint64))uint64[]': [contributor: RewardCalculation]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'assignRewardPool(uint64,pay)uint64': bigint
  'commitToListing(pay)uint64': bigint
  'checkBalance()uint64': bigint
  'payoutRewards(address,uint64)string': string
  'bulkPayoutRewards(address[],uint64[])uint64': bigint
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Classification
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': bigint
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'storeModelParams(pay,address,(string,string,uint64,uint64))void': void
  'getBoxValue(address)(string,string,uint64,uint64)': ParamsData
  'distributeRewards((uint64))uint64[]': bigint[]
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'assignRewardPool(uint64,pay)uint64' | 'assignRewardPool', {
      argsObj: DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64']
      argsTuple: DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']
      returns: DmlChainReturns['assignRewardPool(uint64,pay)uint64']
    }>
    & Record<'commitToListing(pay)uint64' | 'commitToListing', {
      argsObj: DmlChainArgs['obj']['commitToListing(pay)uint64']
      argsTuple: DmlChainArgs['tuple']['commitToListing(pay)uint64']
      returns: DmlChainReturns['commitToListing(pay)uint64']
    }>
    & Record<'checkBalance()uint64' | 'checkBalance', {
      argsObj: DmlChainArgs['obj']['checkBalance()uint64']
      argsTuple: DmlChainArgs['tuple']['checkBalance()uint64']
      returns: DmlChainReturns['checkBalance()uint64']
    }>
    & Record<'payoutRewards(address,uint64)string' | 'payoutRewards', {
      argsObj: DmlChainArgs['obj']['payoutRewards(address,uint64)string']
      argsTuple: DmlChainArgs['tuple']['payoutRewards(address,uint64)string']
      returns: DmlChainReturns['payoutRewards(address,uint64)string']
    }>
    & Record<'bulkPayoutRewards(address[],uint64[])uint64' | 'bulkPayoutRewards', {
      argsObj: DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64']
      argsTuple: DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']
      returns: DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'getClassificationCriteria()(uint64,uint64,uint64,uint64)' | 'getClassificationCriteria', {
      argsObj: DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      returns: DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'storeModelParams(pay,address,(string,string,uint64,uint64))void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      returns: DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void']
    }>
    & Record<'getBoxValue(address)(string,string,uint64,uint64)' | 'getBoxValue', {
      argsObj: DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']
      returns: DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)']
    }>
    & Record<'distributeRewards((uint64))uint64[]' | 'distributeRewards', {
      argsObj: DmlChainArgs['obj']['distributeRewards((uint64))uint64[]']
      argsTuple: DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']
      returns: DmlChainReturns['distributeRewards((uint64))uint64[]']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
        rewardPool: bigint
        stakeAmount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        paramsData: Map<string, ParamsData>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the assignRewardPool(uint64,pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignRewardPool(uint64,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardPoolAmount, params.args.rewardPoolTxn],
    }
  }
  /**
   * Constructs a no op call for the commitToListing(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static commitToListing(params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'commitToListing(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeAmountTxn],
    }
  }
  /**
   * Constructs a no op call for the checkBalance()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkBalance()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the payoutRewards(address,uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutRewards(params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payoutRewards(address,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address, params.args.reward],
    }
  }
  /**
   * Constructs a no op call for the bulkPayoutRewards(address[],uint64[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bulkPayoutRewards(params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bulkPayoutRewards(address[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses, params.args.rewards],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClassificationCriteria()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(pay,address,(string,string,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.address, params.args.paramsData],
    }
  }
  /**
   * Constructs a no op call for the getBoxValue(address)(string,string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxValue(address)(string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the distributeRewards((uint64))uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRewards(params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeRewards((uint64))uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    commitToListing: (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.commitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `payoutRewards(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutRewards: (params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.payoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.bulkPayoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRewards: (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    commitToListing: (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.commitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `payoutRewards(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutRewards: (params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.payoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.bulkPayoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRewards: (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignRewardPool: async (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.assignRewardPool(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['assignRewardPool(uint64,pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    commitToListing: async (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.commitToListing(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['commitToListing(pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkBalance: async (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.checkBalance(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['checkBalance()uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `payoutRewards(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutRewards: async (params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.payoutRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['payoutRewards(address,uint64)string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bulkPayoutRewards: async (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.bulkPayoutRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClassificationCriteria: async (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getClassificationCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxValue: async (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getBoxValue(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRewards: async (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.distributeRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['distributeRewards((uint64))uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
          rewardPool: result.rewardPool,
          stakeAmount: result.stakeAmount,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
      /**
       * Get the current value of the rewardPool key in global state
       */
      rewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPool")) as bigint | undefined },
      /**
       * Get the current value of the stakeAmount key in global state
       */
      stakeAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakeAmount")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the paramsData map in box state
       */
      paramsData: {
        /**
         * Get all current values of the paramsData map in box state
         */
        getMap: async (): Promise<Map<string, ParamsData>> => { return (await this.appClient.state.box.getMap("paramsData")) as Map<string, ParamsData> },
        /**
         * Get a current value of the paramsData map by key from box state
         */
        value: async (key: string): Promise<ParamsData | undefined> => { return await this.appClient.state.box.getMapValue("paramsData", key) as ParamsData | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a assignRewardPool(uint64,pay)uint64 method call against the DMLChain contract
       */
      assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignRewardPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('assignRewardPool(uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a commitToListing(pay)uint64 method call against the DMLChain contract
       */
      commitToListing(params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.commitToListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('commitToListing(pay)uint64', v))
        return this
      },
      /**
       * Add a checkBalance()uint64 method call against the DMLChain contract
       */
      checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkBalance()uint64', v))
        return this
      },
      /**
       * Add a payoutRewards(address,uint64)string method call against the DMLChain contract
       */
      payoutRewards(params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('payoutRewards(address,uint64)string', v))
        return this
      },
      /**
       * Add a bulkPayoutRewards(address[],uint64[])uint64 method call against the DMLChain contract
       */
      bulkPayoutRewards(params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bulkPayoutRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('bulkPayoutRewards(address[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClassificationCriteria()(uint64,uint64,uint64,uint64) method call against the DMLChain contract
       */
      getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClassificationCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClassificationCriteria()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64', v))
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a storeModelParams(pay,address,(string,string,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxValue(address)(string,string,uint64,uint64) method call against the DMLChain contract
       */
      getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxValue(address)(string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a distributeRewards((uint64))uint64[] method call against the DMLChain contract
       */
      distributeRewards(params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('distributeRewards((uint64))uint64[]', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assignRewardPool(uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignRewardPool(params?: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['assignRewardPool(uint64,pay)uint64'] | undefined]>

  /**
   * Calls the commitToListing(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  commitToListing(params?: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['commitToListing(pay)uint64'] | undefined]>

  /**
   * Calls the checkBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkBalance(params?: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['checkBalance()uint64'] | undefined]>

  /**
   * Calls the payoutRewards(address,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutRewards(params?: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']>): DmlChainComposer<[...TReturns, DmlChainReturns['payoutRewards(address,uint64)string'] | undefined]>

  /**
   * Calls the bulkPayoutRewards(address[],uint64[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bulkPayoutRewards(params?: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClassificationCriteria(params?: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | undefined]>

  /**
   * Calls the getBoxValue(address)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxValue(params?: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the distributeRewards((uint64))uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRewards(params?: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']>): DmlChainComposer<[...TReturns, DmlChainReturns['distributeRewards((uint64))uint64[]'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

