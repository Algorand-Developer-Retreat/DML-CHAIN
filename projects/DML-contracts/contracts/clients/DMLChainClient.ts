/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"printHash","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateCost","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getClassificationCriteria","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"mbrPay","type":"pay"},{"name":"Address","type":"address"},{"name":"paramsData","type":"(string,string)","struct":"ParamsData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"ParamsData":[{"name":"paramHash","type":"string"},{"name":"paramKey","type":"string"}],"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"paramsData":{"keyType":"address","valueType":"ParamsData"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:29","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:29","pc":[1,2,3,4,5,6,7,8,9,10,11]},{"teal":3,"source":"contracts\\Moderator.algo.ts:29","pc":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]},{"teal":15,"source":"contracts\\Moderator.algo.ts:29","pc":[61,62]},{"teal":16,"source":"contracts\\Moderator.algo.ts:29","pc":[63]},{"teal":17,"source":"contracts\\Moderator.algo.ts:29","pc":[64,65]},{"teal":18,"source":"contracts\\Moderator.algo.ts:29","pc":[66]},{"teal":19,"source":"contracts\\Moderator.algo.ts:29","pc":[67,68]},{"teal":20,"source":"contracts\\Moderator.algo.ts:29","pc":[69]},{"teal":21,"source":"contracts\\Moderator.algo.ts:29","pc":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]},{"teal":25,"source":"contracts\\Moderator.algo.ts:29","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[96]},{"teal":30,"source":"contracts\\Moderator.algo.ts:42","pc":[97,98,99]},{"teal":31,"source":"contracts\\Moderator.algo.ts:42","pc":[100,101,102]},{"teal":34,"source":"contracts\\Moderator.algo.ts:42","pc":[103,104,105]},{"teal":35,"source":"contracts\\Moderator.algo.ts:42","pc":[106]},{"teal":36,"source":"contracts\\Moderator.algo.ts:42","pc":[107]},{"teal":40,"source":"contracts\\Moderator.algo.ts:42","pc":[108,109,110]},{"teal":44,"source":"contracts\\Moderator.algo.ts:43","pc":[111]},{"teal":45,"source":"contracts\\Moderator.algo.ts:43","pc":[112,113]},{"teal":46,"source":"contracts\\Moderator.algo.ts:43","pc":[114]},{"teal":47,"source":"contracts\\Moderator.algo.ts:43","pc":[115]},{"teal":48,"source":"contracts\\Moderator.algo.ts:43","pc":[116]},{"teal":49,"source":"contracts\\Moderator.algo.ts:43","pc":[117,118,119]},{"teal":50,"source":"contracts\\Moderator.algo.ts:43","pc":[120]},{"teal":51,"source":"contracts\\Moderator.algo.ts:43","pc":[121]},{"teal":52,"source":"contracts\\Moderator.algo.ts:43","pc":[122]},{"teal":53,"source":"contracts\\Moderator.algo.ts:42","pc":[123]},{"teal":58,"source":"contracts\\Moderator.algo.ts:47","pc":[124,125,126]},{"teal":59,"source":"contracts\\Moderator.algo.ts:47","pc":[127,128,129]},{"teal":62,"source":"contracts\\Moderator.algo.ts:47","pc":[130,131,132]},{"teal":63,"source":"contracts\\Moderator.algo.ts:47","pc":[133]},{"teal":64,"source":"contracts\\Moderator.algo.ts:47","pc":[134]},{"teal":68,"source":"contracts\\Moderator.algo.ts:47","pc":[135,136,137]},{"teal":72,"source":"contracts\\Moderator.algo.ts:48","pc":[138,139]},{"teal":73,"source":"contracts\\Moderator.algo.ts:48","pc":[140,141,142]},{"teal":74,"source":"contracts\\Moderator.algo.ts:48","pc":[143,144]},{"teal":75,"source":"contracts\\Moderator.algo.ts:48","pc":[145]},{"teal":76,"source":"contracts\\Moderator.algo.ts:48","pc":[146]},{"teal":77,"source":"contracts\\Moderator.algo.ts:48","pc":[147]},{"teal":81,"source":"contracts\\Moderator.algo.ts:49","pc":[148]},{"teal":82,"source":"contracts\\Moderator.algo.ts:49","pc":[149,150]},{"teal":83,"source":"contracts\\Moderator.algo.ts:49","pc":[151]},{"teal":84,"source":"contracts\\Moderator.algo.ts:49","pc":[152]},{"teal":85,"source":"contracts\\Moderator.algo.ts:49","pc":[153]},{"teal":86,"source":"contracts\\Moderator.algo.ts:49","pc":[154,155,156]},{"teal":87,"source":"contracts\\Moderator.algo.ts:49","pc":[157]},{"teal":88,"source":"contracts\\Moderator.algo.ts:49","pc":[158]},{"teal":89,"source":"contracts\\Moderator.algo.ts:49","pc":[159]},{"teal":90,"source":"contracts\\Moderator.algo.ts:47","pc":[160]},{"teal":95,"source":"contracts\\Moderator.algo.ts:53","pc":[161]},{"teal":98,"source":"contracts\\Moderator.algo.ts:53","pc":[162,163,164]},{"teal":99,"source":"contracts\\Moderator.algo.ts:53","pc":[165]},{"teal":100,"source":"contracts\\Moderator.algo.ts:53","pc":[166]},{"teal":101,"source":"contracts\\Moderator.algo.ts:53","pc":[167]},{"teal":102,"source":"contracts\\Moderator.algo.ts:53","pc":[168,169,170]},{"teal":103,"source":"contracts\\Moderator.algo.ts:53","pc":[171]},{"teal":104,"source":"contracts\\Moderator.algo.ts:53","pc":[172]},{"teal":105,"source":"contracts\\Moderator.algo.ts:53","pc":[173]},{"teal":106,"source":"contracts\\Moderator.algo.ts:53","pc":[174]},{"teal":107,"source":"contracts\\Moderator.algo.ts:53","pc":[175]},{"teal":108,"source":"contracts\\Moderator.algo.ts:53","pc":[176]},{"teal":112,"source":"contracts\\Moderator.algo.ts:53","pc":[177,178,179]},{"teal":116,"source":"contracts\\Moderator.algo.ts:54","pc":[180]},{"teal":117,"source":"contracts\\Moderator.algo.ts:54","pc":[181]},{"teal":118,"source":"contracts\\Moderator.algo.ts:54","pc":[182,183,184]},{"teal":119,"source":"contracts\\Moderator.algo.ts:53","pc":[185]},{"teal":124,"source":"contracts\\Moderator.algo.ts:58","pc":[186]},{"teal":127,"source":"contracts\\Moderator.algo.ts:58","pc":[187,188,189]},{"teal":128,"source":"contracts\\Moderator.algo.ts:58","pc":[190]},{"teal":129,"source":"contracts\\Moderator.algo.ts:58","pc":[191]},{"teal":130,"source":"contracts\\Moderator.algo.ts:58","pc":[192]},{"teal":131,"source":"contracts\\Moderator.algo.ts:58","pc":[193]},{"teal":132,"source":"contracts\\Moderator.algo.ts:58","pc":[194]},{"teal":136,"source":"contracts\\Moderator.algo.ts:58","pc":[195,196,197]},{"teal":140,"source":"contracts\\Moderator.algo.ts:59","pc":[198,199,200]},{"teal":141,"source":"contracts\\Moderator.algo.ts:58","pc":[201]},{"teal":146,"source":"contracts\\Moderator.algo.ts:63","pc":[202,203]},{"teal":147,"source":"contracts\\Moderator.algo.ts:63","pc":[204]},{"teal":148,"source":"contracts\\Moderator.algo.ts:63","pc":[205]},{"teal":149,"source":"contracts\\Moderator.algo.ts:63","pc":[206]},{"teal":150,"source":"contracts\\Moderator.algo.ts:63","pc":[207,208]},{"teal":151,"source":"contracts\\Moderator.algo.ts:63","pc":[209]},{"teal":152,"source":"contracts\\Moderator.algo.ts:63","pc":[210]},{"teal":155,"source":"contracts\\Moderator.algo.ts:63","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[211]},{"teal":158,"source":"contracts\\Moderator.algo.ts:63","pc":[212,213,214]},{"teal":159,"source":"contracts\\Moderator.algo.ts:63","pc":[215]},{"teal":160,"source":"contracts\\Moderator.algo.ts:63","pc":[216]},{"teal":161,"source":"contracts\\Moderator.algo.ts:63","pc":[217]},{"teal":162,"source":"contracts\\Moderator.algo.ts:63","pc":[218]},{"teal":165,"source":"contracts\\Moderator.algo.ts:63","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[219]},{"teal":168,"source":"contracts\\Moderator.algo.ts:63","pc":[220,221,222]},{"teal":169,"source":"contracts\\Moderator.algo.ts:63","pc":[223]},{"teal":170,"source":"contracts\\Moderator.algo.ts:63","pc":[224]},{"teal":174,"source":"contracts\\Moderator.algo.ts:63","pc":[225,226,227]},{"teal":179,"source":"contracts\\Moderator.algo.ts:64","pc":[228,229]},{"teal":180,"source":"contracts\\Moderator.algo.ts:64","pc":[230,231,232]},{"teal":181,"source":"contracts\\Moderator.algo.ts:64","pc":[233,234]},{"teal":182,"source":"contracts\\Moderator.algo.ts:64","pc":[235]},{"teal":183,"source":"contracts\\Moderator.algo.ts:64","pc":[236]},{"teal":186,"source":"contracts\\Moderator.algo.ts:64","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[237]},{"teal":195,"source":"contracts\\Moderator.algo.ts:65","pc":[238,239]},{"teal":196,"source":"contracts\\Moderator.algo.ts:66","pc":[240,241]},{"teal":197,"source":"contracts\\Moderator.algo.ts:66","pc":[242,243]},{"teal":198,"source":"contracts\\Moderator.algo.ts:66","pc":[244]},{"teal":201,"source":"contracts\\Moderator.algo.ts:66","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[245]},{"teal":204,"source":"contracts\\Moderator.algo.ts:65","pc":[246,247]},{"teal":205,"source":"contracts\\Moderator.algo.ts:67","pc":[248,249]},{"teal":206,"source":"contracts\\Moderator.algo.ts:67","pc":[250,251]},{"teal":207,"source":"contracts\\Moderator.algo.ts:67","pc":[252]},{"teal":210,"source":"contracts\\Moderator.algo.ts:67","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[253]},{"teal":213,"source":"contracts\\Moderator.algo.ts:65","pc":[254,255]},{"teal":214,"source":"contracts\\Moderator.algo.ts:68","pc":[256,257]},{"teal":215,"source":"contracts\\Moderator.algo.ts:68","pc":[258,259]},{"teal":216,"source":"contracts\\Moderator.algo.ts:68","pc":[260]},{"teal":219,"source":"contracts\\Moderator.algo.ts:68","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[261]},{"teal":223,"source":"contracts\\Moderator.algo.ts:71","pc":[262]},{"teal":224,"source":"contracts\\Moderator.algo.ts:71","pc":[263]},{"teal":225,"source":"contracts\\Moderator.algo.ts:71","pc":[264]},{"teal":226,"source":"contracts\\Moderator.algo.ts:71","pc":[265]},{"teal":230,"source":"contracts\\Moderator.algo.ts:72","pc":[266]},{"teal":231,"source":"contracts\\Moderator.algo.ts:72","pc":[267,268]},{"teal":232,"source":"contracts\\Moderator.algo.ts:72","pc":[269]},{"teal":233,"source":"contracts\\Moderator.algo.ts:63","pc":[270]},{"teal":238,"source":"contracts\\Moderator.algo.ts:76","pc":[271]},{"teal":241,"source":"contracts\\Moderator.algo.ts:76","pc":[272,273,274]},{"teal":242,"source":"contracts\\Moderator.algo.ts:76","pc":[275]},{"teal":243,"source":"contracts\\Moderator.algo.ts:76","pc":[276]},{"teal":244,"source":"contracts\\Moderator.algo.ts:76","pc":[277]},{"teal":245,"source":"contracts\\Moderator.algo.ts:76","pc":[278]},{"teal":249,"source":"contracts\\Moderator.algo.ts:76","pc":[279,280,281]},{"teal":253,"source":"contracts\\Moderator.algo.ts:77","pc":[282]},{"teal":254,"source":"contracts\\Moderator.algo.ts:77","pc":[283]},{"teal":255,"source":"contracts\\Moderator.algo.ts:77","pc":[284]},{"teal":256,"source":"contracts\\Moderator.algo.ts:77","pc":[285]},{"teal":257,"source":"contracts\\Moderator.algo.ts:77","pc":[286]},{"teal":261,"source":"contracts\\Moderator.algo.ts:78","pc":[287]},{"teal":262,"source":"contracts\\Moderator.algo.ts:78","pc":[288]},{"teal":265,"source":"contracts\\Moderator.algo.ts:78","errorMessage":"box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value","pc":[289]},{"teal":266,"source":"contracts\\Moderator.algo.ts:76","pc":[290]},{"teal":271,"source":"contracts\\Moderator.algo.ts:82","pc":[291]},{"teal":274,"source":"contracts\\Moderator.algo.ts:82","pc":[292,293,294]},{"teal":275,"source":"contracts\\Moderator.algo.ts:82","pc":[295]},{"teal":276,"source":"contracts\\Moderator.algo.ts:82","pc":[296]},{"teal":277,"source":"contracts\\Moderator.algo.ts:82","pc":[297]},{"teal":278,"source":"contracts\\Moderator.algo.ts:82","pc":[298]},{"teal":281,"source":"contracts\\Moderator.algo.ts:82","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[299]},{"teal":284,"source":"contracts\\Moderator.algo.ts:82","pc":[300,301,302]},{"teal":285,"source":"contracts\\Moderator.algo.ts:82","pc":[303,304,305]},{"teal":286,"source":"contracts\\Moderator.algo.ts:82","pc":[306]},{"teal":287,"source":"contracts\\Moderator.algo.ts:82","pc":[307,308]},{"teal":288,"source":"contracts\\Moderator.algo.ts:82","pc":[309]},{"teal":289,"source":"contracts\\Moderator.algo.ts:82","pc":[310]},{"teal":290,"source":"contracts\\Moderator.algo.ts:82","pc":[311]},{"teal":291,"source":"contracts\\Moderator.algo.ts:82","pc":[312]},{"teal":292,"source":"contracts\\Moderator.algo.ts:82","pc":[313]},{"teal":296,"source":"contracts\\Moderator.algo.ts:82","pc":[314,315,316]},{"teal":300,"source":"contracts\\Moderator.algo.ts:83","pc":[317]},{"teal":301,"source":"contracts\\Moderator.algo.ts:83","pc":[318]},{"teal":302,"source":"contracts\\Moderator.algo.ts:83","pc":[319]},{"teal":303,"source":"contracts\\Moderator.algo.ts:83","pc":[320]},{"teal":304,"source":"contracts\\Moderator.algo.ts:83","pc":[321]},{"teal":312,"source":"contracts\\Moderator.algo.ts:86","pc":[322,323]},{"teal":313,"source":"contracts\\Moderator.algo.ts:86","pc":[324,325,326]},{"teal":314,"source":"contracts\\Moderator.algo.ts:86","pc":[327]},{"teal":315,"source":"contracts\\Moderator.algo.ts:84","pc":[328]},{"teal":316,"source":"contracts\\Moderator.algo.ts:84","pc":[329]},{"teal":317,"source":"contracts\\Moderator.algo.ts:84","pc":[330]},{"teal":318,"source":"contracts\\Moderator.algo.ts:84","pc":[331]},{"teal":319,"source":"contracts\\Moderator.algo.ts:86","pc":[332]},{"teal":320,"source":"contracts\\Moderator.algo.ts:86","pc":[333]},{"teal":321,"source":"contracts\\Moderator.algo.ts:86","pc":[334]},{"teal":322,"source":"contracts\\Moderator.algo.ts:86","pc":[335,336,337]},{"teal":323,"source":"contracts\\Moderator.algo.ts:87","pc":[338,339]},{"teal":324,"source":"contracts\\Moderator.algo.ts:87","pc":[340,341,342]},{"teal":325,"source":"contracts\\Moderator.algo.ts:87","pc":[343]},{"teal":326,"source":"contracts\\Moderator.algo.ts:84","pc":[344]},{"teal":327,"source":"contracts\\Moderator.algo.ts:84","pc":[345]},{"teal":328,"source":"contracts\\Moderator.algo.ts:84","pc":[346]},{"teal":329,"source":"contracts\\Moderator.algo.ts:84","pc":[347]},{"teal":330,"source":"contracts\\Moderator.algo.ts:87","pc":[348]},{"teal":331,"source":"contracts\\Moderator.algo.ts:87","pc":[349]},{"teal":332,"source":"contracts\\Moderator.algo.ts:86","pc":[350]},{"teal":335,"source":"contracts\\Moderator.algo.ts:87","pc":[351]},{"teal":336,"source":"contracts\\Moderator.algo.ts:87","pc":[352,353,354]},{"teal":337,"source":"contracts\\Moderator.algo.ts:88","pc":[355,356]},{"teal":338,"source":"contracts\\Moderator.algo.ts:88","pc":[357,358,359]},{"teal":339,"source":"contracts\\Moderator.algo.ts:88","pc":[360]},{"teal":340,"source":"contracts\\Moderator.algo.ts:84","pc":[361]},{"teal":341,"source":"contracts\\Moderator.algo.ts:84","pc":[362,363]},{"teal":342,"source":"contracts\\Moderator.algo.ts:84","pc":[364]},{"teal":343,"source":"contracts\\Moderator.algo.ts:84","pc":[365]},{"teal":344,"source":"contracts\\Moderator.algo.ts:88","pc":[366]},{"teal":345,"source":"contracts\\Moderator.algo.ts:88","pc":[367]},{"teal":346,"source":"contracts\\Moderator.algo.ts:87","pc":[368]},{"teal":349,"source":"contracts\\Moderator.algo.ts:88","pc":[369]},{"teal":350,"source":"contracts\\Moderator.algo.ts:88","pc":[370,371,372]},{"teal":351,"source":"contracts\\Moderator.algo.ts:89","pc":[373,374]},{"teal":352,"source":"contracts\\Moderator.algo.ts:89","pc":[375,376,377]},{"teal":353,"source":"contracts\\Moderator.algo.ts:89","pc":[378]},{"teal":354,"source":"contracts\\Moderator.algo.ts:84","pc":[379]},{"teal":355,"source":"contracts\\Moderator.algo.ts:84","pc":[380,381]},{"teal":356,"source":"contracts\\Moderator.algo.ts:84","pc":[382]},{"teal":357,"source":"contracts\\Moderator.algo.ts:84","pc":[383]},{"teal":358,"source":"contracts\\Moderator.algo.ts:89","pc":[384]},{"teal":359,"source":"contracts\\Moderator.algo.ts:89","pc":[385]},{"teal":360,"source":"contracts\\Moderator.algo.ts:88","pc":[386]},{"teal":363,"source":"contracts\\Moderator.algo.ts:85","pc":[387,388,389]},{"teal":368,"source":"contracts\\Moderator.algo.ts:91","pc":[390]},{"teal":369,"source":"contracts\\Moderator.algo.ts:91","pc":[391]},{"teal":374,"source":"contracts\\Moderator.algo.ts:93","pc":[392]},{"teal":375,"source":"contracts\\Moderator.algo.ts:82","pc":[393]},{"teal":380,"source":"contracts\\Moderator.algo.ts:97","pc":[394,395,396]},{"teal":381,"source":"contracts\\Moderator.algo.ts:97","pc":[397]},{"teal":382,"source":"contracts\\Moderator.algo.ts:97","pc":[398]},{"teal":383,"source":"contracts\\Moderator.algo.ts:97","pc":[399]},{"teal":384,"source":"contracts\\Moderator.algo.ts:97","pc":[400]},{"teal":387,"source":"contracts\\Moderator.algo.ts:97","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[401]},{"teal":390,"source":"contracts\\Moderator.algo.ts:97","pc":[402,403,404]},{"teal":391,"source":"contracts\\Moderator.algo.ts:97","pc":[405]},{"teal":392,"source":"contracts\\Moderator.algo.ts:97","pc":[406]},{"teal":396,"source":"contracts\\Moderator.algo.ts:97","pc":[407,408,409]},{"teal":401,"source":"contracts\\Moderator.algo.ts:98","pc":[410,411]},{"teal":402,"source":"contracts\\Moderator.algo.ts:98","pc":[412,413,414]},{"teal":403,"source":"contracts\\Moderator.algo.ts:98","pc":[415,416]},{"teal":404,"source":"contracts\\Moderator.algo.ts:98","pc":[417]},{"teal":405,"source":"contracts\\Moderator.algo.ts:98","pc":[418]},{"teal":408,"source":"contracts\\Moderator.algo.ts:98","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[419]},{"teal":412,"source":"contracts\\Moderator.algo.ts:99","pc":[420]},{"teal":413,"source":"contracts\\Moderator.algo.ts:99","pc":[421,422]},{"teal":414,"source":"contracts\\Moderator.algo.ts:99","pc":[423]},{"teal":415,"source":"contracts\\Moderator.algo.ts:97","pc":[424]},{"teal":420,"source":"contracts\\Moderator.algo.ts:103","pc":[425]},{"teal":423,"source":"contracts\\Moderator.algo.ts:103","pc":[426,427,428]},{"teal":424,"source":"contracts\\Moderator.algo.ts:103","pc":[429]},{"teal":425,"source":"contracts\\Moderator.algo.ts:103","pc":[430]},{"teal":426,"source":"contracts\\Moderator.algo.ts:103","pc":[431]},{"teal":427,"source":"contracts\\Moderator.algo.ts:103","pc":[432]},{"teal":430,"source":"contracts\\Moderator.algo.ts:103","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[433]},{"teal":433,"source":"contracts\\Moderator.algo.ts:103","pc":[434,435,436]},{"teal":434,"source":"contracts\\Moderator.algo.ts:103","pc":[437]},{"teal":435,"source":"contracts\\Moderator.algo.ts:103","pc":[438]},{"teal":436,"source":"contracts\\Moderator.algo.ts:103","pc":[439]},{"teal":437,"source":"contracts\\Moderator.algo.ts:103","pc":[440,441,442]},{"teal":438,"source":"contracts\\Moderator.algo.ts:103","pc":[443]},{"teal":439,"source":"contracts\\Moderator.algo.ts:103","pc":[444]},{"teal":440,"source":"contracts\\Moderator.algo.ts:103","pc":[445]},{"teal":441,"source":"contracts\\Moderator.algo.ts:103","pc":[446]},{"teal":442,"source":"contracts\\Moderator.algo.ts:103","pc":[447]},{"teal":443,"source":"contracts\\Moderator.algo.ts:103","pc":[448]},{"teal":447,"source":"contracts\\Moderator.algo.ts:103","pc":[449,450,451]},{"teal":455,"source":"contracts\\Moderator.algo.ts:106","pc":[452,453]},{"teal":456,"source":"contracts\\Moderator.algo.ts:106","pc":[454,455,456]},{"teal":457,"source":"contracts\\Moderator.algo.ts:106","pc":[457]},{"teal":458,"source":"contracts\\Moderator.algo.ts:104","pc":[458]},{"teal":459,"source":"contracts\\Moderator.algo.ts:104","pc":[459]},{"teal":460,"source":"contracts\\Moderator.algo.ts:104","pc":[460]},{"teal":461,"source":"contracts\\Moderator.algo.ts:104","pc":[461]},{"teal":462,"source":"contracts\\Moderator.algo.ts:106","pc":[462]},{"teal":463,"source":"contracts\\Moderator.algo.ts:106","pc":[463]},{"teal":464,"source":"contracts\\Moderator.algo.ts:106","pc":[464]},{"teal":465,"source":"contracts\\Moderator.algo.ts:106","pc":[465,466,467]},{"teal":466,"source":"contracts\\Moderator.algo.ts:107","pc":[468,469]},{"teal":467,"source":"contracts\\Moderator.algo.ts:107","pc":[470,471,472]},{"teal":468,"source":"contracts\\Moderator.algo.ts:107","pc":[473]},{"teal":469,"source":"contracts\\Moderator.algo.ts:104","pc":[474]},{"teal":470,"source":"contracts\\Moderator.algo.ts:104","pc":[475,476]},{"teal":471,"source":"contracts\\Moderator.algo.ts:104","pc":[477]},{"teal":472,"source":"contracts\\Moderator.algo.ts:104","pc":[478]},{"teal":473,"source":"contracts\\Moderator.algo.ts:107","pc":[479]},{"teal":474,"source":"contracts\\Moderator.algo.ts:107","pc":[480]},{"teal":475,"source":"contracts\\Moderator.algo.ts:106","pc":[481]},{"teal":478,"source":"contracts\\Moderator.algo.ts:107","pc":[482]},{"teal":479,"source":"contracts\\Moderator.algo.ts:107","pc":[483,484,485]},{"teal":480,"source":"contracts\\Moderator.algo.ts:108","pc":[486,487]},{"teal":481,"source":"contracts\\Moderator.algo.ts:108","pc":[488,489,490]},{"teal":482,"source":"contracts\\Moderator.algo.ts:108","pc":[491]},{"teal":483,"source":"contracts\\Moderator.algo.ts:104","pc":[492]},{"teal":484,"source":"contracts\\Moderator.algo.ts:104","pc":[493]},{"teal":485,"source":"contracts\\Moderator.algo.ts:104","pc":[494]},{"teal":486,"source":"contracts\\Moderator.algo.ts:104","pc":[495]},{"teal":487,"source":"contracts\\Moderator.algo.ts:108","pc":[496]},{"teal":488,"source":"contracts\\Moderator.algo.ts:108","pc":[497]},{"teal":489,"source":"contracts\\Moderator.algo.ts:107","pc":[498]},{"teal":492,"source":"contracts\\Moderator.algo.ts:108","pc":[499]},{"teal":493,"source":"contracts\\Moderator.algo.ts:108","pc":[500,501,502]},{"teal":494,"source":"contracts\\Moderator.algo.ts:109","pc":[503,504]},{"teal":495,"source":"contracts\\Moderator.algo.ts:109","pc":[505,506,507]},{"teal":496,"source":"contracts\\Moderator.algo.ts:109","pc":[508]},{"teal":497,"source":"contracts\\Moderator.algo.ts:104","pc":[509]},{"teal":498,"source":"contracts\\Moderator.algo.ts:104","pc":[510,511]},{"teal":499,"source":"contracts\\Moderator.algo.ts:104","pc":[512]},{"teal":500,"source":"contracts\\Moderator.algo.ts:104","pc":[513]},{"teal":501,"source":"contracts\\Moderator.algo.ts:109","pc":[514]},{"teal":502,"source":"contracts\\Moderator.algo.ts:109","pc":[515]},{"teal":503,"source":"contracts\\Moderator.algo.ts:108","pc":[516]},{"teal":506,"source":"contracts\\Moderator.algo.ts:105","pc":[517,518,519]},{"teal":511,"source":"contracts\\Moderator.algo.ts:111","pc":[520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570]},{"teal":512,"source":"contracts\\Moderator.algo.ts:111","pc":[571]},{"teal":517,"source":"contracts\\Moderator.algo.ts:113","pc":[572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604]},{"teal":518,"source":"contracts\\Moderator.algo.ts:103","pc":[605]},{"teal":523,"source":"contracts\\Moderator.algo.ts:117","pc":[606,607,608]},{"teal":526,"source":"contracts\\Moderator.algo.ts:117","pc":[609,610,611]},{"teal":527,"source":"contracts\\Moderator.algo.ts:117","pc":[612]},{"teal":528,"source":"contracts\\Moderator.algo.ts:117","pc":[613]},{"teal":529,"source":"contracts\\Moderator.algo.ts:117","pc":[614]},{"teal":530,"source":"contracts\\Moderator.algo.ts:117","pc":[615]},{"teal":533,"source":"contracts\\Moderator.algo.ts:117","errorMessage":"argument 1 (Address) for storeModelParams must be a address","pc":[616]},{"teal":536,"source":"contracts\\Moderator.algo.ts:117","pc":[617,618]},{"teal":537,"source":"contracts\\Moderator.algo.ts:117","pc":[619]},{"teal":538,"source":"contracts\\Moderator.algo.ts:117","pc":[620]},{"teal":539,"source":"contracts\\Moderator.algo.ts:117","pc":[621]},{"teal":540,"source":"contracts\\Moderator.algo.ts:117","pc":[622,623]},{"teal":541,"source":"contracts\\Moderator.algo.ts:117","pc":[624]},{"teal":542,"source":"contracts\\Moderator.algo.ts:117","pc":[625]},{"teal":545,"source":"contracts\\Moderator.algo.ts:117","errorMessage":"argument 2 (mbrPay) for storeModelParams must be a pay transaction","pc":[626]},{"teal":548,"source":"contracts\\Moderator.algo.ts:117","pc":[627,628,629]},{"teal":549,"source":"contracts\\Moderator.algo.ts:117","pc":[630]},{"teal":550,"source":"contracts\\Moderator.algo.ts:117","pc":[631]},{"teal":554,"source":"contracts\\Moderator.algo.ts:117","pc":[632,633,634]},{"teal":559,"source":"contracts\\Moderator.algo.ts:118","pc":[635,636]},{"teal":560,"source":"contracts\\Moderator.algo.ts:118","pc":[637]},{"teal":561,"source":"contracts\\Moderator.algo.ts:118","pc":[638]},{"teal":562,"source":"contracts\\Moderator.algo.ts:118","pc":[639]},{"teal":563,"source":"contracts\\Moderator.algo.ts:118","pc":[640,641,642]},{"teal":569,"source":"contracts\\Moderator.algo.ts:119","pc":[643,644]},{"teal":570,"source":"contracts\\Moderator.algo.ts:119","pc":[645,646]},{"teal":571,"source":"contracts\\Moderator.algo.ts:119","pc":[647]},{"teal":574,"source":"contracts\\Moderator.algo.ts:119","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[648]},{"teal":583,"source":"contracts\\Moderator.algo.ts:120","pc":[649,650]},{"teal":584,"source":"contracts\\Moderator.algo.ts:121","pc":[651,652]},{"teal":585,"source":"contracts\\Moderator.algo.ts:121","pc":[653,654]},{"teal":586,"source":"contracts\\Moderator.algo.ts:121","pc":[655]},{"teal":589,"source":"contracts\\Moderator.algo.ts:121","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[656]},{"teal":592,"source":"contracts\\Moderator.algo.ts:120","pc":[657,658]},{"teal":593,"source":"contracts\\Moderator.algo.ts:122","pc":[659,660]},{"teal":594,"source":"contracts\\Moderator.algo.ts:122","pc":[661,662]},{"teal":595,"source":"contracts\\Moderator.algo.ts:122","pc":[663]},{"teal":598,"source":"contracts\\Moderator.algo.ts:122","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[664]},{"teal":601,"source":"contracts\\Moderator.algo.ts:120","pc":[665,666]},{"teal":602,"source":"contracts\\Moderator.algo.ts:123","pc":[667,668]},{"teal":603,"source":"contracts\\Moderator.algo.ts:123","pc":[669,670]},{"teal":604,"source":"contracts\\Moderator.algo.ts:123","pc":[671]},{"teal":607,"source":"contracts\\Moderator.algo.ts:123","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[672]},{"teal":611,"source":"contracts\\Moderator.algo.ts:126","pc":[673,674]},{"teal":612,"source":"contracts\\Moderator.algo.ts:126","pc":[675]},{"teal":613,"source":"contracts\\Moderator.algo.ts:126","pc":[676]},{"teal":614,"source":"contracts\\Moderator.algo.ts:126","pc":[677]},{"teal":615,"source":"contracts\\Moderator.algo.ts:126","pc":[678,679]},{"teal":616,"source":"contracts\\Moderator.algo.ts:126","pc":[680]},{"teal":617,"source":"contracts\\Moderator.algo.ts:118","pc":[681,682,683]},{"teal":623,"source":"contracts\\Moderator.algo.ts:128","pc":[684,685]},{"teal":624,"source":"contracts\\Moderator.algo.ts:128","pc":[686,687]},{"teal":625,"source":"contracts\\Moderator.algo.ts:128","pc":[688]},{"teal":628,"source":"contracts\\Moderator.algo.ts:128","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[689]},{"teal":637,"source":"contracts\\Moderator.algo.ts:129","pc":[690,691]},{"teal":638,"source":"contracts\\Moderator.algo.ts:130","pc":[692,693]},{"teal":639,"source":"contracts\\Moderator.algo.ts:130","pc":[694,695]},{"teal":640,"source":"contracts\\Moderator.algo.ts:130","pc":[696]},{"teal":643,"source":"contracts\\Moderator.algo.ts:130","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[697]},{"teal":646,"source":"contracts\\Moderator.algo.ts:129","pc":[698,699]},{"teal":647,"source":"contracts\\Moderator.algo.ts:131","pc":[700,701]},{"teal":648,"source":"contracts\\Moderator.algo.ts:131","pc":[702,703]},{"teal":649,"source":"contracts\\Moderator.algo.ts:131","pc":[704]},{"teal":652,"source":"contracts\\Moderator.algo.ts:131","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[705]},{"teal":655,"source":"contracts\\Moderator.algo.ts:129","pc":[706,707]},{"teal":656,"source":"contracts\\Moderator.algo.ts:132","pc":[708,709]},{"teal":657,"source":"contracts\\Moderator.algo.ts:132","pc":[710,711]},{"teal":658,"source":"contracts\\Moderator.algo.ts:132","pc":[712]},{"teal":661,"source":"contracts\\Moderator.algo.ts:132","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[713]},{"teal":665,"source":"contracts\\Moderator.algo.ts:135","pc":[714,715]},{"teal":666,"source":"contracts\\Moderator.algo.ts:135","pc":[716]},{"teal":667,"source":"contracts\\Moderator.algo.ts:135","pc":[717]},{"teal":668,"source":"contracts\\Moderator.algo.ts:135","pc":[718]},{"teal":672,"source":"contracts\\Moderator.algo.ts:136","pc":[719,720]},{"teal":673,"source":"contracts\\Moderator.algo.ts:136","pc":[721]},{"teal":674,"source":"contracts\\Moderator.algo.ts:136","pc":[722]},{"teal":675,"source":"contracts\\Moderator.algo.ts:136","pc":[723]},{"teal":676,"source":"contracts\\Moderator.algo.ts:136","pc":[724,725]},{"teal":677,"source":"contracts\\Moderator.algo.ts:136","pc":[726]},{"teal":680,"source":"contracts\\Moderator.algo.ts:117","pc":[727]},{"teal":685,"source":"contracts\\Moderator.algo.ts:141","pc":[728]},{"teal":688,"source":"contracts\\Moderator.algo.ts:141","pc":[729,730,731]},{"teal":689,"source":"contracts\\Moderator.algo.ts:141","pc":[732]},{"teal":690,"source":"contracts\\Moderator.algo.ts:141","pc":[733]},{"teal":691,"source":"contracts\\Moderator.algo.ts:141","pc":[734]},{"teal":692,"source":"contracts\\Moderator.algo.ts:141","pc":[735]},{"teal":695,"source":"contracts\\Moderator.algo.ts:141","errorMessage":"argument 0 (Address) for getBoxValue must be a address","pc":[736]},{"teal":698,"source":"contracts\\Moderator.algo.ts:141","pc":[737,738,739]},{"teal":699,"source":"contracts\\Moderator.algo.ts:141","pc":[740]},{"teal":700,"source":"contracts\\Moderator.algo.ts:141","pc":[741]},{"teal":701,"source":"contracts\\Moderator.algo.ts:141","pc":[742]},{"teal":702,"source":"contracts\\Moderator.algo.ts:141","pc":[743]},{"teal":706,"source":"contracts\\Moderator.algo.ts:141","pc":[744,745,746]},{"teal":711,"source":"contracts\\Moderator.algo.ts:142","pc":[747,748]},{"teal":712,"source":"contracts\\Moderator.algo.ts:142","pc":[749,750,751]},{"teal":713,"source":"contracts\\Moderator.algo.ts:142","pc":[752,753]},{"teal":714,"source":"contracts\\Moderator.algo.ts:142","pc":[754]},{"teal":715,"source":"contracts\\Moderator.algo.ts:142","pc":[755]},{"teal":718,"source":"contracts\\Moderator.algo.ts:142","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[756]},{"teal":722,"source":"contracts\\Moderator.algo.ts:143","pc":[757,758]},{"teal":723,"source":"contracts\\Moderator.algo.ts:143","pc":[759]},{"teal":724,"source":"contracts\\Moderator.algo.ts:143","pc":[760]},{"teal":725,"source":"contracts\\Moderator.algo.ts:143","pc":[761]},{"teal":726,"source":"contracts\\Moderator.algo.ts:143","pc":[762]},{"teal":730,"source":"contracts\\Moderator.algo.ts:144","pc":[763,764]},{"teal":731,"source":"contracts\\Moderator.algo.ts:144","pc":[765]},{"teal":734,"source":"contracts\\Moderator.algo.ts:144","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[766]},{"teal":735,"source":"contracts\\Moderator.algo.ts:141","pc":[767]},{"teal":740,"source":"contracts\\Moderator.algo.ts:148","pc":[768,769,770]},{"teal":741,"source":"contracts\\Moderator.algo.ts:148","pc":[771]},{"teal":742,"source":"contracts\\Moderator.algo.ts:148","pc":[772]},{"teal":746,"source":"contracts\\Moderator.algo.ts:148","pc":[773,774,775]},{"teal":750,"source":"contracts\\Moderator.algo.ts:149","pc":[776,777]},{"teal":751,"source":"contracts\\Moderator.algo.ts:149","pc":[778,779,780]},{"teal":752,"source":"contracts\\Moderator.algo.ts:149","pc":[781,782]},{"teal":753,"source":"contracts\\Moderator.algo.ts:149","pc":[783]},{"teal":754,"source":"contracts\\Moderator.algo.ts:149","pc":[784]},{"teal":755,"source":"contracts\\Moderator.algo.ts:149","pc":[785]},{"teal":761,"source":"contracts\\Moderator.algo.ts:150","pc":[786]},{"teal":762,"source":"contracts\\Moderator.algo.ts:150","pc":[787]},{"teal":763,"source":"contracts\\Moderator.algo.ts:150","pc":[788,789]},{"teal":767,"source":"contracts\\Moderator.algo.ts:151","pc":[790,791]},{"teal":768,"source":"contracts\\Moderator.algo.ts:151","pc":[792,793]},{"teal":771,"source":"contracts\\Moderator.algo.ts:150","pc":[794]},{"teal":772,"source":"contracts\\Moderator.algo.ts:150","pc":[795,796]},{"teal":775,"source":"contracts\\Moderator.algo.ts:150","pc":[797]},{"teal":776,"source":"contracts\\Moderator.algo.ts:148","pc":[798]},{"teal":779,"source":"contracts\\Moderator.algo.ts:29","pc":[799,800,801,802,803,804]},{"teal":780,"source":"contracts\\Moderator.algo.ts:29","pc":[805,806,807]},{"teal":781,"source":"contracts\\Moderator.algo.ts:29","pc":[808,809,810,811]},{"teal":784,"source":"contracts\\Moderator.algo.ts:29","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[812]},{"teal":787,"source":"contracts\\Moderator.algo.ts:29","pc":[813,814,815,816,817,818]},{"teal":788,"source":"contracts\\Moderator.algo.ts:29","pc":[819,820,821,822,823,824]},{"teal":789,"source":"contracts\\Moderator.algo.ts:29","pc":[825,826,827,828,829,830]},{"teal":790,"source":"contracts\\Moderator.algo.ts:29","pc":[831,832,833,834,835,836]},{"teal":791,"source":"contracts\\Moderator.algo.ts:29","pc":[837,838,839,840,841,842]},{"teal":792,"source":"contracts\\Moderator.algo.ts:29","pc":[843,844,845,846,847,848]},{"teal":793,"source":"contracts\\Moderator.algo.ts:29","pc":[849,850,851,852,853,854]},{"teal":794,"source":"contracts\\Moderator.algo.ts:29","pc":[855,856,857,858,859,860]},{"teal":795,"source":"contracts\\Moderator.algo.ts:29","pc":[861,862,863,864,865,866]},{"teal":796,"source":"contracts\\Moderator.algo.ts:29","pc":[867,868,869]},{"teal":797,"source":"contracts\\Moderator.algo.ts:29","pc":[870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889]},{"teal":800,"source":"contracts\\Moderator.algo.ts:29","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[890]},{"teal":803,"source":"contracts\\Moderator.algo.ts:29","pc":[891,892,893,894,895,896]},{"teal":804,"source":"contracts\\Moderator.algo.ts:29","pc":[897,898,899]},{"teal":805,"source":"contracts\\Moderator.algo.ts:29","pc":[900,901,902,903]},{"teal":808,"source":"contracts\\Moderator.algo.ts:29","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[904]},{"teal":811,"source":"contracts\\Moderator.algo.ts:29","pc":[905,906,907,908,909,910]},{"teal":812,"source":"contracts\\Moderator.algo.ts:29","pc":[911,912,913]},{"teal":813,"source":"contracts\\Moderator.algo.ts:29","pc":[914,915,916,917]},{"teal":816,"source":"contracts\\Moderator.algo.ts:29","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[918]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAQggAMCEPRAYJgQVABNJbml0aWFsTW9kZWxNZXRyaWNzBBUffHUKAAhyZWdNb2RlbAhpcGZzSGFzaDEYFIEGCzEZCI0MAs0AAAAAAAADGwMpAr8AAAAAAAAAAAAAADYaAVcCAIgAAiJDigEAK4v/SRUWVwYCTFBniTYaAVcCAIgAAiJDigEAMQA2MgByB0gSRCuL/0kVFlcGAkxQZ4kpiAAMSRUWVwYCTFBQsCJDigABK2RXAgCJKYgABRZQsCJDigABgcR3iTEWIglJOBAiEkQ2GgFJFSQSRIgAAiJDigIAMQA2MgByB0gSRIv+OAAxABJEi/44BzIKEkSL/jgIIQQSRCgkuUgoi/+/iSmIAARQsCJDigABKL1MSEQovkSJKTYaAUkVJBJEiAALgAEAJU8CVFCwIkOKAQEovUxIRIv/VwAIFyglI7oXD0lBAA2L/1cICBcoIyO6Fw8QSUEADov/VxAIFyghBSO6Fw8QSUEADov/VxgIFyghBiO6Fw8QQQACIokliTYaAUkVJBJEiAACIkOKAQAxADYyAHIHSBJEKov/v4kpNhoBSRUkEkSIAAxJFRZXBgJMUFCwIkOKAQGL/1cACBcqJSO6Fw5JQQAOi/9XEAgXKiEFI7oXDhBJQQANi/9XCAgXKiMjuhcOEElBAA6L/1cYCBcqIQYjuhcPEEEANIAxTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbomAH2ZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHOJNhoCNhoBSRUkEkQxFiIJSTgQIhJEiAACIkOKAwCL/r1MSEEAKTEAMQASRIv/OAAxABJEi/84BzIKEkSL/zgIIQQSRIv+SbxIi/2/QgArMQAxABJEi/84ADEAEkSL/zgHMgoSRIv/OAghBBJEi/4kuUiL/km8SIv9v4kpNhoBSRUkEkSIAARQsCJDigEBMQA2MgByB0gSRIv/vUxIRIv/vkSJiAACIkOKAAAxADYyAHIHSBJEsSKyEDEAsgklsgGziYAEEVdW2zYaAI4B/TUAgAQVN8GUgATo4ajxgAS3iRj1gARt3N/cgAQTQtjqgAR94t/NgAS/it7fgARbVTbegATtrtt5NhoAjgn9J/1A/VD9lf2p/hD+L/7k/14AgAQXR0BbNhoAjgH89ACABCSHwyw2GgCOAf9qAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ParamsData = {
  paramHash: string,
  paramKey: string
}


/**
 * Converts the ABI tuple representation of a ParamsData to the struct representation
 */
export function ParamsDataFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ParamsData, APP_SPEC.structs) as ParamsData
}

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'printHash()string': Record<string, never>
    'calculateCost()uint64': Record<string, never>
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Record<string, never>
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool': {
      modelEvaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'storeModelParams(pay,address,(string,string))void': {
      mbrPay: AppMethodCallTransactionArgument
      address: string
      paramsData: ParamsData
    }
    'getBoxValue(address)(string,string)': {
      address: string
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'printHash()string': []
    'calculateCost()uint64': []
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': []
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool': [modelEvaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'storeModelParams(pay,address,(string,string))void': [mbrPay: AppMethodCallTransactionArgument, address: string, paramsData: ParamsData]
    'getBoxValue(address)(string,string)': [address: string]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'printHash()string': string
  'calculateCost()uint64': bigint
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Classification
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool': boolean
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'storeModelParams(pay,address,(string,string))void': void
  'getBoxValue(address)(string,string)': ParamsData
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'printHash()string' | 'printHash', {
      argsObj: DmlChainArgs['obj']['printHash()string']
      argsTuple: DmlChainArgs['tuple']['printHash()string']
      returns: DmlChainReturns['printHash()string']
    }>
    & Record<'calculateCost()uint64' | 'calculateCost', {
      argsObj: DmlChainArgs['obj']['calculateCost()uint64']
      argsTuple: DmlChainArgs['tuple']['calculateCost()uint64']
      returns: DmlChainReturns['calculateCost()uint64']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'getClassificationCriteria()(uint64,uint64,uint64,uint64)' | 'getClassificationCriteria', {
      argsObj: DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      returns: DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'storeModelParams(pay,address,(string,string))void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']
      returns: DmlChainReturns['storeModelParams(pay,address,(string,string))void']
    }>
    & Record<'getBoxValue(address)(string,string)' | 'getBoxValue', {
      argsObj: DmlChainArgs['obj']['getBoxValue(address)(string,string)']
      argsTuple: DmlChainArgs['tuple']['getBoxValue(address)(string,string)']
      returns: DmlChainReturns['getBoxValue(address)(string,string)']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        paramsData: Map<string, ParamsData>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the printHash()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printHash()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateCost()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateCost(params: CallParams<DmlChainArgs['obj']['calculateCost()uint64'] | DmlChainArgs['tuple']['calculateCost()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateCost()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClassificationCriteria()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(pay,address,(string,string))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(pay,address,(string,string))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.address, params.args.paramsData],
    }
  }
  /**
   * Constructs a no op call for the getBoxValue(address)(string,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxValue(address)(string,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `calculateCost()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateCost: (params: CallParams<DmlChainArgs['obj']['calculateCost()uint64'] | DmlChainArgs['tuple']['calculateCost()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.calculateCost(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getBoxValue(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `calculateCost()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateCost: (params: CallParams<DmlChainArgs['obj']['calculateCost()uint64'] | DmlChainArgs['tuple']['calculateCost()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.calculateCost(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getBoxValue(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printHash: async (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printHash(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['printHash()string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `calculateCost()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateCost: async (params: CallParams<DmlChainArgs['obj']['calculateCost()uint64'] | DmlChainArgs['tuple']['calculateCost()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.calculateCost(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['calculateCost()uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClassificationCriteria: async (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getClassificationCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(pay,address,(string,string))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxValue: async (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getBoxValue(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getBoxValue(address)(string,string)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the paramsData map in box state
       */
      paramsData: {
        /**
         * Get all current values of the paramsData map in box state
         */
        getMap: async (): Promise<Map<string, ParamsData>> => { return (await this.appClient.state.box.getMap("paramsData")) as Map<string, ParamsData> },
        /**
         * Get a current value of the paramsData map by key from box state
         */
        value: async (key: string): Promise<ParamsData | undefined> => { return await this.appClient.state.box.getMapValue("paramsData", key) as ParamsData | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a printHash()string method call against the DMLChain contract
       */
      printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('printHash()string', v))
        return this
      },
      /**
       * Add a calculateCost()uint64 method call against the DMLChain contract
       */
      calculateCost(params: CallParams<DmlChainArgs['obj']['calculateCost()uint64'] | DmlChainArgs['tuple']['calculateCost()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateCost()uint64', v))
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClassificationCriteria()(uint64,uint64,uint64,uint64) method call against the DMLChain contract
       */
      getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClassificationCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClassificationCriteria()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a storeModelParams(pay,address,(string,string))void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxValue(address)(string,string) method call against the DMLChain contract
       */
      getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxValue(address)(string,string)', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the printHash()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printHash(params?: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']>): DmlChainComposer<[...TReturns, DmlChainReturns['printHash()string'] | undefined]>

  /**
   * Calls the calculateCost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateCost(params?: CallParams<DmlChainArgs['obj']['calculateCost()uint64'] | DmlChainArgs['tuple']['calculateCost()uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['calculateCost()uint64'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClassificationCriteria(params?: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the storeModelParams(pay,address,(string,string))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(pay,address,(string,string))void'] | undefined]>

  /**
   * Calls the getBoxValue(address)(string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxValue(params?: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getBoxValue(address)(string,string)'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

