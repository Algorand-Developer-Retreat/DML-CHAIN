/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"printHash","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"paramkeys","type":"string[]"},{"name":"paramValues","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"printModelParams","args":[{"name":"paramKeys","type":"string[20]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createBox","args":[{"name":"mbrPay","type":"pay"},{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"submitLocalUpdate","args":[{"name":"paramKeys","type":"string[]"},{"name":"paramValues","type":"uint64[]"},{"name":"dataSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"finalizeFedAvg","args":[{"name":"paramKeys","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"parameterKeys":{"keyType":"string","valueType":"string","prefix":"parameterKeys"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression","prefix":"regressionPerformanceMetrics"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification","prefix":"classificationPerformanceMetrics"},"aggregatorParameterSums":{"keyType":"string","valueType":"uint64","prefix":"aggrSums"},"totalDataSize":{"keyType":"string","valueType":"uint64","prefix":"totalDataSize"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:23","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:23","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts\\Moderator.algo.ts:23","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245]},{"teal":15,"source":"contracts\\Moderator.algo.ts:23","pc":[246,247]},{"teal":16,"source":"contracts\\Moderator.algo.ts:23","pc":[248]},{"teal":17,"source":"contracts\\Moderator.algo.ts:23","pc":[249,250]},{"teal":18,"source":"contracts\\Moderator.algo.ts:23","pc":[251]},{"teal":19,"source":"contracts\\Moderator.algo.ts:23","pc":[252,253]},{"teal":20,"source":"contracts\\Moderator.algo.ts:23","pc":[254]},{"teal":21,"source":"contracts\\Moderator.algo.ts:23","pc":[255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280]},{"teal":25,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[281]},{"teal":30,"source":"contracts\\Moderator.algo.ts:42","pc":[282,283,284]},{"teal":31,"source":"contracts\\Moderator.algo.ts:42","pc":[285,286,287]},{"teal":34,"source":"contracts\\Moderator.algo.ts:42","pc":[288,289,290]},{"teal":35,"source":"contracts\\Moderator.algo.ts:42","pc":[291]},{"teal":36,"source":"contracts\\Moderator.algo.ts:42","pc":[292]},{"teal":40,"source":"contracts\\Moderator.algo.ts:42","pc":[293,294,295]},{"teal":44,"source":"contracts\\Moderator.algo.ts:43","pc":[296,297]},{"teal":45,"source":"contracts\\Moderator.algo.ts:43","pc":[298,299]},{"teal":46,"source":"contracts\\Moderator.algo.ts:43","pc":[300]},{"teal":47,"source":"contracts\\Moderator.algo.ts:43","pc":[301]},{"teal":48,"source":"contracts\\Moderator.algo.ts:43","pc":[302]},{"teal":49,"source":"contracts\\Moderator.algo.ts:43","pc":[303,304,305]},{"teal":50,"source":"contracts\\Moderator.algo.ts:43","pc":[306]},{"teal":51,"source":"contracts\\Moderator.algo.ts:43","pc":[307]},{"teal":52,"source":"contracts\\Moderator.algo.ts:43","pc":[308]},{"teal":53,"source":"contracts\\Moderator.algo.ts:42","pc":[309]},{"teal":58,"source":"contracts\\Moderator.algo.ts:47","pc":[310,311,312]},{"teal":59,"source":"contracts\\Moderator.algo.ts:47","pc":[313,314,315]},{"teal":62,"source":"contracts\\Moderator.algo.ts:47","pc":[316,317,318]},{"teal":63,"source":"contracts\\Moderator.algo.ts:47","pc":[319]},{"teal":64,"source":"contracts\\Moderator.algo.ts:47","pc":[320]},{"teal":68,"source":"contracts\\Moderator.algo.ts:47","pc":[321,322,323]},{"teal":72,"source":"contracts\\Moderator.algo.ts:48","pc":[324,325]},{"teal":73,"source":"contracts\\Moderator.algo.ts:48","pc":[326,327,328]},{"teal":74,"source":"contracts\\Moderator.algo.ts:48","pc":[329,330]},{"teal":75,"source":"contracts\\Moderator.algo.ts:48","pc":[331]},{"teal":76,"source":"contracts\\Moderator.algo.ts:48","pc":[332]},{"teal":77,"source":"contracts\\Moderator.algo.ts:48","pc":[333]},{"teal":81,"source":"contracts\\Moderator.algo.ts:49","pc":[334,335]},{"teal":82,"source":"contracts\\Moderator.algo.ts:49","pc":[336,337]},{"teal":83,"source":"contracts\\Moderator.algo.ts:49","pc":[338]},{"teal":84,"source":"contracts\\Moderator.algo.ts:49","pc":[339]},{"teal":85,"source":"contracts\\Moderator.algo.ts:49","pc":[340]},{"teal":86,"source":"contracts\\Moderator.algo.ts:49","pc":[341,342,343]},{"teal":87,"source":"contracts\\Moderator.algo.ts:49","pc":[344]},{"teal":88,"source":"contracts\\Moderator.algo.ts:49","pc":[345]},{"teal":89,"source":"contracts\\Moderator.algo.ts:49","pc":[346]},{"teal":90,"source":"contracts\\Moderator.algo.ts:47","pc":[347]},{"teal":95,"source":"contracts\\Moderator.algo.ts:53","pc":[348,349]},{"teal":98,"source":"contracts\\Moderator.algo.ts:53","pc":[350,351,352]},{"teal":99,"source":"contracts\\Moderator.algo.ts:53","pc":[353]},{"teal":100,"source":"contracts\\Moderator.algo.ts:53","pc":[354]},{"teal":101,"source":"contracts\\Moderator.algo.ts:53","pc":[355]},{"teal":102,"source":"contracts\\Moderator.algo.ts:53","pc":[356,357,358]},{"teal":103,"source":"contracts\\Moderator.algo.ts:53","pc":[359]},{"teal":104,"source":"contracts\\Moderator.algo.ts:53","pc":[360]},{"teal":105,"source":"contracts\\Moderator.algo.ts:53","pc":[361]},{"teal":106,"source":"contracts\\Moderator.algo.ts:53","pc":[362]},{"teal":107,"source":"contracts\\Moderator.algo.ts:53","pc":[363]},{"teal":108,"source":"contracts\\Moderator.algo.ts:53","pc":[364]},{"teal":112,"source":"contracts\\Moderator.algo.ts:53","pc":[365,366,367]},{"teal":116,"source":"contracts\\Moderator.algo.ts:54","pc":[368,369]},{"teal":117,"source":"contracts\\Moderator.algo.ts:54","pc":[370]},{"teal":118,"source":"contracts\\Moderator.algo.ts:54","pc":[371,372,373]},{"teal":119,"source":"contracts\\Moderator.algo.ts:53","pc":[374]},{"teal":124,"source":"contracts\\Moderator.algo.ts:58","pc":[375,376,377]},{"teal":127,"source":"contracts\\Moderator.algo.ts:58","pc":[378,379,380]},{"teal":130,"source":"contracts\\Moderator.algo.ts:58","pc":[381,382,383]},{"teal":131,"source":"contracts\\Moderator.algo.ts:58","pc":[384]},{"teal":132,"source":"contracts\\Moderator.algo.ts:58","pc":[385]},{"teal":136,"source":"contracts\\Moderator.algo.ts:58","pc":[386,387,388]},{"teal":139,"source":"contracts\\Moderator.algo.ts:58","pc":[389]},{"teal":140,"source":"contracts\\Moderator.algo.ts:58","pc":[390,391]},{"teal":144,"source":"contracts\\Moderator.algo.ts:59","pc":[392,393]},{"teal":145,"source":"contracts\\Moderator.algo.ts:59","pc":[394,395,396]},{"teal":146,"source":"contracts\\Moderator.algo.ts:59","pc":[397,398]},{"teal":147,"source":"contracts\\Moderator.algo.ts:59","pc":[399]},{"teal":148,"source":"contracts\\Moderator.algo.ts:59","pc":[400]},{"teal":149,"source":"contracts\\Moderator.algo.ts:59","pc":[401]},{"teal":153,"source":"contracts\\Moderator.algo.ts:60","pc":[402,403]},{"teal":154,"source":"contracts\\Moderator.algo.ts:60","pc":[404]},{"teal":155,"source":"contracts\\Moderator.algo.ts:60","pc":[405]},{"teal":156,"source":"contracts\\Moderator.algo.ts:60","pc":[406,407]},{"teal":157,"source":"contracts\\Moderator.algo.ts:60","pc":[408]},{"teal":158,"source":"contracts\\Moderator.algo.ts:60","pc":[409]},{"teal":159,"source":"contracts\\Moderator.algo.ts:60","pc":[410]},{"teal":160,"source":"contracts\\Moderator.algo.ts:60","pc":[411]},{"teal":164,"source":"contracts\\Moderator.algo.ts:62","pc":[412]},{"teal":165,"source":"contracts\\Moderator.algo.ts:62","pc":[413,414]},{"teal":172,"source":"contracts\\Moderator.algo.ts:63","pc":[415,416]},{"teal":173,"source":"contracts\\Moderator.algo.ts:63","pc":[417,418]},{"teal":174,"source":"contracts\\Moderator.algo.ts:63","pc":[419]},{"teal":175,"source":"contracts\\Moderator.algo.ts:63","pc":[420]},{"teal":176,"source":"contracts\\Moderator.algo.ts:63","pc":[421]},{"teal":177,"source":"contracts\\Moderator.algo.ts:63","pc":[422,423,424]},{"teal":181,"source":"contracts\\Moderator.algo.ts:64","pc":[425,426]},{"teal":182,"source":"contracts\\Moderator.algo.ts:64","pc":[427,428]},{"teal":183,"source":"contracts\\Moderator.algo.ts:64","pc":[429]},{"teal":184,"source":"contracts\\Moderator.algo.ts:64","pc":[430,431]},{"teal":185,"source":"contracts\\Moderator.algo.ts:64","pc":[432]},{"teal":186,"source":"contracts\\Moderator.algo.ts:64","pc":[433]},{"teal":187,"source":"contracts\\Moderator.algo.ts:64","pc":[434]},{"teal":188,"source":"contracts\\Moderator.algo.ts:64","pc":[435]},{"teal":189,"source":"contracts\\Moderator.algo.ts:64","pc":[436]},{"teal":190,"source":"contracts\\Moderator.algo.ts:64","pc":[437,438]},{"teal":191,"source":"contracts\\Moderator.algo.ts:64","pc":[439,440]},{"teal":192,"source":"contracts\\Moderator.algo.ts:64","pc":[441,442]},{"teal":193,"source":"contracts\\Moderator.algo.ts:64","pc":[443]},{"teal":194,"source":"contracts\\Moderator.algo.ts:64","pc":[444]},{"teal":195,"source":"contracts\\Moderator.algo.ts:64","pc":[445]},{"teal":196,"source":"contracts\\Moderator.algo.ts:64","pc":[446]},{"teal":197,"source":"contracts\\Moderator.algo.ts:64","pc":[447,448]},{"teal":198,"source":"contracts\\Moderator.algo.ts:64","pc":[449]},{"teal":199,"source":"contracts\\Moderator.algo.ts:64","pc":[450]},{"teal":200,"source":"contracts\\Moderator.algo.ts:64","pc":[451]},{"teal":201,"source":"contracts\\Moderator.algo.ts:64","pc":[452]},{"teal":202,"source":"contracts\\Moderator.algo.ts:64","pc":[453]},{"teal":203,"source":"contracts\\Moderator.algo.ts:64","pc":[454]},{"teal":204,"source":"contracts\\Moderator.algo.ts:64","pc":[455]},{"teal":205,"source":"contracts\\Moderator.algo.ts:64","pc":[456,457,458]},{"teal":206,"source":"contracts\\Moderator.algo.ts:64","pc":[459,460]},{"teal":210,"source":"contracts\\Moderator.algo.ts:65","pc":[461,462]},{"teal":211,"source":"contracts\\Moderator.algo.ts:65","pc":[463,464]},{"teal":212,"source":"contracts\\Moderator.algo.ts:65","pc":[465]},{"teal":213,"source":"contracts\\Moderator.algo.ts:65","pc":[466,467]},{"teal":214,"source":"contracts\\Moderator.algo.ts:65","pc":[468]},{"teal":215,"source":"contracts\\Moderator.algo.ts:65","pc":[469]},{"teal":216,"source":"contracts\\Moderator.algo.ts:65","pc":[470]},{"teal":217,"source":"contracts\\Moderator.algo.ts:65","pc":[471]},{"teal":218,"source":"contracts\\Moderator.algo.ts:65","pc":[472]},{"teal":219,"source":"contracts\\Moderator.algo.ts:65","pc":[473,474]},{"teal":220,"source":"contracts\\Moderator.algo.ts:65","pc":[475,476]},{"teal":221,"source":"contracts\\Moderator.algo.ts:65","pc":[477,478]},{"teal":222,"source":"contracts\\Moderator.algo.ts:65","pc":[479]},{"teal":223,"source":"contracts\\Moderator.algo.ts:65","pc":[480]},{"teal":224,"source":"contracts\\Moderator.algo.ts:65","pc":[481]},{"teal":225,"source":"contracts\\Moderator.algo.ts:65","pc":[482]},{"teal":226,"source":"contracts\\Moderator.algo.ts:65","pc":[483,484]},{"teal":227,"source":"contracts\\Moderator.algo.ts:65","pc":[485]},{"teal":228,"source":"contracts\\Moderator.algo.ts:65","pc":[486]},{"teal":229,"source":"contracts\\Moderator.algo.ts:65","pc":[487]},{"teal":230,"source":"contracts\\Moderator.algo.ts:65","pc":[488]},{"teal":231,"source":"contracts\\Moderator.algo.ts:65","pc":[489]},{"teal":232,"source":"contracts\\Moderator.algo.ts:65","pc":[490]},{"teal":233,"source":"contracts\\Moderator.algo.ts:65","pc":[491]},{"teal":234,"source":"contracts\\Moderator.algo.ts:65","pc":[492,493,494]},{"teal":235,"source":"contracts\\Moderator.algo.ts:65","pc":[495,496]},{"teal":239,"source":"contracts\\Moderator.algo.ts:67","pc":[497,498]},{"teal":240,"source":"contracts\\Moderator.algo.ts:67","pc":[499,500]},{"teal":241,"source":"contracts\\Moderator.algo.ts:67","pc":[501]},{"teal":242,"source":"contracts\\Moderator.algo.ts:67","pc":[502]},{"teal":243,"source":"contracts\\Moderator.algo.ts:67","pc":[503]},{"teal":244,"source":"contracts\\Moderator.algo.ts:67","pc":[504,505,506]},{"teal":245,"source":"contracts\\Moderator.algo.ts:67","pc":[507]},{"teal":246,"source":"contracts\\Moderator.algo.ts:67","pc":[508]},{"teal":247,"source":"contracts\\Moderator.algo.ts:67","pc":[509]},{"teal":248,"source":"contracts\\Moderator.algo.ts:67","pc":[510]},{"teal":249,"source":"contracts\\Moderator.algo.ts:67","pc":[511]},{"teal":250,"source":"contracts\\Moderator.algo.ts:67","pc":[512]},{"teal":251,"source":"contracts\\Moderator.algo.ts:67","pc":[513,514]},{"teal":252,"source":"contracts\\Moderator.algo.ts:67","pc":[515]},{"teal":253,"source":"contracts\\Moderator.algo.ts:67","pc":[516]},{"teal":254,"source":"contracts\\Moderator.algo.ts:67","pc":[517]},{"teal":255,"source":"contracts\\Moderator.algo.ts:67","pc":[518,519,520]},{"teal":256,"source":"contracts\\Moderator.algo.ts:67","pc":[521]},{"teal":257,"source":"contracts\\Moderator.algo.ts:67","pc":[522]},{"teal":258,"source":"contracts\\Moderator.algo.ts:67","pc":[523]},{"teal":262,"source":"contracts\\Moderator.algo.ts:69","pc":[524,525]},{"teal":263,"source":"contracts\\Moderator.algo.ts:69","pc":[526]},{"teal":264,"source":"contracts\\Moderator.algo.ts:69","pc":[527]},{"teal":265,"source":"contracts\\Moderator.algo.ts:69","pc":[528,529]},{"teal":266,"source":"contracts\\Moderator.algo.ts:63","pc":[530,531,532]},{"teal":269,"source":"contracts\\Moderator.algo.ts:58","pc":[533]},{"teal":274,"source":"contracts\\Moderator.algo.ts:74","pc":[534,535,536]},{"teal":277,"source":"contracts\\Moderator.algo.ts:74","pc":[537,538,539]},{"teal":278,"source":"contracts\\Moderator.algo.ts:74","pc":[540]},{"teal":279,"source":"contracts\\Moderator.algo.ts:74","pc":[541]},{"teal":283,"source":"contracts\\Moderator.algo.ts:74","pc":[542,543,544]},{"teal":286,"source":"contracts\\Moderator.algo.ts:74","pc":[545]},{"teal":287,"source":"contracts\\Moderator.algo.ts:74","pc":[546,547]},{"teal":291,"source":"contracts\\Moderator.algo.ts:75","pc":[548]},{"teal":292,"source":"contracts\\Moderator.algo.ts:75","pc":[549,550]},{"teal":299,"source":"contracts\\Moderator.algo.ts:76","pc":[551,552]},{"teal":300,"source":"contracts\\Moderator.algo.ts:76","pc":[553,554]},{"teal":301,"source":"contracts\\Moderator.algo.ts:76","pc":[555]},{"teal":302,"source":"contracts\\Moderator.algo.ts:76","pc":[556,557,558]},{"teal":306,"source":"contracts\\Moderator.algo.ts:77","pc":[559,560]},{"teal":307,"source":"contracts\\Moderator.algo.ts:77","pc":[561,562]},{"teal":308,"source":"contracts\\Moderator.algo.ts:77","pc":[563]},{"teal":309,"source":"contracts\\Moderator.algo.ts:77","pc":[564,565]},{"teal":310,"source":"contracts\\Moderator.algo.ts:77","pc":[566]},{"teal":311,"source":"contracts\\Moderator.algo.ts:77","pc":[567]},{"teal":312,"source":"contracts\\Moderator.algo.ts:77","pc":[568]},{"teal":313,"source":"contracts\\Moderator.algo.ts:77","pc":[569,570]},{"teal":314,"source":"contracts\\Moderator.algo.ts:77","pc":[571,572]},{"teal":315,"source":"contracts\\Moderator.algo.ts:77","pc":[573,574]},{"teal":316,"source":"contracts\\Moderator.algo.ts:77","pc":[575]},{"teal":317,"source":"contracts\\Moderator.algo.ts:77","pc":[576]},{"teal":318,"source":"contracts\\Moderator.algo.ts:77","pc":[577,578]},{"teal":319,"source":"contracts\\Moderator.algo.ts:77","pc":[579]},{"teal":320,"source":"contracts\\Moderator.algo.ts:77","pc":[580]},{"teal":321,"source":"contracts\\Moderator.algo.ts:77","pc":[581]},{"teal":322,"source":"contracts\\Moderator.algo.ts:77","pc":[582]},{"teal":323,"source":"contracts\\Moderator.algo.ts:77","pc":[583]},{"teal":324,"source":"contracts\\Moderator.algo.ts:77","pc":[584]},{"teal":325,"source":"contracts\\Moderator.algo.ts:77","pc":[585]},{"teal":326,"source":"contracts\\Moderator.algo.ts:77","pc":[586,587,588]},{"teal":327,"source":"contracts\\Moderator.algo.ts:77","pc":[589,590]},{"teal":331,"source":"contracts\\Moderator.algo.ts:78","pc":[591,592]},{"teal":332,"source":"contracts\\Moderator.algo.ts:78","pc":[593,594]},{"teal":333,"source":"contracts\\Moderator.algo.ts:78","pc":[595]},{"teal":334,"source":"contracts\\Moderator.algo.ts:78","pc":[596]},{"teal":335,"source":"contracts\\Moderator.algo.ts:78","pc":[597]},{"teal":336,"source":"contracts\\Moderator.algo.ts:78","pc":[598,599,600]},{"teal":337,"source":"contracts\\Moderator.algo.ts:78","pc":[601]},{"teal":338,"source":"contracts\\Moderator.algo.ts:78","pc":[602]},{"teal":339,"source":"contracts\\Moderator.algo.ts:78","pc":[603]},{"teal":340,"source":"contracts\\Moderator.algo.ts:78","pc":[604]},{"teal":343,"source":"contracts\\Moderator.algo.ts:78","errorMessage":"box value does not exist: this.parameterKeys(key).value","pc":[605]},{"teal":344,"source":"contracts\\Moderator.algo.ts:78","pc":[606,607,608]},{"teal":345,"source":"contracts\\Moderator.algo.ts:78","pc":[609,610]},{"teal":349,"source":"contracts\\Moderator.algo.ts:79","pc":[611,612]},{"teal":350,"source":"contracts\\Moderator.algo.ts:79","pc":[613]},{"teal":354,"source":"contracts\\Moderator.algo.ts:80","pc":[614,615]},{"teal":355,"source":"contracts\\Moderator.algo.ts:80","pc":[616]},{"teal":359,"source":"contracts\\Moderator.algo.ts:81","pc":[617,618]},{"teal":360,"source":"contracts\\Moderator.algo.ts:81","pc":[619]},{"teal":361,"source":"contracts\\Moderator.algo.ts:81","pc":[620]},{"teal":362,"source":"contracts\\Moderator.algo.ts:81","pc":[621,622]},{"teal":363,"source":"contracts\\Moderator.algo.ts:76","pc":[623,624,625]},{"teal":366,"source":"contracts\\Moderator.algo.ts:74","pc":[626]},{"teal":371,"source":"contracts\\Moderator.algo.ts:86","pc":[627,628,629]},{"teal":372,"source":"contracts\\Moderator.algo.ts:86","pc":[630]},{"teal":373,"source":"contracts\\Moderator.algo.ts:86","pc":[631]},{"teal":374,"source":"contracts\\Moderator.algo.ts:86","pc":[632,633]},{"teal":375,"source":"contracts\\Moderator.algo.ts:86","pc":[634]},{"teal":378,"source":"contracts\\Moderator.algo.ts:86","errorMessage":"argument 0 (evaluationMetrics) for createBox must be a (uint64,uint64,uint64,uint64)","pc":[635]},{"teal":381,"source":"contracts\\Moderator.algo.ts:86","pc":[636,637]},{"teal":382,"source":"contracts\\Moderator.algo.ts:86","pc":[638]},{"teal":383,"source":"contracts\\Moderator.algo.ts:86","pc":[639]},{"teal":384,"source":"contracts\\Moderator.algo.ts:86","pc":[640]},{"teal":385,"source":"contracts\\Moderator.algo.ts:86","pc":[641,642]},{"teal":386,"source":"contracts\\Moderator.algo.ts:86","pc":[643]},{"teal":387,"source":"contracts\\Moderator.algo.ts:86","pc":[644]},{"teal":390,"source":"contracts\\Moderator.algo.ts:86","errorMessage":"argument 1 (mbrPay) for createBox must be a pay transaction","pc":[645]},{"teal":393,"source":"contracts\\Moderator.algo.ts:86","pc":[646,647,648]},{"teal":394,"source":"contracts\\Moderator.algo.ts:86","pc":[649]},{"teal":395,"source":"contracts\\Moderator.algo.ts:86","pc":[650]},{"teal":399,"source":"contracts\\Moderator.algo.ts:86","pc":[651,652,653]},{"teal":403,"source":"contracts\\Moderator.algo.ts:87","pc":[654]},{"teal":404,"source":"contracts\\Moderator.algo.ts:87","pc":[655]},{"teal":405,"source":"contracts\\Moderator.algo.ts:87","pc":[656]},{"teal":406,"source":"contracts\\Moderator.algo.ts:87","pc":[657]},{"teal":407,"source":"contracts\\Moderator.algo.ts:87","pc":[658]},{"teal":408,"source":"contracts\\Moderator.algo.ts:87","pc":[659]},{"teal":417,"source":"contracts\\Moderator.algo.ts:88","pc":[660,661]},{"teal":418,"source":"contracts\\Moderator.algo.ts:89","pc":[662,663]},{"teal":419,"source":"contracts\\Moderator.algo.ts:89","pc":[664,665]},{"teal":420,"source":"contracts\\Moderator.algo.ts:89","pc":[666]},{"teal":423,"source":"contracts\\Moderator.algo.ts:89","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[667]},{"teal":426,"source":"contracts\\Moderator.algo.ts:88","pc":[668,669]},{"teal":427,"source":"contracts\\Moderator.algo.ts:90","pc":[670,671]},{"teal":428,"source":"contracts\\Moderator.algo.ts:90","pc":[672,673]},{"teal":429,"source":"contracts\\Moderator.algo.ts:90","pc":[674]},{"teal":432,"source":"contracts\\Moderator.algo.ts:90","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[675]},{"teal":435,"source":"contracts\\Moderator.algo.ts:88","pc":[676,677]},{"teal":436,"source":"contracts\\Moderator.algo.ts:91","pc":[678,679]},{"teal":437,"source":"contracts\\Moderator.algo.ts:7","pc":[680,681,682,683]},{"teal":438,"source":"contracts\\Moderator.algo.ts:91","pc":[684]},{"teal":441,"source":"contracts\\Moderator.algo.ts:91","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[685]},{"teal":445,"source":"contracts\\Moderator.algo.ts:94","pc":[686]},{"teal":446,"source":"contracts\\Moderator.algo.ts:94","pc":[687,688]},{"teal":447,"source":"contracts\\Moderator.algo.ts:94","pc":[689]},{"teal":448,"source":"contracts\\Moderator.algo.ts:86","pc":[690]},{"teal":453,"source":"contracts\\Moderator.algo.ts:98","pc":[691,692,693]},{"teal":454,"source":"contracts\\Moderator.algo.ts:98","pc":[694]},{"teal":455,"source":"contracts\\Moderator.algo.ts:98","pc":[695]},{"teal":456,"source":"contracts\\Moderator.algo.ts:98","pc":[696,697]},{"teal":457,"source":"contracts\\Moderator.algo.ts:98","pc":[698]},{"teal":460,"source":"contracts\\Moderator.algo.ts:98","errorMessage":"argument 0 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[699]},{"teal":463,"source":"contracts\\Moderator.algo.ts:98","pc":[700,701,702]},{"teal":464,"source":"contracts\\Moderator.algo.ts:98","pc":[703]},{"teal":465,"source":"contracts\\Moderator.algo.ts:98","pc":[704]},{"teal":469,"source":"contracts\\Moderator.algo.ts:98","pc":[705,706,707]},{"teal":474,"source":"contracts\\Moderator.algo.ts:99","pc":[708,709]},{"teal":475,"source":"contracts\\Moderator.algo.ts:99","pc":[710,711,712]},{"teal":476,"source":"contracts\\Moderator.algo.ts:99","pc":[713,714]},{"teal":477,"source":"contracts\\Moderator.algo.ts:99","pc":[715]},{"teal":478,"source":"contracts\\Moderator.algo.ts:99","pc":[716]},{"teal":481,"source":"contracts\\Moderator.algo.ts:99","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[717]},{"teal":485,"source":"contracts\\Moderator.algo.ts:100","pc":[718]},{"teal":486,"source":"contracts\\Moderator.algo.ts:100","pc":[719,720]},{"teal":487,"source":"contracts\\Moderator.algo.ts:100","pc":[721]},{"teal":488,"source":"contracts\\Moderator.algo.ts:98","pc":[722]},{"teal":493,"source":"contracts\\Moderator.algo.ts:104","pc":[723,724,725]},{"teal":494,"source":"contracts\\Moderator.algo.ts:104","pc":[726]},{"teal":495,"source":"contracts\\Moderator.algo.ts:104","pc":[727]},{"teal":496,"source":"contracts\\Moderator.algo.ts:104","pc":[728,729]},{"teal":497,"source":"contracts\\Moderator.algo.ts:104","pc":[730]},{"teal":500,"source":"contracts\\Moderator.algo.ts:104","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[731]},{"teal":503,"source":"contracts\\Moderator.algo.ts:104","pc":[732,733,734]},{"teal":504,"source":"contracts\\Moderator.algo.ts:104","pc":[735]},{"teal":505,"source":"contracts\\Moderator.algo.ts:104","pc":[736]},{"teal":509,"source":"contracts\\Moderator.algo.ts:104","pc":[737,738,739]},{"teal":514,"source":"contracts\\Moderator.algo.ts:105","pc":[740,741]},{"teal":515,"source":"contracts\\Moderator.algo.ts:105","pc":[742,743,744]},{"teal":516,"source":"contracts\\Moderator.algo.ts:105","pc":[745,746]},{"teal":517,"source":"contracts\\Moderator.algo.ts:105","pc":[747]},{"teal":518,"source":"contracts\\Moderator.algo.ts:105","pc":[748]},{"teal":521,"source":"contracts\\Moderator.algo.ts:105","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[749]},{"teal":525,"source":"contracts\\Moderator.algo.ts:106","pc":[750]},{"teal":526,"source":"contracts\\Moderator.algo.ts:106","pc":[751,752]},{"teal":527,"source":"contracts\\Moderator.algo.ts:106","pc":[753]},{"teal":528,"source":"contracts\\Moderator.algo.ts:104","pc":[754]},{"teal":533,"source":"contracts\\Moderator.algo.ts:110","pc":[755,756]},{"teal":536,"source":"contracts\\Moderator.algo.ts:110","pc":[757,758,759]},{"teal":537,"source":"contracts\\Moderator.algo.ts:110","pc":[760]},{"teal":538,"source":"contracts\\Moderator.algo.ts:110","pc":[761]},{"teal":539,"source":"contracts\\Moderator.algo.ts:110","pc":[762,763]},{"teal":540,"source":"contracts\\Moderator.algo.ts:110","pc":[764]},{"teal":543,"source":"contracts\\Moderator.algo.ts:110","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[765]},{"teal":546,"source":"contracts\\Moderator.algo.ts:110","pc":[766,767,768]},{"teal":547,"source":"contracts\\Moderator.algo.ts:110","pc":[769]},{"teal":548,"source":"contracts\\Moderator.algo.ts:110","pc":[770]},{"teal":549,"source":"contracts\\Moderator.algo.ts:110","pc":[771]},{"teal":550,"source":"contracts\\Moderator.algo.ts:110","pc":[772,773,774]},{"teal":551,"source":"contracts\\Moderator.algo.ts:110","pc":[775]},{"teal":552,"source":"contracts\\Moderator.algo.ts:110","pc":[776]},{"teal":553,"source":"contracts\\Moderator.algo.ts:110","pc":[777]},{"teal":554,"source":"contracts\\Moderator.algo.ts:110","pc":[778]},{"teal":555,"source":"contracts\\Moderator.algo.ts:110","pc":[779]},{"teal":556,"source":"contracts\\Moderator.algo.ts:110","pc":[780]},{"teal":560,"source":"contracts\\Moderator.algo.ts:110","pc":[781,782,783]},{"teal":568,"source":"contracts\\Moderator.algo.ts:113","pc":[784,785]},{"teal":569,"source":"contracts\\Moderator.algo.ts:113","pc":[786,787,788]},{"teal":570,"source":"contracts\\Moderator.algo.ts:113","pc":[789]},{"teal":571,"source":"contracts\\Moderator.algo.ts:111","pc":[790]},{"teal":572,"source":"contracts\\Moderator.algo.ts:111","pc":[791]},{"teal":573,"source":"contracts\\Moderator.algo.ts:111","pc":[792]},{"teal":574,"source":"contracts\\Moderator.algo.ts:111","pc":[793]},{"teal":575,"source":"contracts\\Moderator.algo.ts:113","pc":[794]},{"teal":576,"source":"contracts\\Moderator.algo.ts:113","pc":[795]},{"teal":577,"source":"contracts\\Moderator.algo.ts:113","pc":[796]},{"teal":578,"source":"contracts\\Moderator.algo.ts:113","pc":[797,798,799]},{"teal":579,"source":"contracts\\Moderator.algo.ts:114","pc":[800,801]},{"teal":580,"source":"contracts\\Moderator.algo.ts:114","pc":[802,803,804]},{"teal":581,"source":"contracts\\Moderator.algo.ts:114","pc":[805]},{"teal":582,"source":"contracts\\Moderator.algo.ts:111","pc":[806]},{"teal":583,"source":"contracts\\Moderator.algo.ts:111","pc":[807,808]},{"teal":584,"source":"contracts\\Moderator.algo.ts:111","pc":[809]},{"teal":585,"source":"contracts\\Moderator.algo.ts:111","pc":[810]},{"teal":586,"source":"contracts\\Moderator.algo.ts:114","pc":[811]},{"teal":587,"source":"contracts\\Moderator.algo.ts:114","pc":[812]},{"teal":588,"source":"contracts\\Moderator.algo.ts:113","pc":[813]},{"teal":591,"source":"contracts\\Moderator.algo.ts:114","pc":[814]},{"teal":592,"source":"contracts\\Moderator.algo.ts:114","pc":[815,816,817]},{"teal":593,"source":"contracts\\Moderator.algo.ts:115","pc":[818,819]},{"teal":594,"source":"contracts\\Moderator.algo.ts:115","pc":[820,821,822]},{"teal":595,"source":"contracts\\Moderator.algo.ts:115","pc":[823]},{"teal":596,"source":"contracts\\Moderator.algo.ts:111","pc":[824]},{"teal":597,"source":"contracts\\Moderator.algo.ts:111","pc":[825]},{"teal":598,"source":"contracts\\Moderator.algo.ts:111","pc":[826]},{"teal":599,"source":"contracts\\Moderator.algo.ts:111","pc":[827]},{"teal":600,"source":"contracts\\Moderator.algo.ts:115","pc":[828]},{"teal":601,"source":"contracts\\Moderator.algo.ts:115","pc":[829]},{"teal":602,"source":"contracts\\Moderator.algo.ts:114","pc":[830]},{"teal":605,"source":"contracts\\Moderator.algo.ts:115","pc":[831]},{"teal":606,"source":"contracts\\Moderator.algo.ts:115","pc":[832,833,834]},{"teal":607,"source":"contracts\\Moderator.algo.ts:116","pc":[835,836]},{"teal":608,"source":"contracts\\Moderator.algo.ts:116","pc":[837,838,839]},{"teal":609,"source":"contracts\\Moderator.algo.ts:116","pc":[840]},{"teal":610,"source":"contracts\\Moderator.algo.ts:111","pc":[841]},{"teal":611,"source":"contracts\\Moderator.algo.ts:111","pc":[842,843]},{"teal":612,"source":"contracts\\Moderator.algo.ts:111","pc":[844]},{"teal":613,"source":"contracts\\Moderator.algo.ts:111","pc":[845]},{"teal":614,"source":"contracts\\Moderator.algo.ts:116","pc":[846]},{"teal":615,"source":"contracts\\Moderator.algo.ts:116","pc":[847]},{"teal":616,"source":"contracts\\Moderator.algo.ts:115","pc":[848]},{"teal":619,"source":"contracts\\Moderator.algo.ts:112","pc":[849,850,851]},{"teal":624,"source":"contracts\\Moderator.algo.ts:118","pc":[852,853]},{"teal":625,"source":"contracts\\Moderator.algo.ts:118","pc":[854]},{"teal":630,"source":"contracts\\Moderator.algo.ts:120","pc":[855,856]},{"teal":631,"source":"contracts\\Moderator.algo.ts:110","pc":[857]},{"teal":636,"source":"contracts\\Moderator.algo.ts:124","pc":[858,859]},{"teal":639,"source":"contracts\\Moderator.algo.ts:124","pc":[860,861,862]},{"teal":640,"source":"contracts\\Moderator.algo.ts:124","pc":[863]},{"teal":641,"source":"contracts\\Moderator.algo.ts:124","pc":[864]},{"teal":642,"source":"contracts\\Moderator.algo.ts:124","pc":[865,866]},{"teal":643,"source":"contracts\\Moderator.algo.ts:124","pc":[867]},{"teal":646,"source":"contracts\\Moderator.algo.ts:124","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[868]},{"teal":649,"source":"contracts\\Moderator.algo.ts:124","pc":[869,870,871]},{"teal":650,"source":"contracts\\Moderator.algo.ts:124","pc":[872]},{"teal":651,"source":"contracts\\Moderator.algo.ts:124","pc":[873]},{"teal":652,"source":"contracts\\Moderator.algo.ts:124","pc":[874]},{"teal":653,"source":"contracts\\Moderator.algo.ts:124","pc":[875,876,877]},{"teal":654,"source":"contracts\\Moderator.algo.ts:124","pc":[878]},{"teal":655,"source":"contracts\\Moderator.algo.ts:124","pc":[879]},{"teal":656,"source":"contracts\\Moderator.algo.ts:124","pc":[880]},{"teal":657,"source":"contracts\\Moderator.algo.ts:124","pc":[881]},{"teal":658,"source":"contracts\\Moderator.algo.ts:124","pc":[882]},{"teal":659,"source":"contracts\\Moderator.algo.ts:124","pc":[883]},{"teal":663,"source":"contracts\\Moderator.algo.ts:124","pc":[884,885,886]},{"teal":668,"source":"contracts\\Moderator.algo.ts:125","pc":[887,888]},{"teal":669,"source":"contracts\\Moderator.algo.ts:125","pc":[889,890,891]},{"teal":670,"source":"contracts\\Moderator.algo.ts:125","pc":[892,893]},{"teal":671,"source":"contracts\\Moderator.algo.ts:125","pc":[894]},{"teal":672,"source":"contracts\\Moderator.algo.ts:125","pc":[895]},{"teal":675,"source":"contracts\\Moderator.algo.ts:125","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[896]},{"teal":682,"source":"contracts\\Moderator.algo.ts:128","pc":[897,898]},{"teal":683,"source":"contracts\\Moderator.algo.ts:128","pc":[899,900,901]},{"teal":684,"source":"contracts\\Moderator.algo.ts:128","pc":[902]},{"teal":685,"source":"contracts\\Moderator.algo.ts:126","pc":[903]},{"teal":686,"source":"contracts\\Moderator.algo.ts:126","pc":[904]},{"teal":687,"source":"contracts\\Moderator.algo.ts:126","pc":[905]},{"teal":688,"source":"contracts\\Moderator.algo.ts:126","pc":[906]},{"teal":689,"source":"contracts\\Moderator.algo.ts:128","pc":[907]},{"teal":690,"source":"contracts\\Moderator.algo.ts:128","pc":[908]},{"teal":691,"source":"contracts\\Moderator.algo.ts:128","pc":[909]},{"teal":692,"source":"contracts\\Moderator.algo.ts:128","pc":[910,911,912]},{"teal":693,"source":"contracts\\Moderator.algo.ts:129","pc":[913,914]},{"teal":694,"source":"contracts\\Moderator.algo.ts:129","pc":[915,916,917]},{"teal":695,"source":"contracts\\Moderator.algo.ts:129","pc":[918]},{"teal":696,"source":"contracts\\Moderator.algo.ts:126","pc":[919]},{"teal":697,"source":"contracts\\Moderator.algo.ts:126","pc":[920]},{"teal":698,"source":"contracts\\Moderator.algo.ts:126","pc":[921]},{"teal":699,"source":"contracts\\Moderator.algo.ts:126","pc":[922]},{"teal":700,"source":"contracts\\Moderator.algo.ts:129","pc":[923]},{"teal":701,"source":"contracts\\Moderator.algo.ts:129","pc":[924]},{"teal":702,"source":"contracts\\Moderator.algo.ts:128","pc":[925]},{"teal":705,"source":"contracts\\Moderator.algo.ts:129","pc":[926]},{"teal":706,"source":"contracts\\Moderator.algo.ts:129","pc":[927,928,929]},{"teal":707,"source":"contracts\\Moderator.algo.ts:130","pc":[930,931]},{"teal":708,"source":"contracts\\Moderator.algo.ts:130","pc":[932,933,934]},{"teal":709,"source":"contracts\\Moderator.algo.ts:130","pc":[935]},{"teal":710,"source":"contracts\\Moderator.algo.ts:126","pc":[936]},{"teal":711,"source":"contracts\\Moderator.algo.ts:126","pc":[937,938]},{"teal":712,"source":"contracts\\Moderator.algo.ts:126","pc":[939]},{"teal":713,"source":"contracts\\Moderator.algo.ts:126","pc":[940]},{"teal":714,"source":"contracts\\Moderator.algo.ts:130","pc":[941]},{"teal":715,"source":"contracts\\Moderator.algo.ts:130","pc":[942]},{"teal":716,"source":"contracts\\Moderator.algo.ts:129","pc":[943]},{"teal":719,"source":"contracts\\Moderator.algo.ts:127","pc":[944,945,946]},{"teal":724,"source":"contracts\\Moderator.algo.ts:132","pc":[947,948]},{"teal":725,"source":"contracts\\Moderator.algo.ts:132","pc":[949]},{"teal":730,"source":"contracts\\Moderator.algo.ts:134","pc":[950,951]},{"teal":731,"source":"contracts\\Moderator.algo.ts:124","pc":[952]},{"teal":736,"source":"contracts\\Moderator.algo.ts:138","pc":[953,954,955]},{"teal":737,"source":"contracts\\Moderator.algo.ts:138","pc":[956]},{"teal":740,"source":"contracts\\Moderator.algo.ts:138","pc":[957,958,959]},{"teal":741,"source":"contracts\\Moderator.algo.ts:138","pc":[960,961,962]},{"teal":744,"source":"contracts\\Moderator.algo.ts:138","pc":[963,964,965]},{"teal":747,"source":"contracts\\Moderator.algo.ts:138","pc":[966,967,968]},{"teal":748,"source":"contracts\\Moderator.algo.ts:138","pc":[969]},{"teal":749,"source":"contracts\\Moderator.algo.ts:138","pc":[970]},{"teal":753,"source":"contracts\\Moderator.algo.ts:138","pc":[971,972,973]},{"teal":756,"source":"contracts\\Moderator.algo.ts:138","pc":[974]},{"teal":757,"source":"contracts\\Moderator.algo.ts:138","pc":[975,976]},{"teal":761,"source":"contracts\\Moderator.algo.ts:139","pc":[977]},{"teal":762,"source":"contracts\\Moderator.algo.ts:139","pc":[978]},{"teal":765,"source":"contracts\\Moderator.algo.ts:139","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[979]},{"teal":766,"source":"contracts\\Moderator.algo.ts:139","pc":[980]},{"teal":767,"source":"contracts\\Moderator.algo.ts:139","pc":[981,982]},{"teal":771,"source":"contracts\\Moderator.algo.ts:140","pc":[983]},{"teal":772,"source":"contracts\\Moderator.algo.ts:140","pc":[984,985]},{"teal":773,"source":"contracts\\Moderator.algo.ts:140","pc":[986,987]},{"teal":774,"source":"contracts\\Moderator.algo.ts:140","pc":[988]},{"teal":775,"source":"contracts\\Moderator.algo.ts:140","pc":[989]},{"teal":776,"source":"contracts\\Moderator.algo.ts:140","pc":[990]},{"teal":780,"source":"contracts\\Moderator.algo.ts:142","pc":[991,992]},{"teal":781,"source":"contracts\\Moderator.algo.ts:142","pc":[993]},{"teal":782,"source":"contracts\\Moderator.algo.ts:142","pc":[994]},{"teal":783,"source":"contracts\\Moderator.algo.ts:142","pc":[995,996]},{"teal":784,"source":"contracts\\Moderator.algo.ts:142","pc":[997]},{"teal":785,"source":"contracts\\Moderator.algo.ts:142","pc":[998]},{"teal":786,"source":"contracts\\Moderator.algo.ts:142","pc":[999]},{"teal":787,"source":"contracts\\Moderator.algo.ts:142","pc":[1000]},{"teal":788,"source":"contracts\\Moderator.algo.ts:142","pc":[1001]},{"teal":792,"source":"contracts\\Moderator.algo.ts:144","pc":[1002]},{"teal":793,"source":"contracts\\Moderator.algo.ts:144","pc":[1003,1004]},{"teal":800,"source":"contracts\\Moderator.algo.ts:145","pc":[1005,1006]},{"teal":801,"source":"contracts\\Moderator.algo.ts:145","pc":[1007,1008]},{"teal":802,"source":"contracts\\Moderator.algo.ts:145","pc":[1009]},{"teal":803,"source":"contracts\\Moderator.algo.ts:145","pc":[1010]},{"teal":804,"source":"contracts\\Moderator.algo.ts:145","pc":[1011]},{"teal":805,"source":"contracts\\Moderator.algo.ts:145","pc":[1012,1013,1014]},{"teal":809,"source":"contracts\\Moderator.algo.ts:146","pc":[1015,1016]},{"teal":810,"source":"contracts\\Moderator.algo.ts:146","pc":[1017,1018]},{"teal":811,"source":"contracts\\Moderator.algo.ts:146","pc":[1019]},{"teal":812,"source":"contracts\\Moderator.algo.ts:146","pc":[1020,1021]},{"teal":813,"source":"contracts\\Moderator.algo.ts:146","pc":[1022]},{"teal":814,"source":"contracts\\Moderator.algo.ts:146","pc":[1023]},{"teal":815,"source":"contracts\\Moderator.algo.ts:146","pc":[1024]},{"teal":816,"source":"contracts\\Moderator.algo.ts:146","pc":[1025]},{"teal":817,"source":"contracts\\Moderator.algo.ts:146","pc":[1026]},{"teal":818,"source":"contracts\\Moderator.algo.ts:146","pc":[1027,1028]},{"teal":819,"source":"contracts\\Moderator.algo.ts:146","pc":[1029,1030]},{"teal":820,"source":"contracts\\Moderator.algo.ts:146","pc":[1031,1032]},{"teal":821,"source":"contracts\\Moderator.algo.ts:146","pc":[1033]},{"teal":822,"source":"contracts\\Moderator.algo.ts:146","pc":[1034]},{"teal":823,"source":"contracts\\Moderator.algo.ts:146","pc":[1035]},{"teal":824,"source":"contracts\\Moderator.algo.ts:146","pc":[1036]},{"teal":825,"source":"contracts\\Moderator.algo.ts:146","pc":[1037,1038]},{"teal":826,"source":"contracts\\Moderator.algo.ts:146","pc":[1039]},{"teal":827,"source":"contracts\\Moderator.algo.ts:146","pc":[1040]},{"teal":828,"source":"contracts\\Moderator.algo.ts:146","pc":[1041]},{"teal":829,"source":"contracts\\Moderator.algo.ts:146","pc":[1042]},{"teal":830,"source":"contracts\\Moderator.algo.ts:146","pc":[1043]},{"teal":831,"source":"contracts\\Moderator.algo.ts:146","pc":[1044]},{"teal":832,"source":"contracts\\Moderator.algo.ts:146","pc":[1045]},{"teal":833,"source":"contracts\\Moderator.algo.ts:146","pc":[1046,1047,1048]},{"teal":834,"source":"contracts\\Moderator.algo.ts:146","pc":[1049,1050]},{"teal":838,"source":"contracts\\Moderator.algo.ts:147","pc":[1051,1052]},{"teal":839,"source":"contracts\\Moderator.algo.ts:147","pc":[1053,1054]},{"teal":840,"source":"contracts\\Moderator.algo.ts:147","pc":[1055]},{"teal":841,"source":"contracts\\Moderator.algo.ts:147","pc":[1056,1057]},{"teal":842,"source":"contracts\\Moderator.algo.ts:147","pc":[1058]},{"teal":843,"source":"contracts\\Moderator.algo.ts:147","pc":[1059]},{"teal":844,"source":"contracts\\Moderator.algo.ts:147","pc":[1060]},{"teal":845,"source":"contracts\\Moderator.algo.ts:147","pc":[1061,1062]},{"teal":846,"source":"contracts\\Moderator.algo.ts:147","pc":[1063]},{"teal":847,"source":"contracts\\Moderator.algo.ts:147","pc":[1064]},{"teal":848,"source":"contracts\\Moderator.algo.ts:147","pc":[1065]},{"teal":849,"source":"contracts\\Moderator.algo.ts:147","pc":[1066]},{"teal":850,"source":"contracts\\Moderator.algo.ts:147","pc":[1067,1068]},{"teal":854,"source":"contracts\\Moderator.algo.ts:149","pc":[1069,1070]},{"teal":855,"source":"contracts\\Moderator.algo.ts:149","pc":[1071,1072]},{"teal":856,"source":"contracts\\Moderator.algo.ts:149","pc":[1073]},{"teal":857,"source":"contracts\\Moderator.algo.ts:149","pc":[1074]},{"teal":858,"source":"contracts\\Moderator.algo.ts:149","pc":[1075]},{"teal":859,"source":"contracts\\Moderator.algo.ts:149","pc":[1076,1077,1078]},{"teal":860,"source":"contracts\\Moderator.algo.ts:149","pc":[1079]},{"teal":861,"source":"contracts\\Moderator.algo.ts:149","pc":[1080]},{"teal":862,"source":"contracts\\Moderator.algo.ts:149","pc":[1081]},{"teal":863,"source":"contracts\\Moderator.algo.ts:149","pc":[1082]},{"teal":866,"source":"contracts\\Moderator.algo.ts:149","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[1083]},{"teal":867,"source":"contracts\\Moderator.algo.ts:149","pc":[1084]},{"teal":868,"source":"contracts\\Moderator.algo.ts:149","pc":[1085,1086]},{"teal":872,"source":"contracts\\Moderator.algo.ts:150","pc":[1087,1088]},{"teal":873,"source":"contracts\\Moderator.algo.ts:150","pc":[1089,1090]},{"teal":874,"source":"contracts\\Moderator.algo.ts:150","pc":[1091,1092]},{"teal":875,"source":"contracts\\Moderator.algo.ts:150","pc":[1093]},{"teal":876,"source":"contracts\\Moderator.algo.ts:150","pc":[1094]},{"teal":877,"source":"contracts\\Moderator.algo.ts:150","pc":[1095,1096]},{"teal":881,"source":"contracts\\Moderator.algo.ts:152","pc":[1097,1098]},{"teal":882,"source":"contracts\\Moderator.algo.ts:152","pc":[1099,1100]},{"teal":883,"source":"contracts\\Moderator.algo.ts:152","pc":[1101]},{"teal":884,"source":"contracts\\Moderator.algo.ts:152","pc":[1102]},{"teal":885,"source":"contracts\\Moderator.algo.ts:152","pc":[1103]},{"teal":886,"source":"contracts\\Moderator.algo.ts:152","pc":[1104,1105,1106]},{"teal":887,"source":"contracts\\Moderator.algo.ts:152","pc":[1107]},{"teal":888,"source":"contracts\\Moderator.algo.ts:152","pc":[1108]},{"teal":889,"source":"contracts\\Moderator.algo.ts:152","pc":[1109]},{"teal":890,"source":"contracts\\Moderator.algo.ts:152","pc":[1110,1111]},{"teal":891,"source":"contracts\\Moderator.algo.ts:152","pc":[1112]},{"teal":892,"source":"contracts\\Moderator.algo.ts:152","pc":[1113]},{"teal":896,"source":"contracts\\Moderator.algo.ts:153","pc":[1114,1115]},{"teal":897,"source":"contracts\\Moderator.algo.ts:153","pc":[1116]},{"teal":898,"source":"contracts\\Moderator.algo.ts:153","pc":[1117]},{"teal":899,"source":"contracts\\Moderator.algo.ts:153","pc":[1118,1119]},{"teal":900,"source":"contracts\\Moderator.algo.ts:145","pc":[1120,1121,1122]},{"teal":903,"source":"contracts\\Moderator.algo.ts:138","pc":[1123]},{"teal":908,"source":"contracts\\Moderator.algo.ts:158","pc":[1124,1125,1126]},{"teal":911,"source":"contracts\\Moderator.algo.ts:158","pc":[1127,1128,1129]},{"teal":912,"source":"contracts\\Moderator.algo.ts:158","pc":[1130]},{"teal":913,"source":"contracts\\Moderator.algo.ts:158","pc":[1131]},{"teal":917,"source":"contracts\\Moderator.algo.ts:158","pc":[1132,1133,1134]},{"teal":920,"source":"contracts\\Moderator.algo.ts:158","pc":[1135]},{"teal":921,"source":"contracts\\Moderator.algo.ts:158","pc":[1136,1137]},{"teal":925,"source":"contracts\\Moderator.algo.ts:159","pc":[1138,1139]},{"teal":926,"source":"contracts\\Moderator.algo.ts:159","pc":[1140,1141,1142]},{"teal":927,"source":"contracts\\Moderator.algo.ts:159","pc":[1143,1144]},{"teal":928,"source":"contracts\\Moderator.algo.ts:159","pc":[1145]},{"teal":929,"source":"contracts\\Moderator.algo.ts:159","pc":[1146]},{"teal":930,"source":"contracts\\Moderator.algo.ts:159","pc":[1147]},{"teal":934,"source":"contracts\\Moderator.algo.ts:161","pc":[1148]},{"teal":935,"source":"contracts\\Moderator.algo.ts:161","pc":[1149]},{"teal":938,"source":"contracts\\Moderator.algo.ts:161","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[1150]},{"teal":939,"source":"contracts\\Moderator.algo.ts:161","pc":[1151]},{"teal":940,"source":"contracts\\Moderator.algo.ts:161","pc":[1152,1153]},{"teal":944,"source":"contracts\\Moderator.algo.ts:162","pc":[1154,1155]},{"teal":945,"source":"contracts\\Moderator.algo.ts:162","pc":[1156]},{"teal":946,"source":"contracts\\Moderator.algo.ts:162","pc":[1157]},{"teal":949,"source":"contracts\\Moderator.algo.ts:162","errorMessage":"No data has been aggregated yet.","pc":[1158]},{"teal":953,"source":"contracts\\Moderator.algo.ts:164","pc":[1159]},{"teal":954,"source":"contracts\\Moderator.algo.ts:164","pc":[1160,1161]},{"teal":961,"source":"contracts\\Moderator.algo.ts:165","pc":[1162,1163]},{"teal":962,"source":"contracts\\Moderator.algo.ts:165","pc":[1164,1165]},{"teal":963,"source":"contracts\\Moderator.algo.ts:165","pc":[1166]},{"teal":964,"source":"contracts\\Moderator.algo.ts:165","pc":[1167]},{"teal":965,"source":"contracts\\Moderator.algo.ts:165","pc":[1168]},{"teal":966,"source":"contracts\\Moderator.algo.ts:165","pc":[1169,1170,1171]},{"teal":970,"source":"contracts\\Moderator.algo.ts:166","pc":[1172,1173]},{"teal":971,"source":"contracts\\Moderator.algo.ts:166","pc":[1174,1175]},{"teal":972,"source":"contracts\\Moderator.algo.ts:166","pc":[1176]},{"teal":973,"source":"contracts\\Moderator.algo.ts:166","pc":[1177,1178]},{"teal":974,"source":"contracts\\Moderator.algo.ts:166","pc":[1179]},{"teal":975,"source":"contracts\\Moderator.algo.ts:166","pc":[1180]},{"teal":976,"source":"contracts\\Moderator.algo.ts:166","pc":[1181]},{"teal":977,"source":"contracts\\Moderator.algo.ts:166","pc":[1182]},{"teal":978,"source":"contracts\\Moderator.algo.ts:166","pc":[1183]},{"teal":979,"source":"contracts\\Moderator.algo.ts:166","pc":[1184,1185]},{"teal":980,"source":"contracts\\Moderator.algo.ts:166","pc":[1186,1187]},{"teal":981,"source":"contracts\\Moderator.algo.ts:166","pc":[1188,1189]},{"teal":982,"source":"contracts\\Moderator.algo.ts:166","pc":[1190]},{"teal":983,"source":"contracts\\Moderator.algo.ts:166","pc":[1191]},{"teal":984,"source":"contracts\\Moderator.algo.ts:166","pc":[1192]},{"teal":985,"source":"contracts\\Moderator.algo.ts:166","pc":[1193]},{"teal":986,"source":"contracts\\Moderator.algo.ts:166","pc":[1194,1195]},{"teal":987,"source":"contracts\\Moderator.algo.ts:166","pc":[1196]},{"teal":988,"source":"contracts\\Moderator.algo.ts:166","pc":[1197]},{"teal":989,"source":"contracts\\Moderator.algo.ts:166","pc":[1198]},{"teal":990,"source":"contracts\\Moderator.algo.ts:166","pc":[1199]},{"teal":991,"source":"contracts\\Moderator.algo.ts:166","pc":[1200]},{"teal":992,"source":"contracts\\Moderator.algo.ts:166","pc":[1201]},{"teal":993,"source":"contracts\\Moderator.algo.ts:166","pc":[1202]},{"teal":994,"source":"contracts\\Moderator.algo.ts:166","pc":[1203,1204,1205]},{"teal":995,"source":"contracts\\Moderator.algo.ts:166","pc":[1206,1207]},{"teal":999,"source":"contracts\\Moderator.algo.ts:167","pc":[1208,1209]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:167","pc":[1210,1211]},{"teal":1001,"source":"contracts\\Moderator.algo.ts:167","pc":[1212]},{"teal":1002,"source":"contracts\\Moderator.algo.ts:167","pc":[1213]},{"teal":1003,"source":"contracts\\Moderator.algo.ts:167","pc":[1214]},{"teal":1004,"source":"contracts\\Moderator.algo.ts:167","pc":[1215,1216,1217]},{"teal":1005,"source":"contracts\\Moderator.algo.ts:167","pc":[1218]},{"teal":1006,"source":"contracts\\Moderator.algo.ts:167","pc":[1219]},{"teal":1007,"source":"contracts\\Moderator.algo.ts:167","pc":[1220]},{"teal":1008,"source":"contracts\\Moderator.algo.ts:167","pc":[1221]},{"teal":1011,"source":"contracts\\Moderator.algo.ts:167","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[1222]},{"teal":1012,"source":"contracts\\Moderator.algo.ts:167","pc":[1223]},{"teal":1013,"source":"contracts\\Moderator.algo.ts:167","pc":[1224,1225]},{"teal":1017,"source":"contracts\\Moderator.algo.ts:169","pc":[1226,1227]},{"teal":1018,"source":"contracts\\Moderator.algo.ts:169","pc":[1228,1229]},{"teal":1019,"source":"contracts\\Moderator.algo.ts:169","pc":[1230]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:169","pc":[1231,1232]},{"teal":1024,"source":"contracts\\Moderator.algo.ts:171","pc":[1233,1234]},{"teal":1025,"source":"contracts\\Moderator.algo.ts:171","pc":[1235,1236]},{"teal":1026,"source":"contracts\\Moderator.algo.ts:171","pc":[1237]},{"teal":1027,"source":"contracts\\Moderator.algo.ts:171","pc":[1238]},{"teal":1028,"source":"contracts\\Moderator.algo.ts:171","pc":[1239]},{"teal":1029,"source":"contracts\\Moderator.algo.ts:171","pc":[1240,1241,1242]},{"teal":1030,"source":"contracts\\Moderator.algo.ts:171","pc":[1243]},{"teal":1031,"source":"contracts\\Moderator.algo.ts:171","pc":[1244]},{"teal":1032,"source":"contracts\\Moderator.algo.ts:171","pc":[1245]},{"teal":1033,"source":"contracts\\Moderator.algo.ts:171","pc":[1246]},{"teal":1034,"source":"contracts\\Moderator.algo.ts:171","pc":[1247]},{"teal":1035,"source":"contracts\\Moderator.algo.ts:171","pc":[1248]},{"teal":1036,"source":"contracts\\Moderator.algo.ts:171","pc":[1249,1250]},{"teal":1037,"source":"contracts\\Moderator.algo.ts:171","pc":[1251,1252,1253]},{"teal":1038,"source":"contracts\\Moderator.algo.ts:171","pc":[1254]},{"teal":1039,"source":"contracts\\Moderator.algo.ts:171","pc":[1255]},{"teal":1040,"source":"contracts\\Moderator.algo.ts:171","pc":[1256]},{"teal":1041,"source":"contracts\\Moderator.algo.ts:171","pc":[1257,1258,1259]},{"teal":1042,"source":"contracts\\Moderator.algo.ts:171","pc":[1260]},{"teal":1043,"source":"contracts\\Moderator.algo.ts:171","pc":[1261]},{"teal":1044,"source":"contracts\\Moderator.algo.ts:171","pc":[1262]},{"teal":1048,"source":"contracts\\Moderator.algo.ts:173","pc":[1263,1264]},{"teal":1049,"source":"contracts\\Moderator.algo.ts:173","pc":[1265]},{"teal":1050,"source":"contracts\\Moderator.algo.ts:173","pc":[1266]},{"teal":1051,"source":"contracts\\Moderator.algo.ts:173","pc":[1267,1268]},{"teal":1052,"source":"contracts\\Moderator.algo.ts:165","pc":[1269,1270,1271]},{"teal":1055,"source":"contracts\\Moderator.algo.ts:158","pc":[1272]},{"teal":1060,"source":"contracts\\Moderator.algo.ts:178","pc":[1273,1274,1275]},{"teal":1061,"source":"contracts\\Moderator.algo.ts:178","pc":[1276]},{"teal":1062,"source":"contracts\\Moderator.algo.ts:178","pc":[1277]},{"teal":1066,"source":"contracts\\Moderator.algo.ts:178","pc":[1278,1279,1280]},{"teal":1070,"source":"contracts\\Moderator.algo.ts:179","pc":[1281,1282]},{"teal":1071,"source":"contracts\\Moderator.algo.ts:179","pc":[1283,1284,1285]},{"teal":1072,"source":"contracts\\Moderator.algo.ts:179","pc":[1286,1287]},{"teal":1073,"source":"contracts\\Moderator.algo.ts:179","pc":[1288]},{"teal":1074,"source":"contracts\\Moderator.algo.ts:179","pc":[1289]},{"teal":1075,"source":"contracts\\Moderator.algo.ts:179","pc":[1290]},{"teal":1076,"source":"contracts\\Moderator.algo.ts:178","pc":[1291]},{"teal":1079,"source":"contracts\\Moderator.algo.ts:23","pc":[1292,1293,1294,1295,1296,1297]},{"teal":1080,"source":"contracts\\Moderator.algo.ts:23","pc":[1298,1299,1300]},{"teal":1081,"source":"contracts\\Moderator.algo.ts:23","pc":[1301,1302,1303,1304]},{"teal":1084,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1305]},{"teal":1087,"source":"contracts\\Moderator.algo.ts:23","pc":[1306,1307,1308,1309,1310,1311]},{"teal":1088,"source":"contracts\\Moderator.algo.ts:23","pc":[1312,1313,1314,1315,1316,1317]},{"teal":1089,"source":"contracts\\Moderator.algo.ts:23","pc":[1318,1319,1320,1321,1322,1323]},{"teal":1090,"source":"contracts\\Moderator.algo.ts:23","pc":[1324,1325,1326,1327,1328,1329]},{"teal":1091,"source":"contracts\\Moderator.algo.ts:23","pc":[1330,1331,1332,1333,1334,1335]},{"teal":1092,"source":"contracts\\Moderator.algo.ts:23","pc":[1336,1337,1338,1339,1340,1341]},{"teal":1093,"source":"contracts\\Moderator.algo.ts:23","pc":[1342,1343,1344,1345,1346,1347]},{"teal":1094,"source":"contracts\\Moderator.algo.ts:23","pc":[1348,1349,1350,1351,1352,1353]},{"teal":1095,"source":"contracts\\Moderator.algo.ts:23","pc":[1354,1355,1356,1357,1358,1359]},{"teal":1096,"source":"contracts\\Moderator.algo.ts:23","pc":[1360,1361,1362,1363,1364,1365]},{"teal":1097,"source":"contracts\\Moderator.algo.ts:23","pc":[1366,1367,1368]},{"teal":1098,"source":"contracts\\Moderator.algo.ts:23","pc":[1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390]},{"teal":1101,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1391]},{"teal":1104,"source":"contracts\\Moderator.algo.ts:23","pc":[1392,1393,1394,1395,1396,1397]},{"teal":1105,"source":"contracts\\Moderator.algo.ts:23","pc":[1398,1399,1400]},{"teal":1106,"source":"contracts\\Moderator.algo.ts:23","pc":[1401,1402,1403,1404]},{"teal":1109,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1405]},{"teal":1112,"source":"contracts\\Moderator.algo.ts:23","pc":[1406,1407,1408,1409,1410,1411]},{"teal":1113,"source":"contracts\\Moderator.algo.ts:23","pc":[1412,1413,1414]},{"teal":1114,"source":"contracts\\Moderator.algo.ts:23","pc":[1415,1416,1417,1418]},{"teal":1117,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1419]},{"teal":1120,"source":"contracts\\Moderator.algo.ts:23","pc":[1420,1421,1422]},{"teal":1121,"source":"contracts\\Moderator.algo.ts:23","pc":[1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434]},{"teal":1122,"source":"contracts\\Moderator.algo.ts:23","pc":[1435,1436]},{"teal":1123,"source":"contracts\\Moderator.algo.ts:23","pc":[1437]},{"teal":1124,"source":"contracts\\Moderator.algo.ts:23","pc":[1438]},{"teal":1125,"source":"contracts\\Moderator.algo.ts:23","pc":[1439]},{"teal":1129,"source":"contracts\\Moderator.algo.ts:23","pc":[1440,1441,1442]},{"teal":1130,"source":"contracts\\Moderator.algo.ts:23","pc":[1443,1444]},{"teal":1131,"source":"contracts\\Moderator.algo.ts:23","pc":[1445]},{"teal":1132,"source":"contracts\\Moderator.algo.ts:23","pc":[1446]},{"teal":1133,"source":"contracts\\Moderator.algo.ts:23","pc":[1447,1448,1449]},{"teal":1134,"source":"contracts\\Moderator.algo.ts:23","pc":[1450,1451,1452]},{"teal":1135,"source":"contracts\\Moderator.algo.ts:23","pc":[1453]},{"teal":1138,"source":"contracts\\Moderator.algo.ts:23","pc":[1454,1455]},{"teal":1139,"source":"contracts\\Moderator.algo.ts:23","pc":[1456,1457]},{"teal":1140,"source":"contracts\\Moderator.algo.ts:23","pc":[1458]},{"teal":1141,"source":"contracts\\Moderator.algo.ts:23","pc":[1459]},{"teal":1142,"source":"contracts\\Moderator.algo.ts:23","pc":[1460]},{"teal":1143,"source":"contracts\\Moderator.algo.ts:23","pc":[1461,1462,1463]},{"teal":1144,"source":"contracts\\Moderator.algo.ts:23","pc":[1464,1465]},{"teal":1145,"source":"contracts\\Moderator.algo.ts:23","pc":[1466,1467]},{"teal":1146,"source":"contracts\\Moderator.algo.ts:23","pc":[1468]},{"teal":1147,"source":"contracts\\Moderator.algo.ts:23","pc":[1469,1470,1471]},{"teal":1148,"source":"contracts\\Moderator.algo.ts:23","pc":[1472,1473,1474]},{"teal":1151,"source":"contracts\\Moderator.algo.ts:23","pc":[1475]},{"teal":1154,"source":"contracts\\Moderator.algo.ts:23","pc":[1476,1477]},{"teal":1155,"source":"contracts\\Moderator.algo.ts:23","pc":[1478,1479]},{"teal":1156,"source":"contracts\\Moderator.algo.ts:23","pc":[1480]},{"teal":1157,"source":"contracts\\Moderator.algo.ts:23","pc":[1481,1482,1483]},{"teal":1158,"source":"contracts\\Moderator.algo.ts:23","pc":[1484]},{"teal":1159,"source":"contracts\\Moderator.algo.ts:23","pc":[1485]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMiA4IDMyIDEwIDE2CmJ5dGVjYmxvY2sgMHggMHg2MzZjNjE3MzczNjk2NjY5NjM2MTc0Njk2ZjZlNTA2NTcyNjY2ZjcyNmQ2MTZlNjM2NTRkNjU3NDcyNjk2MzczMDAwYjcyNjM2YzYxNzM3MzRkNmY2NDY1NmMgMHg3MjY1Njc3MjY1NzM3MzY5NmY2ZTUwNjU3MjY2NmY3MjZkNjE2ZTYzNjU0ZDY1NzQ3MjY5NjM3MzAwMDg3MjY1Njc0ZDZmNjQ2NTZjIDB4NzQ2Zjc0NjE2YzQ0NjE3NDYxNTM2OTdhNjUwMDBkNzQ2Zjc0NjE2YzQ0NjE3NDYxNTM2OTdhNjUgMHg3MDYxNzI2MTZkNjU3NDY1NzI0YjY1Nzk3MyAweDY5NzA2NjczNDg2MTczNjggMHg2MTY3Njc3MjUzNzU2ZDczIDB4MTUxZjdjNzUgMHg0ZDZmNjQ2NTZjMjA2ODYxNzMyMDYyNjU2NTZlMjA2MTYzNjM2NTcwNzQ2NTY0MjA2NjZmNzIyMDY2NzU3Mjc0Njg2NTcyMjA2MzZmNmU3MzY5NjQ2NTcyNjE3NDY5NmY2ZSAweDY2NjE2OTZjNjU2NDIwNzQ2ODY1MjA2ZDY5NmU2OTZkNzU2ZDIwNzI2NTcxNzU2OTcyNjU2ZDY1NmU3NDczCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4xCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfVXBkYXRlQXBwbGljYXRpb24gKmNhbGxfRGVsZXRlQXBwbGljYXRpb24gKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gbW9kZWxIYXNoOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24obW9kZWxIYXNoOiBzdHJpbmcpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjQzCgkvLyB0aGlzLmlwZnNIYXNoLnZhbHVlID0gbW9kZWxIYXNoCglieXRlYyA1IC8vICAiaXBmc0hhc2giCglmcmFtZV9kaWcgLTEgLy8gbW9kZWxIYXNoOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyB1cGRhdGVBcHBsaWNhdGlvbihzdHJpbmcpdm9pZAoqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uOgoJLy8gbW9kZWxIYXNoOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSB1cGRhdGVBcHBsaWNhdGlvbihzdHJpbmcpdm9pZAoJY2FsbHN1YiB1cGRhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gdXBkYXRlQXBwbGljYXRpb24obW9kZWxIYXNoOiBzdHJpbmcpOiB2b2lkCnVwZGF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjQ4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjQ5CgkvLyB0aGlzLmlwZnNIYXNoLnZhbHVlID0gbW9kZWxIYXNoCglieXRlYyA1IC8vICAiaXBmc0hhc2giCglmcmFtZV9kaWcgLTEgLy8gbW9kZWxIYXNoOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBwcmludEhhc2goKXN0cmluZwoqYWJpX3JvdXRlX3ByaW50SGFzaDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgNyAvLyAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBwcmludEhhc2goKXN0cmluZwoJY2FsbHN1YiBwcmludEhhc2gKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gcHJpbnRIYXNoKCk6IHN0cmluZwpwcmludEhhc2g6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NTQKCS8vIHJldHVybiB0aGlzLmlwZnNIYXNoLnZhbHVlOwoJYnl0ZWMgNSAvLyAgImlwZnNIYXNoIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglyZXRzdWIKCi8vIHN0b3JlTW9kZWxQYXJhbXMoc3RyaW5nW10sc3RyaW5nW10pdm9pZAoqYWJpX3JvdXRlX3N0b3JlTW9kZWxQYXJhbXM6CgkvLyBwYXJhbVZhbHVlczogc3RyaW5nW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCgkvLyBwYXJhbWtleXM6IHN0cmluZ1tdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCgoJLy8gZXhlY3V0ZSBzdG9yZU1vZGVsUGFyYW1zKHN0cmluZ1tdLHN0cmluZ1tdKXZvaWQKCWNhbGxzdWIgc3RvcmVNb2RlbFBhcmFtcwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gc3RvcmVNb2RlbFBhcmFtcyhwYXJhbWtleXM6IHN0cmluZ1tdLCBwYXJhbVZhbHVlczogc3RyaW5nW10pOiB2b2lkCnN0b3JlTW9kZWxQYXJhbXM6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjU5CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjYwCgkvLyBhc3NlcnQocGFyYW1rZXlzLmxlbmd0aCA9PT0gcGFyYW1WYWx1ZXMubGVuZ3RoKQoJZnJhbWVfZGlnIC0xIC8vIHBhcmFta2V5czogc3RyaW5nW10KCWludGMgMSAvLyAwCglleHRyYWN0X3VpbnQxNgoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtVmFsdWVzOiBzdHJpbmdbXQoJaW50YyAxIC8vIDAKCWV4dHJhY3RfdWludDE2Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjYyCgkvLyBpID0gMAoJaW50YyAxIC8vIDAKCWZyYW1lX2J1cnkgMCAvLyBpOiB1aW50NjQKCip3aGlsZV8wOgoKKndoaWxlXzBfY29udGludWU6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NjMKCS8vIGkgPCBwYXJhbWtleXMubGVuZ3RoCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBwYXJhbWtleXM6IHN0cmluZ1tdCglpbnRjIDEgLy8gMAoJZXh0cmFjdF91aW50MTYKCTwKCWJ6ICp3aGlsZV8wX2VuZAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo2NAoJLy8ga2V5ID0gcGFyYW1rZXlzW2ldCglmcmFtZV9kaWcgLTEgLy8gcGFyYW1rZXlzOiBzdHJpbmdbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMSAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJaW50YyAyIC8vIDIKCSogLy8gYWNjICogMgoJKwoJaW50YyAyIC8vIDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglpbnRjIDIgLy8gMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50YyAwIC8vICBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludGMgMiAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglmcmFtZV9idXJ5IDEgLy8ga2V5OiBzdHJpbmcKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NjUKCS8vIHZhbHVlID0gcGFyYW1WYWx1ZXNbaV0KCWZyYW1lX2RpZyAtMiAvLyBwYXJhbVZhbHVlczogc3RyaW5nW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDEgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyAyCgkqIC8vIGFjYyAqIDIKCSsKCWludGMgMiAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJaW50YyAyIC8vIDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludGMgMCAvLyAgZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnRjIDIgLy8gMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJZnJhbWVfYnVyeSAyIC8vIHZhbHVlOiBzdHJpbmcKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NjcKCS8vIHRoaXMucGFyYW1ldGVyS2V5cyhrZXkpLnZhbHVlID0gdmFsdWUKCWJ5dGVjIDQgLy8gICJwYXJhbWV0ZXJLZXlzIgoJZnJhbWVfZGlnIDEgLy8ga2V5OiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgMiAvLyB2YWx1ZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYm94X3B1dAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo2OQoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMCAvLyAxCgkrCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0CgliICp3aGlsZV8wCgoqd2hpbGVfMF9lbmQ6CglyZXRzdWIKCi8vIHByaW50TW9kZWxQYXJhbXMoc3RyaW5nWzIwXSl2b2lkCiphYmlfcm91dGVfcHJpbnRNb2RlbFBhcmFtczoKCS8vIHBhcmFtS2V5czogc3RyaW5nWzIwXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoKCS8vIGV4ZWN1dGUgcHJpbnRNb2RlbFBhcmFtcyhzdHJpbmdbMjBdKXZvaWQKCWNhbGxzdWIgcHJpbnRNb2RlbFBhcmFtcwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gcHJpbnRNb2RlbFBhcmFtcyhwYXJhbUtleXM6IFN0YXRpY0FycmF5PHN0cmluZywgMjA+KTogdm9pZApwcmludE1vZGVsUGFyYW1zOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo3NQoJLy8gaSA9IDAKCWludGMgMSAvLyAwCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0Cgoqd2hpbGVfMToKCip3aGlsZV8xX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjc2CgkvLyBpIDwgcGFyYW1LZXlzLmxlbmd0aAoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglwdXNoaW50IDIwCgk8CglieiAqd2hpbGVfMV9lbmQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NzcKCS8vIGtleSA9IHBhcmFtS2V5c1tpXQoJZnJhbWVfZGlnIC0xIC8vIHBhcmFtS2V5czogU3RhdGljQXJyYXk8c3RyaW5nLCAyMD4KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDEgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMiAvLyAyCgkqIC8vIGFjYyAqIDIKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50YyAwIC8vICBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludGMgMiAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglmcmFtZV9idXJ5IDEgLy8ga2V5OiBzdHJpbmcKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NzgKCS8vIHZhbHVlID0gdGhpcy5wYXJhbWV0ZXJLZXlzKGtleSkudmFsdWUKCWJ5dGVjIDQgLy8gICJwYXJhbWV0ZXJLZXlzIgoJZnJhbWVfZGlnIDEgLy8ga2V5OiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMucGFyYW1ldGVyS2V5cyhrZXkpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglmcmFtZV9idXJ5IDIgLy8gdmFsdWU6IHN0cmluZwoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo3OQoJLy8gbG9nKGtleSkKCWZyYW1lX2RpZyAxIC8vIGtleTogc3RyaW5nCglsb2cKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6ODAKCS8vIGxvZyh2YWx1ZSkKCWZyYW1lX2RpZyAyIC8vIHZhbHVlOiBzdHJpbmcKCWxvZwoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo4MQoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWludGMgMCAvLyAxCgkrCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0CgliICp3aGlsZV8xCgoqd2hpbGVfMV9lbmQ6CglyZXRzdWIKCi8vIGNyZWF0ZUJveChwYXksKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUJveDoKCS8vIGV2YWx1YXRpb25NZXRyaWNzOiAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgNCAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChldmFsdWF0aW9uTWV0cmljcykgZm9yIGNyZWF0ZUJveCBtdXN0IGJlIGEgKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCWFzc2VydAoKCS8vIG1iclBheTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDEgKG1iclBheSkgZm9yIGNyZWF0ZUJveCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0ZUJveChwYXksKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBjcmVhdGVCb3gKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUJveChtYnJQYXk6IFBheVR4biwgZXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uKTogdm9pZApjcmVhdGVCb3g6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6ODcKCS8vIGFzc2VydCghdGhpcy5jbGFzc2lmaWNhdGlvblBlcmZvcm1hbmNlTWV0cmljcygncmNsYXNzTW9kZWwnKS5leGlzdHMpCglieXRlYyAxIC8vIDB4NjM2YzYxNzM3MzY5NjY2OTYzNjE3NDY5NmY2ZTUwNjU3MjY2NmY3MjZkNjE2ZTYzNjU0ZDY1NzQ3MjY5NjM3MzAwMGI3MjYzNmM2MTczNzM0ZDZmNjQ2NTZjCglib3hfbGVuCglzd2FwCglwb3AKCSEKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo4OAoJLy8gdmVyaWZ5UGF5VHhuKG1iclBheSwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogYm94TWJyLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLnR4bi5zZW5kZXIifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBBbW91bnQKCXB1c2hpbnQgMjgxMDAKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiYm94TWJyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5NAoJLy8gdGhpcy5jbGFzc2lmaWNhdGlvblBlcmZvcm1hbmNlTWV0cmljcygncmNsYXNzTW9kZWwnKS52YWx1ZSA9IGV2YWx1YXRpb25NZXRyaWNzCglieXRlYyAxIC8vIDB4NjM2YzYxNzM3MzY5NjY2OTYzNjE3NDY5NmY2ZTUwNjU3MjY2NmY3MjZkNjE2ZTYzNjU0ZDY1NzQ3MjY5NjM3MzAwMGI3MjYzNmM2MTczNzM0ZDZmNjQ2NTZjCglmcmFtZV9kaWcgLTIgLy8gZXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglib3hfcHV0CglyZXRzdWIKCi8vIHN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkCiphYmlfcm91dGVfc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhOgoJLy8gZXZhbHVhdGlvbk1ldHJpY3M6ICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA0IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGV2YWx1YXRpb25NZXRyaWNzKSBmb3Igc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhIG11c3QgYmUgYSAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYShldmFsdWF0aW9uTWV0cmljczogQ2xhc3NpZmljYXRpb24pOiB2b2lkCnN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYToKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5OQoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hcHAuY3JlYXRvciB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTAwCgkvLyB0aGlzLmNsYXNzaWZpY2F0aW9uUGVyZm9ybWFuY2VNZXRyaWNzKCdyY2xhc3NNb2RlbCcpLnZhbHVlID0gZXZhbHVhdGlvbk1ldHJpY3MKCWJ5dGVjIDEgLy8gMHg2MzZjNjE3MzczNjk2NjY5NjM2MTc0Njk2ZjZlNTA2NTcyNjY2ZjcyNmQ2MTZlNjM2NTRkNjU3NDcyNjk2MzczMDAwYjcyNjM2YzYxNzM3MzRkNmY2NDY1NmMKCWZyYW1lX2RpZyAtMSAvLyBldmFsdWF0aW9uTWV0cmljczogQ2xhc3NpZmljYXRpb24KCWJveF9wdXQKCXJldHN1YgoKLy8gc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkCiphYmlfcm91dGVfc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYToKCS8vIGV2YWx1YXRpb25NZXRyaWNzOiAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgNCAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChldmFsdWF0aW9uTWV0cmljcykgZm9yIHN0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWEgbXVzdCBiZSBhICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBleGVjdXRlIHN0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhKGV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uKTogdm9pZApzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEwNQoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hcHAuY3JlYXRvciB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTA2CgkvLyB0aGlzLnJlZ3Jlc3Npb25QZXJmb3JtYW5jZU1ldHJpY3MoJ3JlZ01vZGVsJykudmFsdWUgPSBldmFsdWF0aW9uTWV0cmljcwoJYnl0ZWMgMiAvLyAweDcyNjU2NzcyNjU3MzczNjk2ZjZlNTA2NTcyNjY2ZjcyNmQ2MTZlNjM2NTRkNjU3NDcyNjk2MzczMDAwODcyNjU2NzRkNmY2NDY1NmMKCWZyYW1lX2RpZyAtMSAvLyBldmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbgoJYm94X3B1dAoJcmV0c3ViCgovLyByZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXN0cmluZwoqYWJpX3JvdXRlX3JlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWE6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDcgLy8gMHgxNTFmN2M3NQoKCS8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6ICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA0IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MpIGZvciByZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhIG11c3QgYmUgYSAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSByZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXN0cmluZwoJY2FsbHN1YiByZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEobW9kZWxFdmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbik6IHN0cmluZwpyZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhOgoJcHJvdG8gMSAxCgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMTMKCS8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MuTVNFIDw9IGJhc2VsaW5lUmVnTWV0cmljcy5NU0UgJiYKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MuTUFFIDw9IGJhc2VsaW5lUmVnTWV0cmljcy5NQUUgJiYKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MuUk1TRSA8PSBiYXNlbGluZVJlZ01ldHJpY3MuUk1TRSAmJgoJLy8gICAgICAgbW9kZWxFdmFsdWF0aW9uTWV0cmljcy5DT0QgPj0gYmFzZWxpbmVSZWdNZXRyaWNzLkNPRAoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IFJlZ3Jlc3Npb24KCWV4dHJhY3QgMCA4CglidG9pCglieXRlYyAyIC8vIDB4NzI2NTY3NzI2NTczNzM2OTZmNmU1MDY1NzI2NjZmNzI2ZDYxNmU2MzY1NGQ2NTc0NzI2OTYzNzMwMDA4NzI2NTY3NGQ2ZjY0NjU2YwoJaW50YyAxIC8vIDAKCWludGMgMyAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPD0KCWR1cAoJYnogKnNraXBfYW5kMAoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IFJlZ3Jlc3Npb24KCWV4dHJhY3QgMTYgOAoJYnRvaQoJYnl0ZWMgMiAvLyAweDcyNjU2NzcyNjU3MzczNjk2ZjZlNTA2NTcyNjY2ZjcyNmQ2MTZlNjM2NTRkNjU3NDcyNjk2MzczMDAwODcyNjU2NzRkNmY2NDY1NmMKCWludGMgNiAvLyAgaGVhZE9mZnNldAoJaW50YyAzIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk8PQoJJiYKCipza2lwX2FuZDA6CglkdXAKCWJ6ICpza2lwX2FuZDEKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uCglleHRyYWN0IDggOAoJYnRvaQoJYnl0ZWMgMiAvLyAweDcyNjU2NzcyNjU3MzczNjk2ZjZlNTA2NTcyNjY2ZjcyNmQ2MTZlNjM2NTRkNjU3NDcyNjk2MzczMDAwODcyNjU2NzRkNmY2NDY1NmMKCWludGMgMyAvLyAgaGVhZE9mZnNldAoJaW50YyAzIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk8PQoJJiYKCipza2lwX2FuZDE6CglkdXAKCWJ6ICpza2lwX2FuZDIKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uCglleHRyYWN0IDI0IDgKCWJ0b2kKCWJ5dGVjIDIgLy8gMHg3MjY1Njc3MjY1NzM3MzY5NmY2ZTUwNjU3MjY2NmY3MjZkNjE2ZTYzNjU0ZDY1NzQ3MjY5NjM3MzAwMDg3MjY1Njc0ZDZmNjQ2NTZjCglwdXNoaW50IDI0IC8vIGhlYWRPZmZzZXQKCWludGMgMyAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPj0KCSYmCgoqc2tpcF9hbmQyOgoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMTgKCS8vIHJldHVybiAnTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbic7CglieXRlYyA4IC8vICAiTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbiIKCXJldHN1YgoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTIwCgkvLyByZXR1cm4gJ2ZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHMnOwoJYnl0ZWMgOSAvLyAgImZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHMiCglyZXRzdWIKCi8vIGNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSlzdHJpbmcKKmFiaV9yb3V0ZV9jbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWE6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDcgLy8gMHgxNTFmN2M3NQoKCS8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6ICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyA0IC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MpIGZvciBjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEgbXVzdCBiZSBhICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBleGVjdXRlIGNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSlzdHJpbmcKCWNhbGxzdWIgY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYShtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbik6IHN0cmluZwpjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWE6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTI1CgkvLyB2ZXJpZnlUeG4odGhpcy50eG4sIHsgc2VuZGVyOiB0aGlzLmFwcC5jcmVhdG9yIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ0aGlzLnR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5jcmVhdG9yIn0KCWFzc2VydAoKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTI4CgkvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLmFjY3VyYWN5ID49IGJhc2VsaW5lQ2xhc3NNZXRyaWNzLmFjY3VyYWN5ICYmCgkvLyAgICAgICBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLnByZWNpc2lvbiA+PSBiYXNlbGluZUNsYXNzTWV0cmljcy5wcmVjaXNpb24gJiYKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MucmVjYWxsID49IGJhc2VsaW5lQ2xhc3NNZXRyaWNzLnJlY2FsbAoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglleHRyYWN0IDAgOAoJYnRvaQoJYnl0ZWMgMSAvLyAweDYzNmM2MTczNzM2OTY2Njk2MzYxNzQ2OTZmNmU1MDY1NzI2NjZmNzI2ZDYxNmU2MzY1NGQ2NTc0NzI2OTYzNzMwMDBiNzI2MzZjNjE3MzczNGQ2ZjY0NjU2YwoJaW50YyAxIC8vIDAKCWludGMgMyAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPj0KCWR1cAoJYnogKnNraXBfYW5kMwoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglleHRyYWN0IDggOAoJYnRvaQoJYnl0ZWMgMSAvLyAweDYzNmM2MTczNzM2OTY2Njk2MzYxNzQ2OTZmNmU1MDY1NzI2NjZmNzI2ZDYxNmU2MzY1NGQ2NTc0NzI2OTYzNzMwMDBiNzI2MzZjNjE3MzczNGQ2ZjY0NjU2YwoJaW50YyAzIC8vICBoZWFkT2Zmc2V0CglpbnRjIDMgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCT49CgkmJgoKKnNraXBfYW5kMzoKCWR1cAoJYnogKnNraXBfYW5kNAoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglleHRyYWN0IDE2IDgKCWJ0b2kKCWJ5dGVjIDEgLy8gMHg2MzZjNjE3MzczNjk2NjY5NjM2MTc0Njk2ZjZlNTA2NTcyNjY2ZjcyNmQ2MTZlNjM2NTRkNjU3NDcyNjk2MzczMDAwYjcyNjM2YzYxNzM3MzRkNmY2NDY1NmMKCWludGMgNiAvLyAgaGVhZE9mZnNldAoJaW50YyAzIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk+PQoJJiYKCipza2lwX2FuZDQ6CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEzMgoJLy8gcmV0dXJuICdNb2RlbCBoYXMgYmVlbiBhY2NlcHRlZCBmb3IgZnVydGhlciBjb25zaWRlcmF0aW9uJzsKCWJ5dGVjIDggLy8gICJNb2RlbCBoYXMgYmVlbiBhY2NlcHRlZCBmb3IgZnVydGhlciBjb25zaWRlcmF0aW9uIgoJcmV0c3ViCgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMzQKCS8vIHJldHVybiAnZmFpbGVkIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cyc7CglieXRlYyA5IC8vICAiZmFpbGVkIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cyIKCXJldHN1YgoKLy8gc3VibWl0TG9jYWxVcGRhdGUoc3RyaW5nW10sdWludDY0W10sdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9zdWJtaXRMb2NhbFVwZGF0ZToKCS8vIGRhdGFTaXplOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBwYXJhbVZhbHVlczogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gcGFyYW1LZXlzOiBzdHJpbmdbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoKCS8vIGV4ZWN1dGUgc3VibWl0TG9jYWxVcGRhdGUoc3RyaW5nW10sdWludDY0W10sdWludDY0KXZvaWQKCWNhbGxzdWIgc3VibWl0TG9jYWxVcGRhdGUKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHN1Ym1pdExvY2FsVXBkYXRlKHBhcmFtS2V5czogc3RyaW5nW10sIHBhcmFtVmFsdWVzOiB1aW50NjRbXSwgZGF0YVNpemU6IHVpbnQ2NCk6IHZvaWQKc3VibWl0TG9jYWxVcGRhdGU6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiA1CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEzOQoJLy8gb2xkVG90YWwgPSB0aGlzLnRvdGFsRGF0YVNpemUoJ3RvdGFsRGF0YVNpemUnKS52YWx1ZQoJYnl0ZWMgMyAvLyAweDc0NmY3NDYxNmM0NDYxNzQ2MTUzNjk3YTY1MDAwZDc0NmY3NDYxNmM0NDYxNzQ2MTUzNjk3YTY1Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnRvdGFsRGF0YVNpemUoJ3RvdGFsRGF0YVNpemUnKS52YWx1ZQoJYXNzZXJ0CglidG9pCglmcmFtZV9idXJ5IDAgLy8gb2xkVG90YWw6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNDAKCS8vIHRoaXMudG90YWxEYXRhU2l6ZSgndG90YWxEYXRhU2l6ZScpLnZhbHVlID0gb2xkVG90YWwgKyBkYXRhU2l6ZQoJYnl0ZWMgMyAvLyAweDc0NmY3NDYxNmM0NDYxNzQ2MTUzNjk3YTY1MDAwZDc0NmY3NDYxNmM0NDYxNzQ2MTUzNjk3YTY1CglmcmFtZV9kaWcgMCAvLyBvbGRUb3RhbDogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gZGF0YVNpemU6IHVpbnQ2NAoJKwoJaXRvYgoJYm94X3B1dAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNDIKCS8vIGFzc2VydChwYXJhbUtleXMubGVuZ3RoID09PSBwYXJhbVZhbHVlcy5sZW5ndGgpCglmcmFtZV9kaWcgLTEgLy8gcGFyYW1LZXlzOiBzdHJpbmdbXQoJaW50YyAxIC8vIDAKCWV4dHJhY3RfdWludDE2CglmcmFtZV9kaWcgLTIgLy8gcGFyYW1WYWx1ZXM6IHVpbnQ2NFtdCglsZW4KCWludGMgMyAvLyA4CgkvCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE0NAoJLy8gaSA9IDAKCWludGMgMSAvLyAwCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0Cgoqd2hpbGVfMjoKCip3aGlsZV8yX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE0NQoJLy8gaSA8IHBhcmFtS2V5cy5sZW5ndGgKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHBhcmFtS2V5czogc3RyaW5nW10KCWludGMgMSAvLyAwCglleHRyYWN0X3VpbnQxNgoJPAoJYnogKndoaWxlXzJfZW5kCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE0NgoJLy8gcEtleSA9IHBhcmFtS2V5c1tpXQoJZnJhbWVfZGlnIC0xIC8vIHBhcmFtS2V5czogc3RyaW5nW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDEgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyAyCgkqIC8vIGFjYyAqIDIKCSsKCWludGMgMiAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJaW50YyAyIC8vIDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludGMgMCAvLyAgZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnRjIDIgLy8gMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJZnJhbWVfYnVyeSAyIC8vIHBLZXk6IHN0cmluZwoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNDcKCS8vIHBWYWwgPSBwYXJhbVZhbHVlc1tpXQoJZnJhbWVfZGlnIC0yIC8vIHBhcmFtVmFsdWVzOiB1aW50NjRbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMSAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAzIC8vIDgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAzIC8vIDgKCWV4dHJhY3QzCglidG9pCglmcmFtZV9idXJ5IDMgLy8gcFZhbDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE0OQoJLy8gb2xkU3VtID0gdGhpcy5hZ2dyZWdhdG9yUGFyYW1ldGVyU3VtcyhwS2V5KS52YWx1ZQoJYnl0ZWMgNiAvLyAgImFnZ3JTdW1zIgoJZnJhbWVfZGlnIDIgLy8gcEtleTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmFnZ3JlZ2F0b3JQYXJhbWV0ZXJTdW1zKHBLZXkpLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWZyYW1lX2J1cnkgNCAvLyBvbGRTdW06IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNTAKCS8vIG5ld1N1bSA9IG9sZFN1bSArIHBWYWwgKiBkYXRhU2l6ZQoJZnJhbWVfZGlnIDQgLy8gb2xkU3VtOiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIHBWYWw6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGRhdGFTaXplOiB1aW50NjQKCSoKCSsKCWZyYW1lX2J1cnkgNSAvLyBuZXdTdW06IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNTIKCS8vIHRoaXMuYWdncmVnYXRvclBhcmFtZXRlclN1bXMocEtleSkudmFsdWUgPSBuZXdTdW0KCWJ5dGVjIDYgLy8gICJhZ2dyU3VtcyIKCWZyYW1lX2RpZyAyIC8vIHBLZXk6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfZGlnIDUgLy8gbmV3U3VtOiB1aW50NjQKCWl0b2IKCWJveF9wdXQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTUzCgkvLyBpID0gaSArIDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAwIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgKndoaWxlXzIKCip3aGlsZV8yX2VuZDoKCXJldHN1YgoKLy8gZmluYWxpemVGZWRBdmcoc3RyaW5nW10pdm9pZAoqYWJpX3JvdXRlX2ZpbmFsaXplRmVkQXZnOgoJLy8gcGFyYW1LZXlzOiBzdHJpbmdbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoKCS8vIGV4ZWN1dGUgZmluYWxpemVGZWRBdmcoc3RyaW5nW10pdm9pZAoJY2FsbHN1YiBmaW5hbGl6ZUZlZEF2ZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZmluYWxpemVGZWRBdmcocGFyYW1LZXlzOiBzdHJpbmdbXSk6IHZvaWQKZmluYWxpemVGZWRBdmc6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiA0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE1OQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvcikKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNjEKCS8vIHRvdGFsID0gdGhpcy50b3RhbERhdGFTaXplKCd0b3RhbERhdGFTaXplJykudmFsdWUKCWJ5dGVjIDMgLy8gMHg3NDZmNzQ2MTZjNDQ2MTc0NjE1MzY5N2E2NTAwMGQ3NDZmNzQ2MTZjNDQ2MTc0NjE1MzY5N2E2NQoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy50b3RhbERhdGFTaXplKCd0b3RhbERhdGFTaXplJykudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfYnVyeSAwIC8vIHRvdGFsOiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTYyCgkvLyBhc3NlcnQodG90YWwgPiAwLCAnTm8gZGF0YSBoYXMgYmVlbiBhZ2dyZWdhdGVkIHlldC4nKQoJZnJhbWVfZGlnIDAgLy8gdG90YWw6IHVpbnQ2NAoJaW50YyAxIC8vIDAKCT4KCgkvLyBObyBkYXRhIGhhcyBiZWVuIGFnZ3JlZ2F0ZWQgeWV0LgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE2NAoJLy8gaSA9IDAKCWludGMgMSAvLyAwCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0Cgoqd2hpbGVfMzoKCip3aGlsZV8zX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE2NQoJLy8gaSA8IHBhcmFtS2V5cy5sZW5ndGgKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHBhcmFtS2V5czogc3RyaW5nW10KCWludGMgMSAvLyAwCglleHRyYWN0X3VpbnQxNgoJPAoJYnogKndoaWxlXzNfZW5kCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE2NgoJLy8gcEtleSA9IHBhcmFtS2V5c1tpXQoJZnJhbWVfZGlnIC0xIC8vIHBhcmFtS2V5czogc3RyaW5nW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDEgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyAyCgkqIC8vIGFjYyAqIDIKCSsKCWludGMgMiAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJdW5jb3ZlciAyCglleHRyYWN0X3VpbnQxNgoJaW50YyAyIC8vIDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludGMgMCAvLyAgZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnRjIDIgLy8gMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJZnJhbWVfYnVyeSAyIC8vIHBLZXk6IHN0cmluZwoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNjcKCS8vIHN1bSA9IHRoaXMuYWdncmVnYXRvclBhcmFtZXRlclN1bXMocEtleSkudmFsdWUKCWJ5dGVjIDYgLy8gICJhZ2dyU3VtcyIKCWZyYW1lX2RpZyAyIC8vIHBLZXk6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5hZ2dyZWdhdG9yUGFyYW1ldGVyU3VtcyhwS2V5KS52YWx1ZQoJYXNzZXJ0CglidG9pCglmcmFtZV9idXJ5IDMgLy8gc3VtOiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTY5CgkvLyBmZWRBdmdWYWx1ZSA9IHN1bSAvIHRvdGFsCglmcmFtZV9kaWcgMyAvLyBzdW06IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gdG90YWw6IHVpbnQ2NAoJLwoJZnJhbWVfYnVyeSA0IC8vIGZlZEF2Z1ZhbHVlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTcxCgkvLyB0aGlzLnBhcmFtZXRlcktleXMocEtleSkudmFsdWUgPSBmZWRBdmdWYWx1ZS50b1N0cmluZygpCglieXRlYyA0IC8vICAicGFyYW1ldGVyS2V5cyIKCWZyYW1lX2RpZyAyIC8vIHBLZXk6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyA0IC8vIGZlZEF2Z1ZhbHVlOiB1aW50NjQKCWNhbGxzdWIgKml0b2EKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE3MwoJLy8gaSA9IGkgKyAxCglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMCAvLyAxCgkrCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0CgliICp3aGlsZV8zCgoqd2hpbGVfM19lbmQ6CglyZXRzdWIKCi8vIGRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfZGVsZXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGRlbGV0ZUFwcGxpY2F0aW9uCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBkZWxldGVBcHBsaWNhdGlvbigpOiB2b2lkCmRlbGV0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE3OQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvcikKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHgxMTU3NTZkYiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4MTUzN2MxOTQgLy8gbWV0aG9kICJwcmludEhhc2goKXN0cmluZyIKCXB1c2hieXRlcyAweDRlNDI4Zjg2IC8vIG1ldGhvZCAic3RvcmVNb2RlbFBhcmFtcyhzdHJpbmdbXSxzdHJpbmdbXSl2b2lkIgoJcHVzaGJ5dGVzIDB4MTI0NGUzMzIgLy8gbWV0aG9kICJwcmludE1vZGVsUGFyYW1zKHN0cmluZ1syMF0pdm9pZCIKCXB1c2hieXRlcyAweGQxNTRjNzZlIC8vIG1ldGhvZCAiY3JlYXRlQm94KHBheSwodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkIgoJcHVzaGJ5dGVzIDB4NjEyN2YwN2UgLy8gbWV0aG9kICJzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZCIKCXB1c2hieXRlcyAweDdkZTJkZmNkIC8vIG1ldGhvZCAic3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkIgoJcHVzaGJ5dGVzIDB4YmY4YWRlZGYgLy8gbWV0aG9kICJyZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXN0cmluZyIKCXB1c2hieXRlcyAweGQxYTljMWViIC8vIG1ldGhvZCAiY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXN0cmluZyIKCXB1c2hieXRlcyAweGVkZTdlODc4IC8vIG1ldGhvZCAic3VibWl0TG9jYWxVcGRhdGUoc3RyaW5nW10sdWludDY0W10sdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHhhNzA2NmI3ZCAvLyBtZXRob2QgImZpbmFsaXplRmVkQXZnKHN0cmluZ1tdKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3ByaW50SGFzaCAqYWJpX3JvdXRlX3N0b3JlTW9kZWxQYXJhbXMgKmFiaV9yb3V0ZV9wcmludE1vZGVsUGFyYW1zICphYmlfcm91dGVfY3JlYXRlQm94ICphYmlfcm91dGVfc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhICphYmlfcm91dGVfc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYSAqYWJpX3JvdXRlX3JlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEgKmFiaV9yb3V0ZV9jbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEgKmFiaV9yb3V0ZV9zdWJtaXRMb2NhbFVwZGF0ZSAqYWJpX3JvdXRlX2ZpbmFsaXplRmVkQXZnCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCXB1c2hieXRlcyAweDE3NDc0MDViIC8vIG1ldGhvZCAidXBkYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgVXBkYXRlQXBwbGljYXRpb24KCWVycgoKKmNhbGxfRGVsZXRlQXBwbGljYXRpb246CglwdXNoYnl0ZXMgMHgyNDg3YzMyYyAvLyBtZXRob2QgImRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIERlbGV0ZUFwcGxpY2F0aW9uCgllcnIKCippbnRUb0FzY2lpOgoJcHJvdG8gMSAxCglwdXNoYnl0ZXMgMHgzMDMxMzIzMzM0MzUzNjM3MzgzOSAvLyAiMDEyMzQ1Njc4OSIKCWZyYW1lX2RpZyAtMSAvLyBpOiB1aW50NjQKCWludGMgMCAvLyAxCglleHRyYWN0MwoJcmV0c3ViCgkKCippdG9hOgoJcHJvdG8gMSAxCglmcmFtZV9kaWcgLTEgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMAoJPT0KCWJ6ICppdG9hX2lmX2VuZAoJcHVzaGJ5dGVzIDB4MzAKCXJldHN1YgoKKml0b2FfaWZfZW5kOgoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50YyA1IC8vIDEwCgkvCglpbnRjIDEgLy8gMAoJPgoJYnogKml0b2FfdGVybmFyeV9mYWxzZQoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50YyA1IC8vIDEwCgkvCgljYWxsc3ViICppdG9hCgliICppdG9hX3Rlcm5hcnlfZW5kCgoqaXRvYV90ZXJuYXJ5X2ZhbHNlOgoJYnl0ZWMgMCAvLyAgIiIKCippdG9hX3Rlcm5hcnlfZW5kOgoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50YyA1IC8vIDEwCgklCgljYWxsc3ViICppbnRUb0FzY2lpCgljb25jYXQKCXJldHN1Yg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAQACCCAKECYKAC1jbGFzc2lmaWNhdGlvblBlcmZvcm1hbmNlTWV0cmljcwALcmNsYXNzTW9kZWwmcmVncmVzc2lvblBlcmZvcm1hbmNlTWV0cmljcwAIcmVnTW9kZWwcdG90YWxEYXRhU2l6ZQANdG90YWxEYXRhU2l6ZQ1wYXJhbWV0ZXJLZXlzCGlwZnNIYXNoCGFnZ3JTdW1zBBUffHUxTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbh9mYWlsZWQgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnRzMRgUgQYLMRkIjQwEAQAAAAAAAARXBGUD8wAAAAAAAAAAAAAANhoBVwIAiAACIkOKAQAnBYv/SRUWVwYCTFBniTYaAVcCAIgAAiJDigEAMQA2MgByB0gSRCcFi/9JFRZXBgJMUGeJJweIAAxJFRZXBgJMUFCwIkOKAAEnBWRXAgCJNhoCNhoBiAACIkOKAgAoRwIxADYyAHIHSBJEi/8jWYv+I1kSRCOMAIsAi/8jWQxBAGyL/zX/I4sAJAsIJAg0/zT/TwJZJAhJNP9MWSILJAhYVwIAjAGL/jX/I4sAJAsIJAg0/zT/TwJZJAhJNP9MWSILJAhYVwIAjAInBIsBSRUWVwYCTFBQSbxIiwJJFRZXBgJMUL+LACIIjABC/4qJNhoBiAACIkOKAQAoRwIjjACLAIEUDEEAQ4v/Nf8jiwAkCwg0/zT/TwJZSTT/TFkiCyQIWFcCAIwBJwSLAUkVFlcGAkxQUL5EVwIAjAKLAbCLArCLACIIjABC/7WJNhoBSRUhBBJEMRYiCUk4ECISRIgAAiJDigIAKb1MSBREi/84ADEAEkSL/zgHMgoSRIv/OAiBxNsBEkQpi/6/iTYaAUkVIQQSRIgAAiJDigEAMQA2MgByB0gSRCmL/7+JNhoBSRUhBBJEiAACIkOKAQAxADYyAHIHSBJEKov/v4knBzYaAUkVIQQSRIgADEkVFlcGAkxQULAiQ4oBAYv/VwAIFyojJboXDklBAA6L/1cQCBcqIQYluhcOEElBAA2L/1cICBcqJSW6Fw4QSUEADov/VxgIFyqBGCW6Fw8QQQADJwiJJwmJJwc2GgFJFSEEEkSIAAxJFRZXBgJMUFCwIkOKAQExADYyAHIHSBJEi/9XAAgXKSMluhcPSUEADYv/VwgIFyklJboXDxBJQQAOi/9XEAgXKSEGJboXDxBBAAMnCIknCYk2GgMXNhoCVwIANhoBiAACIkOKAwAoRwUrvkQXjAAriwCL/QgWv4v/I1mL/hUlChJEI4wBiwGL/yNZDEEAbIv/Nf8jiwEkCwgkCDT/NP9PAlkkCEk0/0xZIgskCFhXAgCMAov+Nf8jiwElCwg0/0wlWBeMAycGiwJJFRZXBgJMUFC+RBeMBIsEiwOL/QsIjAUnBosCSRUWVwYCTFBQiwUWv4sBIgiMAUL/iok2GgGIAAIiQ4oBAChHBDEANjIAcgdIEkQrvkQXjACLACMNRCOMAYsBi/8jWQxBAGSL/zX/I4sBJAsIJAg0/zT/TwJZJAhJNP9MWSILJAhYVwIAjAInBosCSRUWVwYCTFBQvkQXjAOLA4sACowEJwSLAkkVFlcGAkxQUEm8SIsEiAC6SRUWVwYCTFC/iwEiCIwBQv+SiYgAAiJDigAAMQA2MgByB0gSRImABBFXVts2GgCOAfwBAIAEFTfBlIAETkKPhoAEEkTjMoAE0VTHboAEYSfwfoAEfeLfzYAEv4re34AE0anB64AE7efoeIAEpwZrfTYaAI4K++38CPyn/QT9RP1k/YT96/5K/vUAgAQXR0BbNhoAjgH7uQCABCSHwyw2GgCOAf9uAIoBAYAKMDEyMzQ1Njc4OYv/IliJigEBi/8jEkEABIABMImL/yEFCiMNQQALi/8hBQqI/+BCAAEoi/8hBRiI/8BQiQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'printHash()string': Record<string, never>
    'storeModelParams(string[],string[])void': {
      paramkeys: string[]
      paramValues: string[]
    }
    'printModelParams(string[20])void': {
      paramKeys: [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string]
    }
    'createBox(pay,(uint64,uint64,uint64,uint64))void': {
      mbrPay: AppMethodCallTransactionArgument
      evaluationMetrics: Classification
    }
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Classification
    }
    'submitLocalUpdate(string[],uint64[],uint64)void': {
      paramKeys: string[]
      paramValues: bigint[] | number[]
      dataSize: bigint | number
    }
    'finalizeFedAvg(string[])void': {
      paramKeys: string[]
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'printHash()string': []
    'storeModelParams(string[],string[])void': [paramkeys: string[], paramValues: string[]]
    'printModelParams(string[20])void': [paramKeys: [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string]]
    'createBox(pay,(uint64,uint64,uint64,uint64))void': [mbrPay: AppMethodCallTransactionArgument, evaluationMetrics: Classification]
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Classification]
    'submitLocalUpdate(string[],uint64[],uint64)void': [paramKeys: string[], paramValues: bigint[] | number[], dataSize: bigint | number]
    'finalizeFedAvg(string[])void': [paramKeys: string[]]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'printHash()string': string
  'storeModelParams(string[],string[])void': void
  'printModelParams(string[20])void': void
  'createBox(pay,(uint64,uint64,uint64,uint64))void': void
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'submitLocalUpdate(string[],uint64[],uint64)void': void
  'finalizeFedAvg(string[])void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'printHash()string' | 'printHash', {
      argsObj: DmlChainArgs['obj']['printHash()string']
      argsTuple: DmlChainArgs['tuple']['printHash()string']
      returns: DmlChainReturns['printHash()string']
    }>
    & Record<'storeModelParams(string[],string[])void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(string[],string[])void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(string[],string[])void']
      returns: DmlChainReturns['storeModelParams(string[],string[])void']
    }>
    & Record<'printModelParams(string[20])void' | 'printModelParams', {
      argsObj: DmlChainArgs['obj']['printModelParams(string[20])void']
      argsTuple: DmlChainArgs['tuple']['printModelParams(string[20])void']
      returns: DmlChainReturns['printModelParams(string[20])void']
    }>
    & Record<'createBox(pay,(uint64,uint64,uint64,uint64))void' | 'createBox', {
      argsObj: DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['createBox(pay,(uint64,uint64,uint64,uint64))void']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'submitLocalUpdate(string[],uint64[],uint64)void' | 'submitLocalUpdate', {
      argsObj: DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void']
      argsTuple: DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']
      returns: DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void']
    }>
    & Record<'finalizeFedAvg(string[])void' | 'finalizeFedAvg', {
      argsObj: DmlChainArgs['obj']['finalizeFedAvg(string[])void']
      argsTuple: DmlChainArgs['tuple']['finalizeFedAvg(string[])void']
      returns: DmlChainReturns['finalizeFedAvg(string[])void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        parameterKeys: Map<string, string>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
        aggregatorParameterSums: Map<string, bigint>
        totalDataSize: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the printHash()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printHash()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(string[],string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(string[],string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramkeys, params.args.paramValues],
    }
  }
  /**
   * Constructs a no op call for the printModelParams(string[20])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printModelParams(params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printModelParams(string[20])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys],
    }
  }
  /**
   * Constructs a no op call for the createBox(pay,(uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBox(params: CallParams<DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBox(pay,(uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the submitLocalUpdate(string[],uint64[],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitLocalUpdate(string[],uint64[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys, params.args.paramValues, params.args.dataSize],
    }
  }
  /**
   * Constructs a no op call for the finalizeFedAvg(string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeFedAvg(string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printModelParams(string[20])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printModelParams: (params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `createBox(pay,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBox: (params: CallParams<DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.createBox(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printModelParams(string[20])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printModelParams: (params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `createBox(pay,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBox: (params: CallParams<DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.createBox(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printHash: async (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printHash(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['printHash()string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(string[],string[])void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printModelParams(string[20])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printModelParams: async (params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['printModelParams(string[20])void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `createBox(pay,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBox: async (params: CallParams<DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.createBox(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['createBox(pay,(uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitLocalUpdate: async (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.submitLocalUpdate(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalizeFedAvg: async (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.finalizeFedAvg(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['finalizeFedAvg(string[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the parameterKeys map in box state
       */
      parameterKeys: {
        /**
         * Get all current values of the parameterKeys map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("parameterKeys")) as Map<string, string> },
        /**
         * Get a current value of the parameterKeys map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("parameterKeys", key) as string | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
      /**
       * Get values from the aggregatorParameterSums map in box state
       */
      aggregatorParameterSums: {
        /**
         * Get all current values of the aggregatorParameterSums map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("aggregatorParameterSums")) as Map<string, bigint> },
        /**
         * Get a current value of the aggregatorParameterSums map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("aggregatorParameterSums", key) as bigint | undefined },
      },
      /**
       * Get values from the totalDataSize map in box state
       */
      totalDataSize: {
        /**
         * Get all current values of the totalDataSize map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("totalDataSize")) as Map<string, bigint> },
        /**
         * Get a current value of the totalDataSize map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("totalDataSize", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a printHash()string method call against the DMLChain contract
       */
      printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('printHash()string', v))
        return this
      },
      /**
       * Add a storeModelParams(string[],string[])void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a printModelParams(string[20])void method call against the DMLChain contract
       */
      printModelParams(params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createBox(pay,(uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      createBox(params: CallParams<DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a submitLocalUpdate(string[],uint64[],uint64)void method call against the DMLChain contract
       */
      submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitLocalUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeFedAvg(string[])void method call against the DMLChain contract
       */
      finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeFedAvg(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the printHash()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printHash(params?: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']>): DmlChainComposer<[...TReturns, DmlChainReturns['printHash()string'] | undefined]>

  /**
   * Calls the storeModelParams(string[],string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(string[],string[])void'] | undefined]>

  /**
   * Calls the printModelParams(string[20])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printModelParams(params?: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['printModelParams(string[20])void'] | undefined]>

  /**
   * Calls the createBox(pay,(uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBox(params?: CallParams<DmlChainArgs['obj']['createBox(pay,(uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['createBox(pay,(uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['createBox(pay,(uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the submitLocalUpdate(string[],uint64[],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitLocalUpdate(params?: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void'] | undefined]>

  /**
   * Calls the finalizeFedAvg(string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeFedAvg(params?: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['finalizeFedAvg(string[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

