/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"assignRewardPool","args":[{"name":"rewardPoolAmount","type":"uint64"},{"name":"rewardPoolTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"checkBalance","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getClassificationCriteria","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"mbrPay","type":"pay"},{"name":"Address","type":"address"},{"name":"paramsData","type":"(string,string,uint64,uint64)","struct":"ParamsData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string,uint64,uint64)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"distributeRewards","args":[{"name":"contributor","type":"(uint64)","struct":"rewardCalculation"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"ParamsData":[{"name":"paramHash","type":"string"},{"name":"paramKey","type":"string"},{"name":"score","type":"uint64"},{"name":"reputation","type":"uint64"}],"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}],"rewardCalculation":[{"name":"score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"},"rewardPool":{"key":"cmV3YXJkUG9vbA==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"paramsData":{"keyType":"address","valueType":"ParamsData"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:35","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:35","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"teal":3,"source":"contracts\\Moderator.algo.ts:35","pc":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76]},{"teal":15,"source":"contracts\\Moderator.algo.ts:35","pc":[77,78]},{"teal":16,"source":"contracts\\Moderator.algo.ts:35","pc":[79]},{"teal":17,"source":"contracts\\Moderator.algo.ts:35","pc":[80,81]},{"teal":18,"source":"contracts\\Moderator.algo.ts:35","pc":[82]},{"teal":19,"source":"contracts\\Moderator.algo.ts:35","pc":[83,84]},{"teal":20,"source":"contracts\\Moderator.algo.ts:35","pc":[85]},{"teal":21,"source":"contracts\\Moderator.algo.ts:35","pc":[86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111]},{"teal":25,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[112]},{"teal":30,"source":"contracts\\Moderator.algo.ts:50","pc":[113,114,115]},{"teal":31,"source":"contracts\\Moderator.algo.ts:50","pc":[116,117,118]},{"teal":34,"source":"contracts\\Moderator.algo.ts:50","pc":[119,120,121]},{"teal":35,"source":"contracts\\Moderator.algo.ts:50","pc":[122]},{"teal":36,"source":"contracts\\Moderator.algo.ts:50","pc":[123]},{"teal":40,"source":"contracts\\Moderator.algo.ts:50","pc":[124,125,126]},{"teal":44,"source":"contracts\\Moderator.algo.ts:51","pc":[127,128]},{"teal":45,"source":"contracts\\Moderator.algo.ts:51","pc":[129,130]},{"teal":46,"source":"contracts\\Moderator.algo.ts:51","pc":[131]},{"teal":47,"source":"contracts\\Moderator.algo.ts:51","pc":[132]},{"teal":48,"source":"contracts\\Moderator.algo.ts:51","pc":[133]},{"teal":49,"source":"contracts\\Moderator.algo.ts:51","pc":[134,135,136]},{"teal":50,"source":"contracts\\Moderator.algo.ts:51","pc":[137]},{"teal":51,"source":"contracts\\Moderator.algo.ts:51","pc":[138]},{"teal":52,"source":"contracts\\Moderator.algo.ts:51","pc":[139]},{"teal":53,"source":"contracts\\Moderator.algo.ts:50","pc":[140]},{"teal":58,"source":"contracts\\Moderator.algo.ts:55","pc":[141,142,143]},{"teal":59,"source":"contracts\\Moderator.algo.ts:55","pc":[144,145,146]},{"teal":62,"source":"contracts\\Moderator.algo.ts:55","pc":[147,148,149]},{"teal":63,"source":"contracts\\Moderator.algo.ts:55","pc":[150]},{"teal":64,"source":"contracts\\Moderator.algo.ts:55","pc":[151]},{"teal":68,"source":"contracts\\Moderator.algo.ts:55","pc":[152,153,154]},{"teal":72,"source":"contracts\\Moderator.algo.ts:56","pc":[155,156]},{"teal":73,"source":"contracts\\Moderator.algo.ts:56","pc":[157,158,159]},{"teal":74,"source":"contracts\\Moderator.algo.ts:56","pc":[160,161]},{"teal":75,"source":"contracts\\Moderator.algo.ts:56","pc":[162]},{"teal":76,"source":"contracts\\Moderator.algo.ts:56","pc":[163]},{"teal":77,"source":"contracts\\Moderator.algo.ts:56","pc":[164]},{"teal":81,"source":"contracts\\Moderator.algo.ts:57","pc":[165,166]},{"teal":82,"source":"contracts\\Moderator.algo.ts:57","pc":[167,168]},{"teal":83,"source":"contracts\\Moderator.algo.ts:57","pc":[169]},{"teal":84,"source":"contracts\\Moderator.algo.ts:57","pc":[170]},{"teal":85,"source":"contracts\\Moderator.algo.ts:57","pc":[171]},{"teal":86,"source":"contracts\\Moderator.algo.ts:57","pc":[172,173,174]},{"teal":87,"source":"contracts\\Moderator.algo.ts:57","pc":[175]},{"teal":88,"source":"contracts\\Moderator.algo.ts:57","pc":[176]},{"teal":89,"source":"contracts\\Moderator.algo.ts:57","pc":[177]},{"teal":90,"source":"contracts\\Moderator.algo.ts:55","pc":[178]},{"teal":95,"source":"contracts\\Moderator.algo.ts:61","pc":[179]},{"teal":98,"source":"contracts\\Moderator.algo.ts:61","pc":[180,181]},{"teal":99,"source":"contracts\\Moderator.algo.ts:61","pc":[182]},{"teal":100,"source":"contracts\\Moderator.algo.ts:61","pc":[183]},{"teal":101,"source":"contracts\\Moderator.algo.ts:61","pc":[184]},{"teal":102,"source":"contracts\\Moderator.algo.ts:61","pc":[185,186]},{"teal":103,"source":"contracts\\Moderator.algo.ts:61","pc":[187]},{"teal":104,"source":"contracts\\Moderator.algo.ts:61","pc":[188]},{"teal":107,"source":"contracts\\Moderator.algo.ts:61","errorMessage":"argument 0 (rewardPoolTxn) for assignRewardPool must be a pay transaction","pc":[189]},{"teal":110,"source":"contracts\\Moderator.algo.ts:61","pc":[190,191,192]},{"teal":111,"source":"contracts\\Moderator.algo.ts:61","pc":[193]},{"teal":114,"source":"contracts\\Moderator.algo.ts:61","pc":[194,195,196]},{"teal":115,"source":"contracts\\Moderator.algo.ts:61","pc":[197]},{"teal":116,"source":"contracts\\Moderator.algo.ts:61","pc":[198]},{"teal":117,"source":"contracts\\Moderator.algo.ts:61","pc":[199]},{"teal":118,"source":"contracts\\Moderator.algo.ts:61","pc":[200]},{"teal":119,"source":"contracts\\Moderator.algo.ts:61","pc":[201]},{"teal":123,"source":"contracts\\Moderator.algo.ts:61","pc":[202,203,204]},{"teal":132,"source":"contracts\\Moderator.algo.ts:62","pc":[205,206]},{"teal":133,"source":"contracts\\Moderator.algo.ts:63","pc":[207,208]},{"teal":134,"source":"contracts\\Moderator.algo.ts:63","pc":[209,210]},{"teal":135,"source":"contracts\\Moderator.algo.ts:63","pc":[211]},{"teal":138,"source":"contracts\\Moderator.algo.ts:63","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[212]},{"teal":141,"source":"contracts\\Moderator.algo.ts:62","pc":[213,214]},{"teal":142,"source":"contracts\\Moderator.algo.ts:64","pc":[215,216]},{"teal":143,"source":"contracts\\Moderator.algo.ts:64","pc":[217,218]},{"teal":144,"source":"contracts\\Moderator.algo.ts:64","pc":[219]},{"teal":147,"source":"contracts\\Moderator.algo.ts:64","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[220]},{"teal":150,"source":"contracts\\Moderator.algo.ts:62","pc":[221,222]},{"teal":151,"source":"contracts\\Moderator.algo.ts:65","pc":[223,224]},{"teal":152,"source":"contracts\\Moderator.algo.ts:65","pc":[225,226]},{"teal":153,"source":"contracts\\Moderator.algo.ts:65","pc":[227]},{"teal":156,"source":"contracts\\Moderator.algo.ts:65","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"amount\",\"expected\":\"rewardPoolAmount\"}","pc":[228]},{"teal":160,"source":"contracts\\Moderator.algo.ts:67","pc":[229,230]},{"teal":161,"source":"contracts\\Moderator.algo.ts:67","pc":[231,232]},{"teal":162,"source":"contracts\\Moderator.algo.ts:67","pc":[233]},{"teal":166,"source":"contracts\\Moderator.algo.ts:68","pc":[234,235]},{"teal":167,"source":"contracts\\Moderator.algo.ts:68","pc":[236]},{"teal":168,"source":"contracts\\Moderator.algo.ts:61","pc":[237]},{"teal":173,"source":"contracts\\Moderator.algo.ts:72","pc":[238]},{"teal":176,"source":"contracts\\Moderator.algo.ts:72","pc":[239,240,241]},{"teal":177,"source":"contracts\\Moderator.algo.ts:72","pc":[242]},{"teal":178,"source":"contracts\\Moderator.algo.ts:72","pc":[243]},{"teal":179,"source":"contracts\\Moderator.algo.ts:72","pc":[244]},{"teal":180,"source":"contracts\\Moderator.algo.ts:72","pc":[245]},{"teal":181,"source":"contracts\\Moderator.algo.ts:72","pc":[246]},{"teal":185,"source":"contracts\\Moderator.algo.ts:72","pc":[247,248,249]},{"teal":189,"source":"contracts\\Moderator.algo.ts:73","pc":[250,251]},{"teal":190,"source":"contracts\\Moderator.algo.ts:73","pc":[252,253]},{"teal":191,"source":"contracts\\Moderator.algo.ts:73","pc":[254]},{"teal":192,"source":"contracts\\Moderator.algo.ts:72","pc":[255]},{"teal":197,"source":"contracts\\Moderator.algo.ts:77","pc":[256,257]},{"teal":198,"source":"contracts\\Moderator.algo.ts:77","pc":[258]},{"teal":199,"source":"contracts\\Moderator.algo.ts:77","pc":[259]},{"teal":200,"source":"contracts\\Moderator.algo.ts:77","pc":[260]},{"teal":201,"source":"contracts\\Moderator.algo.ts:77","pc":[261,262]},{"teal":202,"source":"contracts\\Moderator.algo.ts:77","pc":[263]},{"teal":203,"source":"contracts\\Moderator.algo.ts:77","pc":[264]},{"teal":206,"source":"contracts\\Moderator.algo.ts:77","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[265]},{"teal":209,"source":"contracts\\Moderator.algo.ts:77","pc":[266,267,268]},{"teal":210,"source":"contracts\\Moderator.algo.ts:77","pc":[269]},{"teal":211,"source":"contracts\\Moderator.algo.ts:77","pc":[270]},{"teal":212,"source":"contracts\\Moderator.algo.ts:77","pc":[271]},{"teal":213,"source":"contracts\\Moderator.algo.ts:77","pc":[272]},{"teal":216,"source":"contracts\\Moderator.algo.ts:77","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[273]},{"teal":219,"source":"contracts\\Moderator.algo.ts:77","pc":[274,275,276]},{"teal":220,"source":"contracts\\Moderator.algo.ts:77","pc":[277]},{"teal":221,"source":"contracts\\Moderator.algo.ts:77","pc":[278]},{"teal":225,"source":"contracts\\Moderator.algo.ts:77","pc":[279,280,281]},{"teal":230,"source":"contracts\\Moderator.algo.ts:78","pc":[282,283]},{"teal":231,"source":"contracts\\Moderator.algo.ts:78","pc":[284,285,286]},{"teal":232,"source":"contracts\\Moderator.algo.ts:78","pc":[287,288]},{"teal":233,"source":"contracts\\Moderator.algo.ts:78","pc":[289]},{"teal":234,"source":"contracts\\Moderator.algo.ts:78","pc":[290]},{"teal":237,"source":"contracts\\Moderator.algo.ts:78","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[291]},{"teal":246,"source":"contracts\\Moderator.algo.ts:79","pc":[292,293]},{"teal":247,"source":"contracts\\Moderator.algo.ts:80","pc":[294,295]},{"teal":248,"source":"contracts\\Moderator.algo.ts:80","pc":[296,297]},{"teal":249,"source":"contracts\\Moderator.algo.ts:80","pc":[298]},{"teal":252,"source":"contracts\\Moderator.algo.ts:80","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[299]},{"teal":255,"source":"contracts\\Moderator.algo.ts:79","pc":[300,301]},{"teal":256,"source":"contracts\\Moderator.algo.ts:81","pc":[302,303]},{"teal":257,"source":"contracts\\Moderator.algo.ts:81","pc":[304,305]},{"teal":258,"source":"contracts\\Moderator.algo.ts:81","pc":[306]},{"teal":261,"source":"contracts\\Moderator.algo.ts:81","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[307]},{"teal":264,"source":"contracts\\Moderator.algo.ts:79","pc":[308,309]},{"teal":265,"source":"contracts\\Moderator.algo.ts:82","pc":[310,311]},{"teal":266,"source":"contracts\\Moderator.algo.ts:82","pc":[312,313]},{"teal":267,"source":"contracts\\Moderator.algo.ts:82","pc":[314]},{"teal":270,"source":"contracts\\Moderator.algo.ts:82","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[315]},{"teal":274,"source":"contracts\\Moderator.algo.ts:85","pc":[316]},{"teal":275,"source":"contracts\\Moderator.algo.ts:85","pc":[317]},{"teal":276,"source":"contracts\\Moderator.algo.ts:85","pc":[318]},{"teal":277,"source":"contracts\\Moderator.algo.ts:85","pc":[319]},{"teal":281,"source":"contracts\\Moderator.algo.ts:86","pc":[320]},{"teal":282,"source":"contracts\\Moderator.algo.ts:86","pc":[321,322]},{"teal":283,"source":"contracts\\Moderator.algo.ts:86","pc":[323]},{"teal":284,"source":"contracts\\Moderator.algo.ts:77","pc":[324]},{"teal":289,"source":"contracts\\Moderator.algo.ts:90","pc":[325]},{"teal":292,"source":"contracts\\Moderator.algo.ts:90","pc":[326,327,328]},{"teal":293,"source":"contracts\\Moderator.algo.ts:90","pc":[329]},{"teal":294,"source":"contracts\\Moderator.algo.ts:90","pc":[330]},{"teal":295,"source":"contracts\\Moderator.algo.ts:90","pc":[331]},{"teal":296,"source":"contracts\\Moderator.algo.ts:90","pc":[332]},{"teal":300,"source":"contracts\\Moderator.algo.ts:90","pc":[333,334,335]},{"teal":304,"source":"contracts\\Moderator.algo.ts:91","pc":[336]},{"teal":305,"source":"contracts\\Moderator.algo.ts:91","pc":[337]},{"teal":306,"source":"contracts\\Moderator.algo.ts:91","pc":[338]},{"teal":307,"source":"contracts\\Moderator.algo.ts:91","pc":[339]},{"teal":308,"source":"contracts\\Moderator.algo.ts:91","pc":[340]},{"teal":312,"source":"contracts\\Moderator.algo.ts:92","pc":[341]},{"teal":313,"source":"contracts\\Moderator.algo.ts:92","pc":[342]},{"teal":316,"source":"contracts\\Moderator.algo.ts:92","errorMessage":"box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value","pc":[343]},{"teal":317,"source":"contracts\\Moderator.algo.ts:90","pc":[344]},{"teal":322,"source":"contracts\\Moderator.algo.ts:96","pc":[345]},{"teal":325,"source":"contracts\\Moderator.algo.ts:96","pc":[346,347,348]},{"teal":326,"source":"contracts\\Moderator.algo.ts:96","pc":[349]},{"teal":327,"source":"contracts\\Moderator.algo.ts:96","pc":[350]},{"teal":328,"source":"contracts\\Moderator.algo.ts:96","pc":[351]},{"teal":329,"source":"contracts\\Moderator.algo.ts:96","pc":[352]},{"teal":332,"source":"contracts\\Moderator.algo.ts:96","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[353]},{"teal":335,"source":"contracts\\Moderator.algo.ts:96","pc":[354,355,356]},{"teal":336,"source":"contracts\\Moderator.algo.ts:96","pc":[357,358,359]},{"teal":337,"source":"contracts\\Moderator.algo.ts:96","pc":[360]},{"teal":338,"source":"contracts\\Moderator.algo.ts:96","pc":[361,362]},{"teal":339,"source":"contracts\\Moderator.algo.ts:96","pc":[363]},{"teal":340,"source":"contracts\\Moderator.algo.ts:96","pc":[364]},{"teal":341,"source":"contracts\\Moderator.algo.ts:96","pc":[365]},{"teal":342,"source":"contracts\\Moderator.algo.ts:96","pc":[366]},{"teal":343,"source":"contracts\\Moderator.algo.ts:96","pc":[367]},{"teal":347,"source":"contracts\\Moderator.algo.ts:96","pc":[368,369,370]},{"teal":351,"source":"contracts\\Moderator.algo.ts:97","pc":[371]},{"teal":352,"source":"contracts\\Moderator.algo.ts:97","pc":[372]},{"teal":353,"source":"contracts\\Moderator.algo.ts:97","pc":[373]},{"teal":354,"source":"contracts\\Moderator.algo.ts:97","pc":[374]},{"teal":355,"source":"contracts\\Moderator.algo.ts:97","pc":[375]},{"teal":363,"source":"contracts\\Moderator.algo.ts:100","pc":[376,377]},{"teal":364,"source":"contracts\\Moderator.algo.ts:100","pc":[378,379,380]},{"teal":365,"source":"contracts\\Moderator.algo.ts:100","pc":[381]},{"teal":366,"source":"contracts\\Moderator.algo.ts:98","pc":[382]},{"teal":367,"source":"contracts\\Moderator.algo.ts:98","pc":[383]},{"teal":368,"source":"contracts\\Moderator.algo.ts:98","pc":[384]},{"teal":369,"source":"contracts\\Moderator.algo.ts:98","pc":[385]},{"teal":370,"source":"contracts\\Moderator.algo.ts:100","pc":[386]},{"teal":371,"source":"contracts\\Moderator.algo.ts:100","pc":[387]},{"teal":372,"source":"contracts\\Moderator.algo.ts:100","pc":[388]},{"teal":373,"source":"contracts\\Moderator.algo.ts:100","pc":[389,390,391]},{"teal":374,"source":"contracts\\Moderator.algo.ts:101","pc":[392,393]},{"teal":375,"source":"contracts\\Moderator.algo.ts:101","pc":[394,395,396]},{"teal":376,"source":"contracts\\Moderator.algo.ts:101","pc":[397]},{"teal":377,"source":"contracts\\Moderator.algo.ts:98","pc":[398]},{"teal":378,"source":"contracts\\Moderator.algo.ts:98","pc":[399]},{"teal":379,"source":"contracts\\Moderator.algo.ts:98","pc":[400]},{"teal":380,"source":"contracts\\Moderator.algo.ts:98","pc":[401]},{"teal":381,"source":"contracts\\Moderator.algo.ts:101","pc":[402]},{"teal":382,"source":"contracts\\Moderator.algo.ts:101","pc":[403]},{"teal":383,"source":"contracts\\Moderator.algo.ts:100","pc":[404]},{"teal":386,"source":"contracts\\Moderator.algo.ts:101","pc":[405]},{"teal":387,"source":"contracts\\Moderator.algo.ts:101","pc":[406,407,408]},{"teal":388,"source":"contracts\\Moderator.algo.ts:102","pc":[409,410]},{"teal":389,"source":"contracts\\Moderator.algo.ts:102","pc":[411,412,413]},{"teal":390,"source":"contracts\\Moderator.algo.ts:102","pc":[414]},{"teal":391,"source":"contracts\\Moderator.algo.ts:98","pc":[415]},{"teal":392,"source":"contracts\\Moderator.algo.ts:98","pc":[416,417]},{"teal":393,"source":"contracts\\Moderator.algo.ts:98","pc":[418]},{"teal":394,"source":"contracts\\Moderator.algo.ts:98","pc":[419]},{"teal":395,"source":"contracts\\Moderator.algo.ts:102","pc":[420]},{"teal":396,"source":"contracts\\Moderator.algo.ts:102","pc":[421]},{"teal":397,"source":"contracts\\Moderator.algo.ts:101","pc":[422]},{"teal":400,"source":"contracts\\Moderator.algo.ts:102","pc":[423]},{"teal":401,"source":"contracts\\Moderator.algo.ts:102","pc":[424,425,426]},{"teal":402,"source":"contracts\\Moderator.algo.ts:103","pc":[427,428]},{"teal":403,"source":"contracts\\Moderator.algo.ts:103","pc":[429,430,431]},{"teal":404,"source":"contracts\\Moderator.algo.ts:103","pc":[432]},{"teal":405,"source":"contracts\\Moderator.algo.ts:98","pc":[433]},{"teal":406,"source":"contracts\\Moderator.algo.ts:98","pc":[434,435]},{"teal":407,"source":"contracts\\Moderator.algo.ts:98","pc":[436]},{"teal":408,"source":"contracts\\Moderator.algo.ts:98","pc":[437]},{"teal":409,"source":"contracts\\Moderator.algo.ts:103","pc":[438]},{"teal":410,"source":"contracts\\Moderator.algo.ts:103","pc":[439]},{"teal":411,"source":"contracts\\Moderator.algo.ts:102","pc":[440]},{"teal":414,"source":"contracts\\Moderator.algo.ts:99","pc":[441,442,443]},{"teal":419,"source":"contracts\\Moderator.algo.ts:105","pc":[444]},{"teal":420,"source":"contracts\\Moderator.algo.ts:105","pc":[445]},{"teal":425,"source":"contracts\\Moderator.algo.ts:107","pc":[446]},{"teal":426,"source":"contracts\\Moderator.algo.ts:96","pc":[447]},{"teal":431,"source":"contracts\\Moderator.algo.ts:111","pc":[448,449,450]},{"teal":432,"source":"contracts\\Moderator.algo.ts:111","pc":[451]},{"teal":433,"source":"contracts\\Moderator.algo.ts:111","pc":[452]},{"teal":434,"source":"contracts\\Moderator.algo.ts:111","pc":[453]},{"teal":435,"source":"contracts\\Moderator.algo.ts:111","pc":[454]},{"teal":438,"source":"contracts\\Moderator.algo.ts:111","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[455]},{"teal":441,"source":"contracts\\Moderator.algo.ts:111","pc":[456,457,458]},{"teal":442,"source":"contracts\\Moderator.algo.ts:111","pc":[459]},{"teal":443,"source":"contracts\\Moderator.algo.ts:111","pc":[460]},{"teal":447,"source":"contracts\\Moderator.algo.ts:111","pc":[461,462,463]},{"teal":452,"source":"contracts\\Moderator.algo.ts:112","pc":[464,465]},{"teal":453,"source":"contracts\\Moderator.algo.ts:112","pc":[466,467,468]},{"teal":454,"source":"contracts\\Moderator.algo.ts:112","pc":[469,470]},{"teal":455,"source":"contracts\\Moderator.algo.ts:112","pc":[471]},{"teal":456,"source":"contracts\\Moderator.algo.ts:112","pc":[472]},{"teal":459,"source":"contracts\\Moderator.algo.ts:112","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[473]},{"teal":463,"source":"contracts\\Moderator.algo.ts:113","pc":[474]},{"teal":464,"source":"contracts\\Moderator.algo.ts:113","pc":[475,476]},{"teal":465,"source":"contracts\\Moderator.algo.ts:113","pc":[477]},{"teal":466,"source":"contracts\\Moderator.algo.ts:111","pc":[478]},{"teal":471,"source":"contracts\\Moderator.algo.ts:117","pc":[479]},{"teal":474,"source":"contracts\\Moderator.algo.ts:117","pc":[480,481,482]},{"teal":475,"source":"contracts\\Moderator.algo.ts:117","pc":[483]},{"teal":476,"source":"contracts\\Moderator.algo.ts:117","pc":[484]},{"teal":477,"source":"contracts\\Moderator.algo.ts:117","pc":[485]},{"teal":478,"source":"contracts\\Moderator.algo.ts:117","pc":[486]},{"teal":481,"source":"contracts\\Moderator.algo.ts:117","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[487]},{"teal":484,"source":"contracts\\Moderator.algo.ts:117","pc":[488,489,490]},{"teal":485,"source":"contracts\\Moderator.algo.ts:117","pc":[491]},{"teal":486,"source":"contracts\\Moderator.algo.ts:117","pc":[492]},{"teal":487,"source":"contracts\\Moderator.algo.ts:117","pc":[493]},{"teal":488,"source":"contracts\\Moderator.algo.ts:117","pc":[494,495,496]},{"teal":489,"source":"contracts\\Moderator.algo.ts:117","pc":[497]},{"teal":490,"source":"contracts\\Moderator.algo.ts:117","pc":[498]},{"teal":491,"source":"contracts\\Moderator.algo.ts:117","pc":[499]},{"teal":492,"source":"contracts\\Moderator.algo.ts:117","pc":[500]},{"teal":493,"source":"contracts\\Moderator.algo.ts:117","pc":[501]},{"teal":494,"source":"contracts\\Moderator.algo.ts:117","pc":[502]},{"teal":498,"source":"contracts\\Moderator.algo.ts:117","pc":[503,504,505]},{"teal":506,"source":"contracts\\Moderator.algo.ts:120","pc":[506,507]},{"teal":507,"source":"contracts\\Moderator.algo.ts:120","pc":[508,509,510]},{"teal":508,"source":"contracts\\Moderator.algo.ts:120","pc":[511]},{"teal":509,"source":"contracts\\Moderator.algo.ts:118","pc":[512]},{"teal":510,"source":"contracts\\Moderator.algo.ts:118","pc":[513]},{"teal":511,"source":"contracts\\Moderator.algo.ts:118","pc":[514]},{"teal":512,"source":"contracts\\Moderator.algo.ts:118","pc":[515]},{"teal":513,"source":"contracts\\Moderator.algo.ts:120","pc":[516]},{"teal":514,"source":"contracts\\Moderator.algo.ts:120","pc":[517]},{"teal":515,"source":"contracts\\Moderator.algo.ts:120","pc":[518]},{"teal":516,"source":"contracts\\Moderator.algo.ts:120","pc":[519,520,521]},{"teal":517,"source":"contracts\\Moderator.algo.ts:121","pc":[522,523]},{"teal":518,"source":"contracts\\Moderator.algo.ts:121","pc":[524,525,526]},{"teal":519,"source":"contracts\\Moderator.algo.ts:121","pc":[527]},{"teal":520,"source":"contracts\\Moderator.algo.ts:118","pc":[528]},{"teal":521,"source":"contracts\\Moderator.algo.ts:118","pc":[529,530]},{"teal":522,"source":"contracts\\Moderator.algo.ts:118","pc":[531]},{"teal":523,"source":"contracts\\Moderator.algo.ts:118","pc":[532]},{"teal":524,"source":"contracts\\Moderator.algo.ts:121","pc":[533]},{"teal":525,"source":"contracts\\Moderator.algo.ts:121","pc":[534]},{"teal":526,"source":"contracts\\Moderator.algo.ts:120","pc":[535]},{"teal":529,"source":"contracts\\Moderator.algo.ts:121","pc":[536]},{"teal":530,"source":"contracts\\Moderator.algo.ts:121","pc":[537,538,539]},{"teal":531,"source":"contracts\\Moderator.algo.ts:122","pc":[540,541]},{"teal":532,"source":"contracts\\Moderator.algo.ts:122","pc":[542,543,544]},{"teal":533,"source":"contracts\\Moderator.algo.ts:122","pc":[545]},{"teal":534,"source":"contracts\\Moderator.algo.ts:118","pc":[546]},{"teal":535,"source":"contracts\\Moderator.algo.ts:118","pc":[547]},{"teal":536,"source":"contracts\\Moderator.algo.ts:118","pc":[548]},{"teal":537,"source":"contracts\\Moderator.algo.ts:118","pc":[549]},{"teal":538,"source":"contracts\\Moderator.algo.ts:122","pc":[550]},{"teal":539,"source":"contracts\\Moderator.algo.ts:122","pc":[551]},{"teal":540,"source":"contracts\\Moderator.algo.ts:121","pc":[552]},{"teal":543,"source":"contracts\\Moderator.algo.ts:122","pc":[553]},{"teal":544,"source":"contracts\\Moderator.algo.ts:122","pc":[554,555,556]},{"teal":545,"source":"contracts\\Moderator.algo.ts:123","pc":[557,558]},{"teal":546,"source":"contracts\\Moderator.algo.ts:123","pc":[559,560,561]},{"teal":547,"source":"contracts\\Moderator.algo.ts:123","pc":[562]},{"teal":548,"source":"contracts\\Moderator.algo.ts:118","pc":[563]},{"teal":549,"source":"contracts\\Moderator.algo.ts:118","pc":[564,565]},{"teal":550,"source":"contracts\\Moderator.algo.ts:118","pc":[566]},{"teal":551,"source":"contracts\\Moderator.algo.ts:118","pc":[567]},{"teal":552,"source":"contracts\\Moderator.algo.ts:123","pc":[568]},{"teal":553,"source":"contracts\\Moderator.algo.ts:123","pc":[569]},{"teal":554,"source":"contracts\\Moderator.algo.ts:122","pc":[570]},{"teal":557,"source":"contracts\\Moderator.algo.ts:119","pc":[571,572,573]},{"teal":562,"source":"contracts\\Moderator.algo.ts:125","pc":[574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624]},{"teal":563,"source":"contracts\\Moderator.algo.ts:125","pc":[625]},{"teal":568,"source":"contracts\\Moderator.algo.ts:127","pc":[626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658]},{"teal":569,"source":"contracts\\Moderator.algo.ts:117","pc":[659]},{"teal":574,"source":"contracts\\Moderator.algo.ts:131","pc":[660,661,662]},{"teal":577,"source":"contracts\\Moderator.algo.ts:131","pc":[663,664,665]},{"teal":578,"source":"contracts\\Moderator.algo.ts:131","pc":[666]},{"teal":579,"source":"contracts\\Moderator.algo.ts:131","pc":[667]},{"teal":580,"source":"contracts\\Moderator.algo.ts:131","pc":[668]},{"teal":581,"source":"contracts\\Moderator.algo.ts:131","pc":[669]},{"teal":584,"source":"contracts\\Moderator.algo.ts:131","errorMessage":"argument 1 (Address) for storeModelParams must be a address","pc":[670]},{"teal":587,"source":"contracts\\Moderator.algo.ts:131","pc":[671,672]},{"teal":588,"source":"contracts\\Moderator.algo.ts:131","pc":[673]},{"teal":589,"source":"contracts\\Moderator.algo.ts:131","pc":[674]},{"teal":590,"source":"contracts\\Moderator.algo.ts:131","pc":[675]},{"teal":591,"source":"contracts\\Moderator.algo.ts:131","pc":[676,677]},{"teal":592,"source":"contracts\\Moderator.algo.ts:131","pc":[678]},{"teal":593,"source":"contracts\\Moderator.algo.ts:131","pc":[679]},{"teal":596,"source":"contracts\\Moderator.algo.ts:131","errorMessage":"argument 2 (mbrPay) for storeModelParams must be a pay transaction","pc":[680]},{"teal":599,"source":"contracts\\Moderator.algo.ts:131","pc":[681,682,683]},{"teal":600,"source":"contracts\\Moderator.algo.ts:131","pc":[684]},{"teal":601,"source":"contracts\\Moderator.algo.ts:131","pc":[685]},{"teal":605,"source":"contracts\\Moderator.algo.ts:131","pc":[686,687,688]},{"teal":610,"source":"contracts\\Moderator.algo.ts:132","pc":[689,690]},{"teal":611,"source":"contracts\\Moderator.algo.ts:132","pc":[691]},{"teal":612,"source":"contracts\\Moderator.algo.ts:132","pc":[692]},{"teal":613,"source":"contracts\\Moderator.algo.ts:132","pc":[693]},{"teal":614,"source":"contracts\\Moderator.algo.ts:132","pc":[694,695,696]},{"teal":620,"source":"contracts\\Moderator.algo.ts:133","pc":[697,698]},{"teal":621,"source":"contracts\\Moderator.algo.ts:133","pc":[699,700]},{"teal":622,"source":"contracts\\Moderator.algo.ts:133","pc":[701]},{"teal":625,"source":"contracts\\Moderator.algo.ts:133","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[702]},{"teal":634,"source":"contracts\\Moderator.algo.ts:134","pc":[703,704]},{"teal":635,"source":"contracts\\Moderator.algo.ts:135","pc":[705,706]},{"teal":636,"source":"contracts\\Moderator.algo.ts:135","pc":[707,708]},{"teal":637,"source":"contracts\\Moderator.algo.ts:135","pc":[709]},{"teal":640,"source":"contracts\\Moderator.algo.ts:135","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[710]},{"teal":643,"source":"contracts\\Moderator.algo.ts:134","pc":[711,712]},{"teal":644,"source":"contracts\\Moderator.algo.ts:136","pc":[713,714]},{"teal":645,"source":"contracts\\Moderator.algo.ts:136","pc":[715,716]},{"teal":646,"source":"contracts\\Moderator.algo.ts:136","pc":[717]},{"teal":649,"source":"contracts\\Moderator.algo.ts:136","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[718]},{"teal":652,"source":"contracts\\Moderator.algo.ts:134","pc":[719,720]},{"teal":653,"source":"contracts\\Moderator.algo.ts:137","pc":[721,722]},{"teal":654,"source":"contracts\\Moderator.algo.ts:137","pc":[723,724]},{"teal":655,"source":"contracts\\Moderator.algo.ts:137","pc":[725]},{"teal":658,"source":"contracts\\Moderator.algo.ts:137","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[726]},{"teal":662,"source":"contracts\\Moderator.algo.ts:140","pc":[727,728]},{"teal":663,"source":"contracts\\Moderator.algo.ts:140","pc":[729]},{"teal":664,"source":"contracts\\Moderator.algo.ts:140","pc":[730]},{"teal":665,"source":"contracts\\Moderator.algo.ts:140","pc":[731]},{"teal":666,"source":"contracts\\Moderator.algo.ts:140","pc":[732,733]},{"teal":667,"source":"contracts\\Moderator.algo.ts:140","pc":[734]},{"teal":668,"source":"contracts\\Moderator.algo.ts:132","pc":[735,736,737]},{"teal":674,"source":"contracts\\Moderator.algo.ts:142","pc":[738,739]},{"teal":675,"source":"contracts\\Moderator.algo.ts:142","pc":[740,741]},{"teal":676,"source":"contracts\\Moderator.algo.ts:142","pc":[742]},{"teal":679,"source":"contracts\\Moderator.algo.ts:142","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[743]},{"teal":688,"source":"contracts\\Moderator.algo.ts:143","pc":[744,745]},{"teal":689,"source":"contracts\\Moderator.algo.ts:144","pc":[746,747]},{"teal":690,"source":"contracts\\Moderator.algo.ts:144","pc":[748,749]},{"teal":691,"source":"contracts\\Moderator.algo.ts:144","pc":[750]},{"teal":694,"source":"contracts\\Moderator.algo.ts:144","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[751]},{"teal":697,"source":"contracts\\Moderator.algo.ts:143","pc":[752,753]},{"teal":698,"source":"contracts\\Moderator.algo.ts:145","pc":[754,755]},{"teal":699,"source":"contracts\\Moderator.algo.ts:145","pc":[756,757]},{"teal":700,"source":"contracts\\Moderator.algo.ts:145","pc":[758]},{"teal":703,"source":"contracts\\Moderator.algo.ts:145","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[759]},{"teal":706,"source":"contracts\\Moderator.algo.ts:143","pc":[760,761]},{"teal":707,"source":"contracts\\Moderator.algo.ts:146","pc":[762,763]},{"teal":708,"source":"contracts\\Moderator.algo.ts:146","pc":[764,765]},{"teal":709,"source":"contracts\\Moderator.algo.ts:146","pc":[766]},{"teal":712,"source":"contracts\\Moderator.algo.ts:146","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[767]},{"teal":716,"source":"contracts\\Moderator.algo.ts:149","pc":[768,769]},{"teal":717,"source":"contracts\\Moderator.algo.ts:149","pc":[770]},{"teal":718,"source":"contracts\\Moderator.algo.ts:149","pc":[771]},{"teal":719,"source":"contracts\\Moderator.algo.ts:149","pc":[772]},{"teal":723,"source":"contracts\\Moderator.algo.ts:150","pc":[773,774]},{"teal":724,"source":"contracts\\Moderator.algo.ts:150","pc":[775]},{"teal":725,"source":"contracts\\Moderator.algo.ts:150","pc":[776]},{"teal":726,"source":"contracts\\Moderator.algo.ts:150","pc":[777]},{"teal":727,"source":"contracts\\Moderator.algo.ts:150","pc":[778,779]},{"teal":728,"source":"contracts\\Moderator.algo.ts:150","pc":[780]},{"teal":731,"source":"contracts\\Moderator.algo.ts:131","pc":[781]},{"teal":736,"source":"contracts\\Moderator.algo.ts:155","pc":[782]},{"teal":739,"source":"contracts\\Moderator.algo.ts:155","pc":[783,784,785]},{"teal":740,"source":"contracts\\Moderator.algo.ts:155","pc":[786]},{"teal":741,"source":"contracts\\Moderator.algo.ts:155","pc":[787]},{"teal":742,"source":"contracts\\Moderator.algo.ts:155","pc":[788]},{"teal":743,"source":"contracts\\Moderator.algo.ts:155","pc":[789]},{"teal":746,"source":"contracts\\Moderator.algo.ts:155","errorMessage":"argument 0 (Address) for getBoxValue must be a address","pc":[790]},{"teal":749,"source":"contracts\\Moderator.algo.ts:155","pc":[791,792,793]},{"teal":750,"source":"contracts\\Moderator.algo.ts:155","pc":[794]},{"teal":751,"source":"contracts\\Moderator.algo.ts:155","pc":[795]},{"teal":752,"source":"contracts\\Moderator.algo.ts:155","pc":[796]},{"teal":753,"source":"contracts\\Moderator.algo.ts:155","pc":[797]},{"teal":757,"source":"contracts\\Moderator.algo.ts:155","pc":[798,799,800]},{"teal":762,"source":"contracts\\Moderator.algo.ts:156","pc":[801,802]},{"teal":763,"source":"contracts\\Moderator.algo.ts:156","pc":[803,804,805]},{"teal":764,"source":"contracts\\Moderator.algo.ts:156","pc":[806,807]},{"teal":765,"source":"contracts\\Moderator.algo.ts:156","pc":[808]},{"teal":766,"source":"contracts\\Moderator.algo.ts:156","pc":[809]},{"teal":769,"source":"contracts\\Moderator.algo.ts:156","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[810]},{"teal":773,"source":"contracts\\Moderator.algo.ts:157","pc":[811,812]},{"teal":774,"source":"contracts\\Moderator.algo.ts:157","pc":[813]},{"teal":775,"source":"contracts\\Moderator.algo.ts:157","pc":[814]},{"teal":776,"source":"contracts\\Moderator.algo.ts:157","pc":[815]},{"teal":777,"source":"contracts\\Moderator.algo.ts:157","pc":[816]},{"teal":781,"source":"contracts\\Moderator.algo.ts:158","pc":[817,818]},{"teal":782,"source":"contracts\\Moderator.algo.ts:158","pc":[819]},{"teal":785,"source":"contracts\\Moderator.algo.ts:158","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[820]},{"teal":786,"source":"contracts\\Moderator.algo.ts:155","pc":[821]},{"teal":791,"source":"contracts\\Moderator.algo.ts:162","pc":[822]},{"teal":794,"source":"contracts\\Moderator.algo.ts:162","pc":[823,824,825]},{"teal":795,"source":"contracts\\Moderator.algo.ts:162","pc":[826]},{"teal":796,"source":"contracts\\Moderator.algo.ts:162","pc":[827]},{"teal":797,"source":"contracts\\Moderator.algo.ts:162","pc":[828]},{"teal":798,"source":"contracts\\Moderator.algo.ts:162","pc":[829]},{"teal":801,"source":"contracts\\Moderator.algo.ts:162","errorMessage":"argument 0 (contributor) for distributeRewards must be a (uint64)","pc":[830]},{"teal":804,"source":"contracts\\Moderator.algo.ts:162","pc":[831,832,833]},{"teal":805,"source":"contracts\\Moderator.algo.ts:162","pc":[834]},{"teal":806,"source":"contracts\\Moderator.algo.ts:162","pc":[835]},{"teal":807,"source":"contracts\\Moderator.algo.ts:162","pc":[836]},{"teal":808,"source":"contracts\\Moderator.algo.ts:162","pc":[837]},{"teal":809,"source":"contracts\\Moderator.algo.ts:162","pc":[838]},{"teal":810,"source":"contracts\\Moderator.algo.ts:162","pc":[839,840,841]},{"teal":811,"source":"contracts\\Moderator.algo.ts:162","pc":[842]},{"teal":812,"source":"contracts\\Moderator.algo.ts:162","pc":[843]},{"teal":813,"source":"contracts\\Moderator.algo.ts:162","pc":[844]},{"teal":814,"source":"contracts\\Moderator.algo.ts:162","pc":[845]},{"teal":815,"source":"contracts\\Moderator.algo.ts:162","pc":[846]},{"teal":816,"source":"contracts\\Moderator.algo.ts:162","pc":[847]},{"teal":820,"source":"contracts\\Moderator.algo.ts:162","pc":[848,849,850]},{"teal":823,"source":"contracts\\Moderator.algo.ts:162","pc":[851]},{"teal":824,"source":"contracts\\Moderator.algo.ts:162","pc":[852,853]},{"teal":828,"source":"contracts\\Moderator.algo.ts:164","pc":[854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879]},{"teal":829,"source":"contracts\\Moderator.algo.ts:164","pc":[880,881]},{"teal":833,"source":"contracts\\Moderator.algo.ts:166","pc":[882]},{"teal":834,"source":"contracts\\Moderator.algo.ts:166","pc":[883,884]},{"teal":838,"source":"contracts\\Moderator.algo.ts:163","pc":[885]},{"teal":839,"source":"contracts\\Moderator.algo.ts:163","pc":[886]},{"teal":840,"source":"contracts\\Moderator.algo.ts:163","pc":[887]},{"teal":841,"source":"contracts\\Moderator.algo.ts:163","pc":[888]},{"teal":842,"source":"contracts\\Moderator.algo.ts:168","pc":[889]},{"teal":843,"source":"contracts\\Moderator.algo.ts:163","pc":[890]},{"teal":844,"source":"contracts\\Moderator.algo.ts:163","pc":[891]},{"teal":845,"source":"contracts\\Moderator.algo.ts:163","pc":[892]},{"teal":846,"source":"contracts\\Moderator.algo.ts:163","pc":[893]},{"teal":847,"source":"contracts\\Moderator.algo.ts:168","pc":[894]},{"teal":848,"source":"contracts\\Moderator.algo.ts:168","pc":[895]},{"teal":849,"source":"contracts\\Moderator.algo.ts:163","pc":[896]},{"teal":850,"source":"contracts\\Moderator.algo.ts:163","pc":[897,898]},{"teal":851,"source":"contracts\\Moderator.algo.ts:163","pc":[899]},{"teal":852,"source":"contracts\\Moderator.algo.ts:163","pc":[900]},{"teal":853,"source":"contracts\\Moderator.algo.ts:168","pc":[901]},{"teal":854,"source":"contracts\\Moderator.algo.ts:168","pc":[902]},{"teal":855,"source":"contracts\\Moderator.algo.ts:163","pc":[903]},{"teal":856,"source":"contracts\\Moderator.algo.ts:163","pc":[904,905]},{"teal":857,"source":"contracts\\Moderator.algo.ts:163","pc":[906]},{"teal":858,"source":"contracts\\Moderator.algo.ts:163","pc":[907]},{"teal":859,"source":"contracts\\Moderator.algo.ts:168","pc":[908]},{"teal":860,"source":"contracts\\Moderator.algo.ts:168","pc":[909]},{"teal":861,"source":"contracts\\Moderator.algo.ts:168","pc":[910,911]},{"teal":865,"source":"contracts\\Moderator.algo.ts:169","pc":[912]},{"teal":866,"source":"contracts\\Moderator.algo.ts:169","pc":[913,914]},{"teal":870,"source":"contracts\\Moderator.algo.ts:170","pc":[915]},{"teal":871,"source":"contracts\\Moderator.algo.ts:170","pc":[916,917]},{"teal":876,"source":"contracts\\Moderator.algo.ts:172","pc":[918,919]},{"teal":877,"source":"contracts\\Moderator.algo.ts:172","pc":[920,921,922]},{"teal":878,"source":"contracts\\Moderator.algo.ts:172","pc":[923]},{"teal":879,"source":"contracts\\Moderator.algo.ts:172","pc":[924,925]},{"teal":880,"source":"contracts\\Moderator.algo.ts:172","pc":[926]},{"teal":881,"source":"contracts\\Moderator.algo.ts:172","pc":[927,928,929]},{"teal":886,"source":"contracts\\Moderator.algo.ts:173","pc":[930,931]},{"teal":887,"source":"contracts\\Moderator.algo.ts:173","pc":[932,933,934]},{"teal":888,"source":"contracts\\Moderator.algo.ts:173","pc":[935]},{"teal":889,"source":"contracts\\Moderator.algo.ts:173","pc":[936,937]},{"teal":890,"source":"contracts\\Moderator.algo.ts:173","pc":[938]},{"teal":891,"source":"contracts\\Moderator.algo.ts:173","pc":[939,940]},{"teal":896,"source":"contracts\\Moderator.algo.ts:176","pc":[941,942]},{"teal":897,"source":"contracts\\Moderator.algo.ts:176","pc":[943]},{"teal":898,"source":"contracts\\Moderator.algo.ts:176","pc":[944,945]},{"teal":899,"source":"contracts\\Moderator.algo.ts:176","pc":[946,947,948]},{"teal":900,"source":"contracts\\Moderator.algo.ts:176","pc":[949]},{"teal":901,"source":"contracts\\Moderator.algo.ts:176","pc":[950,951]},{"teal":902,"source":"contracts\\Moderator.algo.ts:176","pc":[952]},{"teal":903,"source":"contracts\\Moderator.algo.ts:176","pc":[953,954]},{"teal":908,"source":"contracts\\Moderator.algo.ts:177","pc":[955]},{"teal":909,"source":"contracts\\Moderator.algo.ts:177","pc":[956,957]},{"teal":910,"source":"contracts\\Moderator.algo.ts:177","pc":[958,959]},{"teal":911,"source":"contracts\\Moderator.algo.ts:177","pc":[960]},{"teal":912,"source":"contracts\\Moderator.algo.ts:177","pc":[961,962]},{"teal":913,"source":"contracts\\Moderator.algo.ts:177","pc":[963]},{"teal":914,"source":"contracts\\Moderator.algo.ts:177","pc":[964]},{"teal":915,"source":"contracts\\Moderator.algo.ts:177","pc":[965,966]},{"teal":916,"source":"contracts\\Moderator.algo.ts:177","pc":[967]},{"teal":917,"source":"contracts\\Moderator.algo.ts:177","pc":[968]},{"teal":918,"source":"contracts\\Moderator.algo.ts:177","pc":[969]},{"teal":919,"source":"contracts\\Moderator.algo.ts:177","pc":[970]},{"teal":920,"source":"contracts\\Moderator.algo.ts:177","pc":[971]},{"teal":923,"source":"contracts\\Moderator.algo.ts:177","errorMessage":"wideRatio failed","pc":[972]},{"teal":924,"source":"contracts\\Moderator.algo.ts:177","pc":[973,974]},{"teal":928,"source":"contracts\\Moderator.algo.ts:179","pc":[975,976]},{"teal":929,"source":"contracts\\Moderator.algo.ts:179","pc":[977,978]},{"teal":930,"source":"contracts\\Moderator.algo.ts:179","pc":[979]},{"teal":931,"source":"contracts\\Moderator.algo.ts:179","pc":[980,981]},{"teal":935,"source":"contracts\\Moderator.algo.ts:181","pc":[982,983]},{"teal":936,"source":"contracts\\Moderator.algo.ts:181","pc":[984,985]},{"teal":937,"source":"contracts\\Moderator.algo.ts:181","pc":[986]},{"teal":938,"source":"contracts\\Moderator.algo.ts:181","pc":[987,988]},{"teal":941,"source":"contracts\\Moderator.algo.ts:176","pc":[989,990]},{"teal":942,"source":"contracts\\Moderator.algo.ts:176","pc":[991]},{"teal":943,"source":"contracts\\Moderator.algo.ts:176","pc":[992]},{"teal":944,"source":"contracts\\Moderator.algo.ts:176","pc":[993]},{"teal":945,"source":"contracts\\Moderator.algo.ts:176","pc":[994,995]},{"teal":946,"source":"contracts\\Moderator.algo.ts:176","pc":[996]},{"teal":947,"source":"contracts\\Moderator.algo.ts:176","pc":[997,998,999]},{"teal":948,"source":"contracts\\Moderator.algo.ts:176","pc":[1000,1001]},{"teal":949,"source":"contracts\\Moderator.algo.ts:176","pc":[1002,1003]},{"teal":950,"source":"contracts\\Moderator.algo.ts:176","pc":[1004,1005]},{"teal":951,"source":"contracts\\Moderator.algo.ts:176","pc":[1006]},{"teal":952,"source":"contracts\\Moderator.algo.ts:176","pc":[1007]},{"teal":953,"source":"contracts\\Moderator.algo.ts:176","pc":[1008]},{"teal":954,"source":"contracts\\Moderator.algo.ts:176","pc":[1009,1010]},{"teal":955,"source":"contracts\\Moderator.algo.ts:176","pc":[1011,1012,1013]},{"teal":960,"source":"contracts\\Moderator.algo.ts:184","pc":[1014,1015]},{"teal":961,"source":"contracts\\Moderator.algo.ts:184","pc":[1016]},{"teal":962,"source":"contracts\\Moderator.algo.ts:184","pc":[1017,1018]},{"teal":963,"source":"contracts\\Moderator.algo.ts:184","pc":[1019,1020,1021]},{"teal":964,"source":"contracts\\Moderator.algo.ts:184","pc":[1022]},{"teal":965,"source":"contracts\\Moderator.algo.ts:184","pc":[1023,1024]},{"teal":966,"source":"contracts\\Moderator.algo.ts:184","pc":[1025]},{"teal":967,"source":"contracts\\Moderator.algo.ts:184","pc":[1026,1027]},{"teal":972,"source":"contracts\\Moderator.algo.ts:185","pc":[1028]},{"teal":973,"source":"contracts\\Moderator.algo.ts:185","pc":[1029,1030]},{"teal":974,"source":"contracts\\Moderator.algo.ts:185","pc":[1031,1032]},{"teal":975,"source":"contracts\\Moderator.algo.ts:185","pc":[1033]},{"teal":976,"source":"contracts\\Moderator.algo.ts:185","pc":[1034,1035]},{"teal":977,"source":"contracts\\Moderator.algo.ts:185","pc":[1036]},{"teal":978,"source":"contracts\\Moderator.algo.ts:185","pc":[1037]},{"teal":979,"source":"contracts\\Moderator.algo.ts:185","pc":[1038,1039]},{"teal":980,"source":"contracts\\Moderator.algo.ts:185","pc":[1040]},{"teal":981,"source":"contracts\\Moderator.algo.ts:185","pc":[1041]},{"teal":982,"source":"contracts\\Moderator.algo.ts:185","pc":[1042]},{"teal":983,"source":"contracts\\Moderator.algo.ts:185","pc":[1043]},{"teal":984,"source":"contracts\\Moderator.algo.ts:185","pc":[1044]},{"teal":987,"source":"contracts\\Moderator.algo.ts:185","errorMessage":"wideRatio failed","pc":[1045]},{"teal":988,"source":"contracts\\Moderator.algo.ts:185","pc":[1046,1047]},{"teal":992,"source":"contracts\\Moderator.algo.ts:187","pc":[1048,1049]},{"teal":993,"source":"contracts\\Moderator.algo.ts:187","pc":[1050,1051]},{"teal":994,"source":"contracts\\Moderator.algo.ts:187","pc":[1052]},{"teal":995,"source":"contracts\\Moderator.algo.ts:187","pc":[1053,1054]},{"teal":999,"source":"contracts\\Moderator.algo.ts:189","pc":[1055]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:189","pc":[1056,1057]},{"teal":1001,"source":"contracts\\Moderator.algo.ts:189","pc":[1058,1059,1060,1061,1062]},{"teal":1002,"source":"contracts\\Moderator.algo.ts:189","pc":[1063]},{"teal":1003,"source":"contracts\\Moderator.algo.ts:189","pc":[1064]},{"teal":1004,"source":"contracts\\Moderator.algo.ts:189","pc":[1065,1066]},{"teal":1005,"source":"contracts\\Moderator.algo.ts:189","pc":[1067]},{"teal":1006,"source":"contracts\\Moderator.algo.ts:189","pc":[1068]},{"teal":1007,"source":"contracts\\Moderator.algo.ts:189","pc":[1069]},{"teal":1008,"source":"contracts\\Moderator.algo.ts:189","pc":[1070]},{"teal":1009,"source":"contracts\\Moderator.algo.ts:189","pc":[1071]},{"teal":1012,"source":"contracts\\Moderator.algo.ts:189","errorMessage":"wideRatio failed","pc":[1072]},{"teal":1013,"source":"contracts\\Moderator.algo.ts:189","pc":[1073,1074]},{"teal":1017,"source":"contracts\\Moderator.algo.ts:191","pc":[1075,1076]},{"teal":1018,"source":"contracts\\Moderator.algo.ts:191","pc":[1077,1078]},{"teal":1019,"source":"contracts\\Moderator.algo.ts:191","pc":[1079]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:191","pc":[1080]},{"teal":1021,"source":"contracts\\Moderator.algo.ts:191","pc":[1081,1082]},{"teal":1024,"source":"contracts\\Moderator.algo.ts:184","pc":[1083,1084]},{"teal":1025,"source":"contracts\\Moderator.algo.ts:184","pc":[1085]},{"teal":1026,"source":"contracts\\Moderator.algo.ts:184","pc":[1086]},{"teal":1027,"source":"contracts\\Moderator.algo.ts:184","pc":[1087]},{"teal":1028,"source":"contracts\\Moderator.algo.ts:184","pc":[1088,1089]},{"teal":1029,"source":"contracts\\Moderator.algo.ts:184","pc":[1090]},{"teal":1030,"source":"contracts\\Moderator.algo.ts:184","pc":[1091,1092,1093]},{"teal":1031,"source":"contracts\\Moderator.algo.ts:184","pc":[1094,1095]},{"teal":1032,"source":"contracts\\Moderator.algo.ts:184","pc":[1096,1097]},{"teal":1033,"source":"contracts\\Moderator.algo.ts:184","pc":[1098,1099]},{"teal":1034,"source":"contracts\\Moderator.algo.ts:184","pc":[1100]},{"teal":1035,"source":"contracts\\Moderator.algo.ts:184","pc":[1101]},{"teal":1036,"source":"contracts\\Moderator.algo.ts:184","pc":[1102]},{"teal":1037,"source":"contracts\\Moderator.algo.ts:184","pc":[1103,1104]},{"teal":1038,"source":"contracts\\Moderator.algo.ts:184","pc":[1105,1106,1107]},{"teal":1043,"source":"contracts\\Moderator.algo.ts:194","pc":[1108,1109]},{"teal":1046,"source":"contracts\\Moderator.algo.ts:162","pc":[1110,1111]},{"teal":1049,"source":"contracts\\Moderator.algo.ts:162","pc":[1112,1113]},{"teal":1050,"source":"contracts\\Moderator.algo.ts:162","pc":[1114]},{"teal":1055,"source":"contracts\\Moderator.algo.ts:198","pc":[1115,1116,1117]},{"teal":1056,"source":"contracts\\Moderator.algo.ts:198","pc":[1118]},{"teal":1057,"source":"contracts\\Moderator.algo.ts:198","pc":[1119]},{"teal":1061,"source":"contracts\\Moderator.algo.ts:198","pc":[1120,1121,1122]},{"teal":1065,"source":"contracts\\Moderator.algo.ts:199","pc":[1123,1124]},{"teal":1066,"source":"contracts\\Moderator.algo.ts:199","pc":[1125,1126,1127]},{"teal":1067,"source":"contracts\\Moderator.algo.ts:199","pc":[1128,1129]},{"teal":1068,"source":"contracts\\Moderator.algo.ts:199","pc":[1130]},{"teal":1069,"source":"contracts\\Moderator.algo.ts:199","pc":[1131]},{"teal":1070,"source":"contracts\\Moderator.algo.ts:199","pc":[1132]},{"teal":1076,"source":"contracts\\Moderator.algo.ts:200","pc":[1133]},{"teal":1077,"source":"contracts\\Moderator.algo.ts:200","pc":[1134]},{"teal":1078,"source":"contracts\\Moderator.algo.ts:200","pc":[1135,1136]},{"teal":1082,"source":"contracts\\Moderator.algo.ts:201","pc":[1137,1138]},{"teal":1083,"source":"contracts\\Moderator.algo.ts:201","pc":[1139,1140]},{"teal":1086,"source":"contracts\\Moderator.algo.ts:200","pc":[1141]},{"teal":1087,"source":"contracts\\Moderator.algo.ts:200","pc":[1142,1143]},{"teal":1090,"source":"contracts\\Moderator.algo.ts:200","pc":[1144]},{"teal":1091,"source":"contracts\\Moderator.algo.ts:198","pc":[1145]},{"teal":1094,"source":"contracts\\Moderator.algo.ts:35","pc":[1146,1147,1148,1149,1150,1151]},{"teal":1095,"source":"contracts\\Moderator.algo.ts:35","pc":[1152,1153,1154]},{"teal":1096,"source":"contracts\\Moderator.algo.ts:35","pc":[1155,1156,1157,1158]},{"teal":1099,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1159]},{"teal":1102,"source":"contracts\\Moderator.algo.ts:35","pc":[1160,1161,1162,1163,1164,1165]},{"teal":1103,"source":"contracts\\Moderator.algo.ts:35","pc":[1166,1167,1168,1169,1170,1171]},{"teal":1104,"source":"contracts\\Moderator.algo.ts:35","pc":[1172,1173,1174,1175,1176,1177]},{"teal":1105,"source":"contracts\\Moderator.algo.ts:35","pc":[1178,1179,1180,1181,1182,1183]},{"teal":1106,"source":"contracts\\Moderator.algo.ts:35","pc":[1184,1185,1186,1187,1188,1189]},{"teal":1107,"source":"contracts\\Moderator.algo.ts:35","pc":[1190,1191,1192,1193,1194,1195]},{"teal":1108,"source":"contracts\\Moderator.algo.ts:35","pc":[1196,1197,1198,1199,1200,1201]},{"teal":1109,"source":"contracts\\Moderator.algo.ts:35","pc":[1202,1203,1204,1205,1206,1207]},{"teal":1110,"source":"contracts\\Moderator.algo.ts:35","pc":[1208,1209,1210,1211,1212,1213]},{"teal":1111,"source":"contracts\\Moderator.algo.ts:35","pc":[1214,1215,1216,1217,1218,1219]},{"teal":1112,"source":"contracts\\Moderator.algo.ts:35","pc":[1220,1221,1222]},{"teal":1113,"source":"contracts\\Moderator.algo.ts:35","pc":[1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244]},{"teal":1116,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1245]},{"teal":1119,"source":"contracts\\Moderator.algo.ts:35","pc":[1246,1247,1248,1249,1250,1251]},{"teal":1120,"source":"contracts\\Moderator.algo.ts:35","pc":[1252,1253,1254]},{"teal":1121,"source":"contracts\\Moderator.algo.ts:35","pc":[1255,1256,1257,1258]},{"teal":1124,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1259]},{"teal":1127,"source":"contracts\\Moderator.algo.ts:35","pc":[1260,1261,1262,1263,1264,1265]},{"teal":1128,"source":"contracts\\Moderator.algo.ts:35","pc":[1266,1267,1268]},{"teal":1129,"source":"contracts\\Moderator.algo.ts:35","pc":[1269,1270,1271,1272]},{"teal":1132,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1273]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAQgAIBjAhD0Q6AeQTiYGABUAE0luaXRpYWxNb2RlbE1ldHJpY3MEFR98dQoACHJlZ01vZGVsCnJld2FyZFBvb2wIaXBmc0hhc2gxGBSBBgsxGQiNDAQYAAAAAAAABG4EfAQKAAAAAAAAAAAAAAA2GgFXAgCIAAIiQ4oBACcFi/9JFRZXBgJMUGeJNhoBVwIAiAACIkOKAQAxADYyAHIHSBJEJwWL/0kVFlcGAkxQZ4kqMRYiCUk4ECISRDYaAReIAAUWULAiQ4oCAYv+OAAxABJEi/44BzIKEkSL/jgIi/8SRCcEi/9nJwRkiSqIAAUWULAiQ4oAATIKcwBIiTEWIglJOBAiEkQ2GgFJFSUSRIgAAiJDigIAMQA2MgByB0gSRIv+OAAxABJEi/44BzIKEkSL/jgIIQUSRCkluUgpi/+/iSqIAARQsCJDigABKb1MSEQpvkSJKjYaAUkVJRJEiAALgAEAJE8CVFCwIkOKAQEpvUxIRIv/VwAIFykkI7oXD0lBAA2L/1cICBcpIyO6Fw8QSUEADov/VxAIFykhBiO6Fw8QSUEADov/VxgIFykhBCO6Fw8QQQACIokkiTYaAUkVJRJEiAACIkOKAQAxADYyAHIHSBJEK4v/v4kqNhoBSRUlEkSIAAxJFRZXBgJMUFCwIkOKAQGL/1cACBcrJCO6Fw5JQQAOi/9XEAgXKyEGI7oXDhBJQQANi/9XCAgXKyMjuhcOEElBAA6L/1cYCBcrIQQjuhcPEEEANIAxTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbomAH2ZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHOJNhoCNhoBSRUlEkQxFiIJSTgQIhJEiAACIkOKAwCL/r1MSEEAKTEAMQASRIv/OAAxABJEi/84BzIKEkSL/zgIIQUSRIv+SbxIi/2/QgArMQAxABJEi/84ADEAEkSL/zgHMgoSRIv/OAghBRJEi/4luUiL/km8SIv9v4kqNhoBSRUlEkSIAARQsCJDigEBMQA2MgByB0gSRIv/vUxIRIv/vkSJKjYaAUkVIxJEiAAOSRUjChZXBgJMUFCwIkOKAQEoRw+AGAAAAAAAAAAyAAAAAAAAADIAAAAAAAAAMowAJIwBKSQjuhcpIyO6FwgpIQYjuhcIKSEEI7oXCIwCJIwDKIwEi/9XAAgXiwINQQALi/9XAAgXiwIJjAOLAEmMBVcACBeMBiSMBySLBosGCyEHCyQhCB9ISEwURIwIiwiLAwuMCYsBiwkIjAGLByMISSEEDEEADowHiwWLByNYF4wGQv/FiwBJjApXAAgXjAskjAwkiwuLCwshBwskIQgfSEhMFESMDYsNiwMLjA4kiw6BgK3iBAskiwEfSEhMFESMD4sEiw8WUIwEiwwjCEkhBAxBAA6MDIsKiwwjWBeMC0L/sIsEjABGD4mIAAIiQ4oAADEANjIAcgdIEkSxIrIQMQCyCSSyAbOJgAQRV1bbNhoAjgH76gCABGboFYyABChr5jaABLeJGPWABG3c39yABBNC2OqABH3i382ABL+K3t+ABFTSUL+ABHBcsxCABNGIU2E2GgCOCvvW/BH8I/xo/Hz84/0C/bf+Mf5ZAIAEF0dAWzYaAI4B+6IAgAQkh8MsNhoAjgH/YgA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ParamsData = {
  paramHash: string,
  paramKey: string,
  score: bigint,
  reputation: bigint
}


/**
 * Converts the ABI tuple representation of a ParamsData to the struct representation
 */
export function ParamsDataFromTuple(abiTuple: [string, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ParamsData, APP_SPEC.structs) as ParamsData
}

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

export type RewardCalculation = {
  score: bigint
}


/**
 * Converts the ABI tuple representation of a rewardCalculation to the struct representation
 */
export function RewardCalculationFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.rewardCalculation, APP_SPEC.structs) as RewardCalculation
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'assignRewardPool(uint64,pay)uint64': {
      rewardPoolAmount: bigint | number
      rewardPoolTxn: AppMethodCallTransactionArgument
    }
    'checkBalance()uint64': Record<string, never>
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Record<string, never>
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool': {
      modelEvaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': {
      mbrPay: AppMethodCallTransactionArgument
      address: string
      paramsData: ParamsData
    }
    'getBoxValue(address)(string,string,uint64,uint64)': {
      address: string
    }
    'distributeRewards((uint64))uint64[]': {
      contributor: RewardCalculation
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'assignRewardPool(uint64,pay)uint64': [rewardPoolAmount: bigint | number, rewardPoolTxn: AppMethodCallTransactionArgument]
    'checkBalance()uint64': []
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': []
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool': [modelEvaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': [mbrPay: AppMethodCallTransactionArgument, address: string, paramsData: ParamsData]
    'getBoxValue(address)(string,string,uint64,uint64)': [address: string]
    'distributeRewards((uint64))uint64[]': [contributor: RewardCalculation]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'assignRewardPool(uint64,pay)uint64': bigint
  'checkBalance()uint64': bigint
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Classification
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool': boolean
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'storeModelParams(pay,address,(string,string,uint64,uint64))void': void
  'getBoxValue(address)(string,string,uint64,uint64)': ParamsData
  'distributeRewards((uint64))uint64[]': bigint[]
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'assignRewardPool(uint64,pay)uint64' | 'assignRewardPool', {
      argsObj: DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64']
      argsTuple: DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']
      returns: DmlChainReturns['assignRewardPool(uint64,pay)uint64']
    }>
    & Record<'checkBalance()uint64' | 'checkBalance', {
      argsObj: DmlChainArgs['obj']['checkBalance()uint64']
      argsTuple: DmlChainArgs['tuple']['checkBalance()uint64']
      returns: DmlChainReturns['checkBalance()uint64']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'getClassificationCriteria()(uint64,uint64,uint64,uint64)' | 'getClassificationCriteria', {
      argsObj: DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      returns: DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'storeModelParams(pay,address,(string,string,uint64,uint64))void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      returns: DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void']
    }>
    & Record<'getBoxValue(address)(string,string,uint64,uint64)' | 'getBoxValue', {
      argsObj: DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']
      returns: DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)']
    }>
    & Record<'distributeRewards((uint64))uint64[]' | 'distributeRewards', {
      argsObj: DmlChainArgs['obj']['distributeRewards((uint64))uint64[]']
      argsTuple: DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']
      returns: DmlChainReturns['distributeRewards((uint64))uint64[]']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
        rewardPool: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        paramsData: Map<string, ParamsData>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the assignRewardPool(uint64,pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignRewardPool(uint64,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardPoolAmount, params.args.rewardPoolTxn],
    }
  }
  /**
   * Constructs a no op call for the checkBalance()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkBalance()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClassificationCriteria()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(pay,address,(string,string,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.address, params.args.paramsData],
    }
  }
  /**
   * Constructs a no op call for the getBoxValue(address)(string,string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxValue(address)(string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the distributeRewards((uint64))uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRewards(params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeRewards((uint64))uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRewards: (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRewards: (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignRewardPool: async (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.assignRewardPool(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['assignRewardPool(uint64,pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkBalance: async (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.checkBalance(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['checkBalance()uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClassificationCriteria: async (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getClassificationCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxValue: async (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getBoxValue(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRewards: async (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.distributeRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['distributeRewards((uint64))uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
          rewardPool: result.rewardPool,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
      /**
       * Get the current value of the rewardPool key in global state
       */
      rewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPool")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the paramsData map in box state
       */
      paramsData: {
        /**
         * Get all current values of the paramsData map in box state
         */
        getMap: async (): Promise<Map<string, ParamsData>> => { return (await this.appClient.state.box.getMap("paramsData")) as Map<string, ParamsData> },
        /**
         * Get a current value of the paramsData map by key from box state
         */
        value: async (key: string): Promise<ParamsData | undefined> => { return await this.appClient.state.box.getMapValue("paramsData", key) as ParamsData | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a assignRewardPool(uint64,pay)uint64 method call against the DMLChain contract
       */
      assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignRewardPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('assignRewardPool(uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a checkBalance()uint64 method call against the DMLChain contract
       */
      checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkBalance()uint64', v))
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClassificationCriteria()(uint64,uint64,uint64,uint64) method call against the DMLChain contract
       */
      getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClassificationCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClassificationCriteria()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a storeModelParams(pay,address,(string,string,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxValue(address)(string,string,uint64,uint64) method call against the DMLChain contract
       */
      getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxValue(address)(string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a distributeRewards((uint64))uint64[] method call against the DMLChain contract
       */
      distributeRewards(params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('distributeRewards((uint64))uint64[]', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assignRewardPool(uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignRewardPool(params?: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['assignRewardPool(uint64,pay)uint64'] | undefined]>

  /**
   * Calls the checkBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkBalance(params?: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['checkBalance()uint64'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClassificationCriteria(params?: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | undefined]>

  /**
   * Calls the getBoxValue(address)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxValue(params?: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the distributeRewards((uint64))uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRewards(params?: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']>): DmlChainComposer<[...TReturns, DmlChainReturns['distributeRewards((uint64))uint64[]'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

