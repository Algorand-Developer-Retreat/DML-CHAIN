/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"assignRewardPool","args":[{"name":"rewardPoolAmount","type":"uint64"},{"name":"rewardPoolTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"creatorCommitToListing","args":[{"name":"stakeAmountTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"commitToListing","args":[{"name":"stakeAmountTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"checkBalance","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"bulkPayoutRewards","args":[{"name":"addresses","type":"address[]"},{"name":"rewards","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"adminBulkPayoutRewards","args":[{"name":"addresses","type":"address[]"},{"name":"rewards","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getClassificationCriteria","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"mbrPay","type":"pay"},{"name":"Address","type":"address"},{"name":"paramsData","type":"(string,string,uint64,uint64)","struct":"ParamsData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string,uint64,uint64)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"adminGetBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string,uint64,uint64)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteInitialBox","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteBox","args":[{"name":"address","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"adminDeleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"ParamsData":[{"name":"paramHash","type":"string"},{"name":"paramKey","type":"string"},{"name":"score","type":"uint64"},{"name":"reputation","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"},"rewardPool":{"key":"cmV3YXJkUG9vbA==","keyType":"AVMBytes","valueType":"uint64"},"stakeAmount":{"key":"c3Rha2VBbW91bnQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"paramsData":{"keyType":"address","valueType":"ParamsData"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:24","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:24","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts\\Moderator.algo.ts:24","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]},{"teal":15,"source":"contracts\\Moderator.algo.ts:24","pc":[68,69]},{"teal":16,"source":"contracts\\Moderator.algo.ts:24","pc":[70]},{"teal":17,"source":"contracts\\Moderator.algo.ts:24","pc":[71,72]},{"teal":18,"source":"contracts\\Moderator.algo.ts:24","pc":[73]},{"teal":19,"source":"contracts\\Moderator.algo.ts:24","pc":[74,75]},{"teal":20,"source":"contracts\\Moderator.algo.ts:24","pc":[76]},{"teal":21,"source":"contracts\\Moderator.algo.ts:24","pc":[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102]},{"teal":25,"source":"contracts\\Moderator.algo.ts:24","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[103]},{"teal":30,"source":"contracts\\Moderator.algo.ts:41","pc":[104,105,106]},{"teal":31,"source":"contracts\\Moderator.algo.ts:41","pc":[107,108,109]},{"teal":34,"source":"contracts\\Moderator.algo.ts:41","pc":[110,111,112]},{"teal":35,"source":"contracts\\Moderator.algo.ts:41","pc":[113]},{"teal":36,"source":"contracts\\Moderator.algo.ts:41","pc":[114]},{"teal":40,"source":"contracts\\Moderator.algo.ts:41","pc":[115,116,117]},{"teal":44,"source":"contracts\\Moderator.algo.ts:42","pc":[118,119]},{"teal":45,"source":"contracts\\Moderator.algo.ts:42","pc":[120,121]},{"teal":46,"source":"contracts\\Moderator.algo.ts:42","pc":[122]},{"teal":47,"source":"contracts\\Moderator.algo.ts:42","pc":[123]},{"teal":48,"source":"contracts\\Moderator.algo.ts:42","pc":[124]},{"teal":49,"source":"contracts\\Moderator.algo.ts:42","pc":[125,126,127]},{"teal":50,"source":"contracts\\Moderator.algo.ts:42","pc":[128]},{"teal":51,"source":"contracts\\Moderator.algo.ts:42","pc":[129]},{"teal":52,"source":"contracts\\Moderator.algo.ts:42","pc":[130]},{"teal":53,"source":"contracts\\Moderator.algo.ts:41","pc":[131]},{"teal":58,"source":"contracts\\Moderator.algo.ts:46","pc":[132,133,134]},{"teal":59,"source":"contracts\\Moderator.algo.ts:46","pc":[135,136,137]},{"teal":62,"source":"contracts\\Moderator.algo.ts:46","pc":[138,139,140]},{"teal":63,"source":"contracts\\Moderator.algo.ts:46","pc":[141]},{"teal":64,"source":"contracts\\Moderator.algo.ts:46","pc":[142]},{"teal":68,"source":"contracts\\Moderator.algo.ts:46","pc":[143,144,145]},{"teal":72,"source":"contracts\\Moderator.algo.ts:47","pc":[146,147]},{"teal":73,"source":"contracts\\Moderator.algo.ts:47","pc":[148,149,150]},{"teal":74,"source":"contracts\\Moderator.algo.ts:47","pc":[151,152]},{"teal":75,"source":"contracts\\Moderator.algo.ts:47","pc":[153]},{"teal":76,"source":"contracts\\Moderator.algo.ts:47","pc":[154]},{"teal":77,"source":"contracts\\Moderator.algo.ts:47","pc":[155]},{"teal":81,"source":"contracts\\Moderator.algo.ts:48","pc":[156,157]},{"teal":82,"source":"contracts\\Moderator.algo.ts:48","pc":[158,159]},{"teal":83,"source":"contracts\\Moderator.algo.ts:48","pc":[160]},{"teal":84,"source":"contracts\\Moderator.algo.ts:48","pc":[161]},{"teal":85,"source":"contracts\\Moderator.algo.ts:48","pc":[162]},{"teal":86,"source":"contracts\\Moderator.algo.ts:48","pc":[163,164,165]},{"teal":87,"source":"contracts\\Moderator.algo.ts:48","pc":[166]},{"teal":88,"source":"contracts\\Moderator.algo.ts:48","pc":[167]},{"teal":89,"source":"contracts\\Moderator.algo.ts:48","pc":[168]},{"teal":90,"source":"contracts\\Moderator.algo.ts:46","pc":[169]},{"teal":95,"source":"contracts\\Moderator.algo.ts:52","pc":[170]},{"teal":98,"source":"contracts\\Moderator.algo.ts:52","pc":[171,172]},{"teal":99,"source":"contracts\\Moderator.algo.ts:52","pc":[173]},{"teal":100,"source":"contracts\\Moderator.algo.ts:52","pc":[174]},{"teal":101,"source":"contracts\\Moderator.algo.ts:52","pc":[175]},{"teal":102,"source":"contracts\\Moderator.algo.ts:52","pc":[176,177]},{"teal":103,"source":"contracts\\Moderator.algo.ts:52","pc":[178]},{"teal":104,"source":"contracts\\Moderator.algo.ts:52","pc":[179]},{"teal":107,"source":"contracts\\Moderator.algo.ts:52","errorMessage":"argument 0 (rewardPoolTxn) for assignRewardPool must be a pay transaction","pc":[180]},{"teal":110,"source":"contracts\\Moderator.algo.ts:52","pc":[181,182,183]},{"teal":111,"source":"contracts\\Moderator.algo.ts:52","pc":[184]},{"teal":114,"source":"contracts\\Moderator.algo.ts:52","pc":[185,186,187]},{"teal":115,"source":"contracts\\Moderator.algo.ts:52","pc":[188]},{"teal":116,"source":"contracts\\Moderator.algo.ts:52","pc":[189]},{"teal":117,"source":"contracts\\Moderator.algo.ts:52","pc":[190]},{"teal":118,"source":"contracts\\Moderator.algo.ts:52","pc":[191]},{"teal":119,"source":"contracts\\Moderator.algo.ts:52","pc":[192]},{"teal":123,"source":"contracts\\Moderator.algo.ts:52","pc":[193,194,195]},{"teal":132,"source":"contracts\\Moderator.algo.ts:53","pc":[196,197]},{"teal":133,"source":"contracts\\Moderator.algo.ts:54","pc":[198,199]},{"teal":134,"source":"contracts\\Moderator.algo.ts:54","pc":[200,201]},{"teal":135,"source":"contracts\\Moderator.algo.ts:54","pc":[202]},{"teal":138,"source":"contracts\\Moderator.algo.ts:54","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[203]},{"teal":141,"source":"contracts\\Moderator.algo.ts:53","pc":[204,205]},{"teal":142,"source":"contracts\\Moderator.algo.ts:55","pc":[206,207]},{"teal":143,"source":"contracts\\Moderator.algo.ts:55","pc":[208,209]},{"teal":144,"source":"contracts\\Moderator.algo.ts:55","pc":[210]},{"teal":147,"source":"contracts\\Moderator.algo.ts:55","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[211]},{"teal":150,"source":"contracts\\Moderator.algo.ts:53","pc":[212,213]},{"teal":151,"source":"contracts\\Moderator.algo.ts:56","pc":[214,215]},{"teal":152,"source":"contracts\\Moderator.algo.ts:56","pc":[216,217]},{"teal":153,"source":"contracts\\Moderator.algo.ts:56","pc":[218]},{"teal":156,"source":"contracts\\Moderator.algo.ts:56","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"amount\",\"expected\":\"rewardPoolAmount\"}","pc":[219]},{"teal":160,"source":"contracts\\Moderator.algo.ts:58","pc":[220,221,222,223,224,225,226,227,228,229,230,231]},{"teal":161,"source":"contracts\\Moderator.algo.ts:58","pc":[232,233]},{"teal":162,"source":"contracts\\Moderator.algo.ts:58","pc":[234]},{"teal":166,"source":"contracts\\Moderator.algo.ts:59","pc":[235]},{"teal":167,"source":"contracts\\Moderator.algo.ts:59","pc":[236]},{"teal":168,"source":"contracts\\Moderator.algo.ts:59","pc":[237,238]},{"teal":169,"source":"contracts\\Moderator.algo.ts:59","pc":[239]},{"teal":170,"source":"contracts\\Moderator.algo.ts:59","pc":[240,241]},{"teal":171,"source":"contracts\\Moderator.algo.ts:59","pc":[242]},{"teal":172,"source":"contracts\\Moderator.algo.ts:59","pc":[243]},{"teal":173,"source":"contracts\\Moderator.algo.ts:59","pc":[244]},{"teal":174,"source":"contracts\\Moderator.algo.ts:59","pc":[245]},{"teal":175,"source":"contracts\\Moderator.algo.ts:59","pc":[246]},{"teal":178,"source":"contracts\\Moderator.algo.ts:59","errorMessage":"wideRatio failed","pc":[247]},{"teal":179,"source":"contracts\\Moderator.algo.ts:59","pc":[248]},{"teal":183,"source":"contracts\\Moderator.algo.ts:60","pc":[249]},{"teal":184,"source":"contracts\\Moderator.algo.ts:52","pc":[250]},{"teal":189,"source":"contracts\\Moderator.algo.ts:64","pc":[251]},{"teal":192,"source":"contracts\\Moderator.algo.ts:64","pc":[252,253]},{"teal":193,"source":"contracts\\Moderator.algo.ts:64","pc":[254]},{"teal":194,"source":"contracts\\Moderator.algo.ts:64","pc":[255]},{"teal":195,"source":"contracts\\Moderator.algo.ts:64","pc":[256]},{"teal":196,"source":"contracts\\Moderator.algo.ts:64","pc":[257,258]},{"teal":197,"source":"contracts\\Moderator.algo.ts:64","pc":[259]},{"teal":198,"source":"contracts\\Moderator.algo.ts:64","pc":[260]},{"teal":201,"source":"contracts\\Moderator.algo.ts:64","errorMessage":"argument 0 (stakeAmountTxn) for creatorCommitToListing must be a pay transaction","pc":[261]},{"teal":204,"source":"contracts\\Moderator.algo.ts:64","pc":[262,263,264]},{"teal":205,"source":"contracts\\Moderator.algo.ts:64","pc":[265]},{"teal":206,"source":"contracts\\Moderator.algo.ts:64","pc":[266]},{"teal":207,"source":"contracts\\Moderator.algo.ts:64","pc":[267]},{"teal":208,"source":"contracts\\Moderator.algo.ts:64","pc":[268]},{"teal":209,"source":"contracts\\Moderator.algo.ts:64","pc":[269]},{"teal":213,"source":"contracts\\Moderator.algo.ts:64","pc":[270,271,272]},{"teal":217,"source":"contracts\\Moderator.algo.ts:65","pc":[273,274]},{"teal":218,"source":"contracts\\Moderator.algo.ts:65","pc":[275,276,277]},{"teal":219,"source":"contracts\\Moderator.algo.ts:65","pc":[278,279]},{"teal":220,"source":"contracts\\Moderator.algo.ts:65","pc":[280]},{"teal":221,"source":"contracts\\Moderator.algo.ts:65","pc":[281]},{"teal":222,"source":"contracts\\Moderator.algo.ts:65","pc":[282]},{"teal":231,"source":"contracts\\Moderator.algo.ts:66","pc":[283,284]},{"teal":232,"source":"contracts\\Moderator.algo.ts:67","pc":[285,286]},{"teal":233,"source":"contracts\\Moderator.algo.ts:67","pc":[287,288]},{"teal":234,"source":"contracts\\Moderator.algo.ts:67","pc":[289]},{"teal":237,"source":"contracts\\Moderator.algo.ts:67","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[290]},{"teal":240,"source":"contracts\\Moderator.algo.ts:66","pc":[291,292]},{"teal":241,"source":"contracts\\Moderator.algo.ts:68","pc":[293,294]},{"teal":242,"source":"contracts\\Moderator.algo.ts:68","pc":[295,296]},{"teal":243,"source":"contracts\\Moderator.algo.ts:68","pc":[297]},{"teal":246,"source":"contracts\\Moderator.algo.ts:68","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[298]},{"teal":249,"source":"contracts\\Moderator.algo.ts:66","pc":[299,300]},{"teal":250,"source":"contracts\\Moderator.algo.ts:69","pc":[301,302]},{"teal":251,"source":"contracts\\Moderator.algo.ts:69","pc":[303]},{"teal":252,"source":"contracts\\Moderator.algo.ts:69","pc":[304]},{"teal":253,"source":"contracts\\Moderator.algo.ts:69","pc":[305]},{"teal":256,"source":"contracts\\Moderator.algo.ts:69","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"amount\",\"expected\":\"this.stakeAmount.value\"}","pc":[306]},{"teal":260,"source":"contracts\\Moderator.algo.ts:72","pc":[307]},{"teal":261,"source":"contracts\\Moderator.algo.ts:64","pc":[308]},{"teal":266,"source":"contracts\\Moderator.algo.ts:76","pc":[309]},{"teal":269,"source":"contracts\\Moderator.algo.ts:76","pc":[310,311]},{"teal":270,"source":"contracts\\Moderator.algo.ts:76","pc":[312]},{"teal":271,"source":"contracts\\Moderator.algo.ts:76","pc":[313]},{"teal":272,"source":"contracts\\Moderator.algo.ts:76","pc":[314]},{"teal":273,"source":"contracts\\Moderator.algo.ts:76","pc":[315,316]},{"teal":274,"source":"contracts\\Moderator.algo.ts:76","pc":[317]},{"teal":275,"source":"contracts\\Moderator.algo.ts:76","pc":[318]},{"teal":278,"source":"contracts\\Moderator.algo.ts:76","errorMessage":"argument 0 (stakeAmountTxn) for commitToListing must be a pay transaction","pc":[319]},{"teal":281,"source":"contracts\\Moderator.algo.ts:76","pc":[320,321,322]},{"teal":282,"source":"contracts\\Moderator.algo.ts:76","pc":[323]},{"teal":283,"source":"contracts\\Moderator.algo.ts:76","pc":[324]},{"teal":284,"source":"contracts\\Moderator.algo.ts:76","pc":[325]},{"teal":285,"source":"contracts\\Moderator.algo.ts:76","pc":[326]},{"teal":286,"source":"contracts\\Moderator.algo.ts:76","pc":[327]},{"teal":290,"source":"contracts\\Moderator.algo.ts:76","pc":[328,329,330]},{"teal":299,"source":"contracts\\Moderator.algo.ts:77","pc":[331,332]},{"teal":300,"source":"contracts\\Moderator.algo.ts:78","pc":[333,334]},{"teal":301,"source":"contracts\\Moderator.algo.ts:78","pc":[335,336]},{"teal":302,"source":"contracts\\Moderator.algo.ts:78","pc":[337]},{"teal":305,"source":"contracts\\Moderator.algo.ts:78","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[338]},{"teal":308,"source":"contracts\\Moderator.algo.ts:77","pc":[339,340]},{"teal":309,"source":"contracts\\Moderator.algo.ts:79","pc":[341,342]},{"teal":310,"source":"contracts\\Moderator.algo.ts:79","pc":[343,344]},{"teal":311,"source":"contracts\\Moderator.algo.ts:79","pc":[345]},{"teal":314,"source":"contracts\\Moderator.algo.ts:79","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[346]},{"teal":317,"source":"contracts\\Moderator.algo.ts:77","pc":[347,348]},{"teal":318,"source":"contracts\\Moderator.algo.ts:80","pc":[349,350]},{"teal":319,"source":"contracts\\Moderator.algo.ts:80","pc":[351]},{"teal":320,"source":"contracts\\Moderator.algo.ts:80","pc":[352]},{"teal":321,"source":"contracts\\Moderator.algo.ts:80","pc":[353]},{"teal":324,"source":"contracts\\Moderator.algo.ts:80","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"amount\",\"expected\":\"this.stakeAmount.value\"}","pc":[354]},{"teal":328,"source":"contracts\\Moderator.algo.ts:83","pc":[355]},{"teal":329,"source":"contracts\\Moderator.algo.ts:76","pc":[356]},{"teal":334,"source":"contracts\\Moderator.algo.ts:87","pc":[357]},{"teal":337,"source":"contracts\\Moderator.algo.ts:87","pc":[358,359,360]},{"teal":338,"source":"contracts\\Moderator.algo.ts:87","pc":[361]},{"teal":339,"source":"contracts\\Moderator.algo.ts:87","pc":[362]},{"teal":340,"source":"contracts\\Moderator.algo.ts:87","pc":[363]},{"teal":341,"source":"contracts\\Moderator.algo.ts:87","pc":[364]},{"teal":342,"source":"contracts\\Moderator.algo.ts:87","pc":[365]},{"teal":346,"source":"contracts\\Moderator.algo.ts:87","pc":[366,367,368]},{"teal":350,"source":"contracts\\Moderator.algo.ts:88","pc":[369,370]},{"teal":351,"source":"contracts\\Moderator.algo.ts:88","pc":[371,372]},{"teal":352,"source":"contracts\\Moderator.algo.ts:88","pc":[373]},{"teal":353,"source":"contracts\\Moderator.algo.ts:87","pc":[374]},{"teal":358,"source":"contracts\\Moderator.algo.ts:92","pc":[375]},{"teal":361,"source":"contracts\\Moderator.algo.ts:93","pc":[376,377,378]},{"teal":362,"source":"contracts\\Moderator.algo.ts:93","pc":[379,380,381]},{"teal":365,"source":"contracts\\Moderator.algo.ts:93","pc":[382,383,384]},{"teal":366,"source":"contracts\\Moderator.algo.ts:93","pc":[385,386,387]},{"teal":369,"source":"contracts\\Moderator.algo.ts:92","pc":[388,389,390]},{"teal":370,"source":"contracts\\Moderator.algo.ts:92","pc":[391]},{"teal":371,"source":"contracts\\Moderator.algo.ts:92","pc":[392]},{"teal":372,"source":"contracts\\Moderator.algo.ts:92","pc":[393]},{"teal":373,"source":"contracts\\Moderator.algo.ts:92","pc":[394]},{"teal":374,"source":"contracts\\Moderator.algo.ts:92","pc":[395]},{"teal":378,"source":"contracts\\Moderator.algo.ts:92","pc":[396,397,398]},{"teal":381,"source":"contracts\\Moderator.algo.ts:92","pc":[399]},{"teal":382,"source":"contracts\\Moderator.algo.ts:92","pc":[400,401]},{"teal":386,"source":"contracts\\Moderator.algo.ts:94","pc":[402,403]},{"teal":387,"source":"contracts\\Moderator.algo.ts:94","pc":[404,405,406]},{"teal":388,"source":"contracts\\Moderator.algo.ts:94","pc":[407,408]},{"teal":389,"source":"contracts\\Moderator.algo.ts:94","pc":[409]},{"teal":390,"source":"contracts\\Moderator.algo.ts:94","pc":[410]},{"teal":391,"source":"contracts\\Moderator.algo.ts:94","pc":[411]},{"teal":395,"source":"contracts\\Moderator.algo.ts:95","pc":[412,413]},{"teal":396,"source":"contracts\\Moderator.algo.ts:95","pc":[414]},{"teal":397,"source":"contracts\\Moderator.algo.ts:95","pc":[415]},{"teal":398,"source":"contracts\\Moderator.algo.ts:95","pc":[416]},{"teal":399,"source":"contracts\\Moderator.algo.ts:95","pc":[417,418]},{"teal":400,"source":"contracts\\Moderator.algo.ts:95","pc":[419]},{"teal":401,"source":"contracts\\Moderator.algo.ts:95","pc":[420]},{"teal":402,"source":"contracts\\Moderator.algo.ts:95","pc":[421]},{"teal":403,"source":"contracts\\Moderator.algo.ts:95","pc":[422]},{"teal":406,"source":"contracts\\Moderator.algo.ts:95","errorMessage":"Arrays must have the same length","pc":[423]},{"teal":410,"source":"contracts\\Moderator.algo.ts:97","pc":[424]},{"teal":411,"source":"contracts\\Moderator.algo.ts:97","pc":[425,426]},{"teal":415,"source":"contracts\\Moderator.algo.ts:98","pc":[427]},{"teal":416,"source":"contracts\\Moderator.algo.ts:98","pc":[428,429]},{"teal":421,"source":"contracts\\Moderator.algo.ts:98","pc":[430,431]},{"teal":422,"source":"contracts\\Moderator.algo.ts:98","pc":[432,433]},{"teal":423,"source":"contracts\\Moderator.algo.ts:98","pc":[434]},{"teal":424,"source":"contracts\\Moderator.algo.ts:98","pc":[435]},{"teal":425,"source":"contracts\\Moderator.algo.ts:98","pc":[436]},{"teal":426,"source":"contracts\\Moderator.algo.ts:98","pc":[437]},{"teal":427,"source":"contracts\\Moderator.algo.ts:98","pc":[438,439,440]},{"teal":431,"source":"contracts\\Moderator.algo.ts:99","pc":[441,442]},{"teal":432,"source":"contracts\\Moderator.algo.ts:99","pc":[443,444]},{"teal":433,"source":"contracts\\Moderator.algo.ts:99","pc":[445,446]},{"teal":434,"source":"contracts\\Moderator.algo.ts:99","pc":[447]},{"teal":435,"source":"contracts\\Moderator.algo.ts:99","pc":[448,449]},{"teal":436,"source":"contracts\\Moderator.algo.ts:99","pc":[450]},{"teal":437,"source":"contracts\\Moderator.algo.ts:99","pc":[451]},{"teal":438,"source":"contracts\\Moderator.algo.ts:99","pc":[452]},{"teal":439,"source":"contracts\\Moderator.algo.ts:99","pc":[453,454]},{"teal":440,"source":"contracts\\Moderator.algo.ts:99","pc":[455]},{"teal":441,"source":"contracts\\Moderator.algo.ts:99","pc":[456]},{"teal":442,"source":"contracts\\Moderator.algo.ts:99","pc":[457]},{"teal":443,"source":"contracts\\Moderator.algo.ts:99","pc":[458]},{"teal":444,"source":"contracts\\Moderator.algo.ts:99","pc":[459]},{"teal":445,"source":"contracts\\Moderator.algo.ts:99","pc":[460,461]},{"teal":450,"source":"contracts\\Moderator.algo.ts:98","pc":[462,463]},{"teal":451,"source":"contracts\\Moderator.algo.ts:98","pc":[464]},{"teal":452,"source":"contracts\\Moderator.algo.ts:98","pc":[465]},{"teal":453,"source":"contracts\\Moderator.algo.ts:98","pc":[466,467]},{"teal":454,"source":"contracts\\Moderator.algo.ts:98","pc":[468,469,470]},{"teal":459,"source":"contracts\\Moderator.algo.ts:102","pc":[471,472]},{"teal":460,"source":"contracts\\Moderator.algo.ts:102","pc":[473]},{"teal":461,"source":"contracts\\Moderator.algo.ts:102","pc":[474]},{"teal":462,"source":"contracts\\Moderator.algo.ts:102","pc":[475]},{"teal":463,"source":"contracts\\Moderator.algo.ts:102","pc":[476]},{"teal":464,"source":"contracts\\Moderator.algo.ts:102","pc":[477]},{"teal":465,"source":"contracts\\Moderator.algo.ts:102","pc":[478]},{"teal":466,"source":"contracts\\Moderator.algo.ts:102","pc":[479]},{"teal":467,"source":"contracts\\Moderator.algo.ts:102","pc":[480]},{"teal":468,"source":"contracts\\Moderator.algo.ts:102","pc":[481]},{"teal":469,"source":"contracts\\Moderator.algo.ts:102","pc":[482]},{"teal":470,"source":"contracts\\Moderator.algo.ts:102","pc":[483]},{"teal":471,"source":"contracts\\Moderator.algo.ts:102","pc":[484]},{"teal":472,"source":"contracts\\Moderator.algo.ts:102","pc":[485]},{"teal":475,"source":"contracts\\Moderator.algo.ts:102","errorMessage":"wideRatio failed","pc":[486]},{"teal":476,"source":"contracts\\Moderator.algo.ts:102","pc":[487,488]},{"teal":480,"source":"contracts\\Moderator.algo.ts:104","pc":[489,490]},{"teal":481,"source":"contracts\\Moderator.algo.ts:104","pc":[491,492]},{"teal":482,"source":"contracts\\Moderator.algo.ts:104","pc":[493]},{"teal":483,"source":"contracts\\Moderator.algo.ts:104","pc":[494,495]},{"teal":487,"source":"contracts\\Moderator.algo.ts:106","pc":[496,497]},{"teal":488,"source":"contracts\\Moderator.algo.ts:106","pc":[498,499]},{"teal":489,"source":"contracts\\Moderator.algo.ts:106","pc":[500]},{"teal":490,"source":"contracts\\Moderator.algo.ts:106","pc":[501,502]},{"teal":491,"source":"contracts\\Moderator.algo.ts:106","pc":[503]},{"teal":494,"source":"contracts\\Moderator.algo.ts:106","errorMessage":"Insufficient balance for rewards","pc":[504]},{"teal":498,"source":"contracts\\Moderator.algo.ts:108","pc":[505]},{"teal":499,"source":"contracts\\Moderator.algo.ts:108","pc":[506,507]},{"teal":504,"source":"contracts\\Moderator.algo.ts:108","pc":[508,509]},{"teal":505,"source":"contracts\\Moderator.algo.ts:108","pc":[510,511]},{"teal":506,"source":"contracts\\Moderator.algo.ts:108","pc":[512]},{"teal":507,"source":"contracts\\Moderator.algo.ts:108","pc":[513]},{"teal":508,"source":"contracts\\Moderator.algo.ts:108","pc":[514]},{"teal":509,"source":"contracts\\Moderator.algo.ts:108","pc":[515]},{"teal":510,"source":"contracts\\Moderator.algo.ts:108","pc":[516,517,518]},{"teal":518,"source":"contracts\\Moderator.algo.ts:109","pc":[519]},{"teal":519,"source":"contracts\\Moderator.algo.ts:109","pc":[520]},{"teal":520,"source":"contracts\\Moderator.algo.ts:109","pc":[521,522]},{"teal":524,"source":"contracts\\Moderator.algo.ts:110","pc":[523,524]},{"teal":525,"source":"contracts\\Moderator.algo.ts:110","pc":[525,526]},{"teal":526,"source":"contracts\\Moderator.algo.ts:110","pc":[527]},{"teal":527,"source":"contracts\\Moderator.algo.ts:110","pc":[528,529]},{"teal":528,"source":"contracts\\Moderator.algo.ts:110","pc":[530]},{"teal":529,"source":"contracts\\Moderator.algo.ts:110","pc":[531]},{"teal":530,"source":"contracts\\Moderator.algo.ts:110","pc":[532]},{"teal":531,"source":"contracts\\Moderator.algo.ts:110","pc":[533,534]},{"teal":532,"source":"contracts\\Moderator.algo.ts:110","pc":[535]},{"teal":533,"source":"contracts\\Moderator.algo.ts:110","pc":[536]},{"teal":534,"source":"contracts\\Moderator.algo.ts:110","pc":[537]},{"teal":535,"source":"contracts\\Moderator.algo.ts:110","pc":[538]},{"teal":536,"source":"contracts\\Moderator.algo.ts:110","pc":[539]},{"teal":537,"source":"contracts\\Moderator.algo.ts:110","pc":[540]},{"teal":538,"source":"contracts\\Moderator.algo.ts:110","pc":[541]},{"teal":539,"source":"contracts\\Moderator.algo.ts:110","pc":[542,543]},{"teal":543,"source":"contracts\\Moderator.algo.ts:111","pc":[544,545]},{"teal":544,"source":"contracts\\Moderator.algo.ts:111","pc":[546,547]},{"teal":545,"source":"contracts\\Moderator.algo.ts:111","pc":[548]},{"teal":546,"source":"contracts\\Moderator.algo.ts:111","pc":[549,550]},{"teal":547,"source":"contracts\\Moderator.algo.ts:111","pc":[551]},{"teal":548,"source":"contracts\\Moderator.algo.ts:111","pc":[552]},{"teal":549,"source":"contracts\\Moderator.algo.ts:111","pc":[553]},{"teal":550,"source":"contracts\\Moderator.algo.ts:111","pc":[554,555]},{"teal":551,"source":"contracts\\Moderator.algo.ts:111","pc":[556]},{"teal":552,"source":"contracts\\Moderator.algo.ts:111","pc":[557]},{"teal":553,"source":"contracts\\Moderator.algo.ts:111","pc":[558]},{"teal":554,"source":"contracts\\Moderator.algo.ts:111","pc":[559,560]},{"teal":558,"source":"contracts\\Moderator.algo.ts:112","pc":[561,562]},{"teal":559,"source":"contracts\\Moderator.algo.ts:112","pc":[563,564]},{"teal":562,"source":"contracts\\Moderator.algo.ts:109","pc":[565]},{"teal":563,"source":"contracts\\Moderator.algo.ts:109","pc":[566,567]},{"teal":566,"source":"contracts\\Moderator.algo.ts:109","pc":[568]},{"teal":571,"source":"contracts\\Moderator.algo.ts:108","pc":[569,570]},{"teal":572,"source":"contracts\\Moderator.algo.ts:108","pc":[571]},{"teal":573,"source":"contracts\\Moderator.algo.ts:108","pc":[572]},{"teal":574,"source":"contracts\\Moderator.algo.ts:108","pc":[573,574]},{"teal":575,"source":"contracts\\Moderator.algo.ts:108","pc":[575,576,577]},{"teal":580,"source":"contracts\\Moderator.algo.ts:116","pc":[578]},{"teal":581,"source":"contracts\\Moderator.algo.ts:116","pc":[579,580]},{"teal":586,"source":"contracts\\Moderator.algo.ts:116","pc":[581,582]},{"teal":587,"source":"contracts\\Moderator.algo.ts:116","pc":[583,584]},{"teal":588,"source":"contracts\\Moderator.algo.ts:116","pc":[585]},{"teal":589,"source":"contracts\\Moderator.algo.ts:116","pc":[586]},{"teal":590,"source":"contracts\\Moderator.algo.ts:116","pc":[587]},{"teal":591,"source":"contracts\\Moderator.algo.ts:116","pc":[588]},{"teal":592,"source":"contracts\\Moderator.algo.ts:116","pc":[589,590,591]},{"teal":596,"source":"contracts\\Moderator.algo.ts:117","pc":[592,593]},{"teal":597,"source":"contracts\\Moderator.algo.ts:117","pc":[594,595]},{"teal":598,"source":"contracts\\Moderator.algo.ts:117","pc":[596]},{"teal":599,"source":"contracts\\Moderator.algo.ts:117","pc":[597,598]},{"teal":600,"source":"contracts\\Moderator.algo.ts:117","pc":[599]},{"teal":601,"source":"contracts\\Moderator.algo.ts:117","pc":[600]},{"teal":602,"source":"contracts\\Moderator.algo.ts:117","pc":[601]},{"teal":603,"source":"contracts\\Moderator.algo.ts:117","pc":[602,603]},{"teal":604,"source":"contracts\\Moderator.algo.ts:117","pc":[604]},{"teal":605,"source":"contracts\\Moderator.algo.ts:117","pc":[605]},{"teal":606,"source":"contracts\\Moderator.algo.ts:117","pc":[606]},{"teal":607,"source":"contracts\\Moderator.algo.ts:117","pc":[607,608,609]},{"teal":612,"source":"contracts\\Moderator.algo.ts:116","pc":[610,611]},{"teal":613,"source":"contracts\\Moderator.algo.ts:116","pc":[612]},{"teal":614,"source":"contracts\\Moderator.algo.ts:116","pc":[613]},{"teal":615,"source":"contracts\\Moderator.algo.ts:116","pc":[614,615]},{"teal":616,"source":"contracts\\Moderator.algo.ts:116","pc":[616,617,618]},{"teal":621,"source":"contracts\\Moderator.algo.ts:120","pc":[619,620,621]},{"teal":625,"source":"contracts\\Moderator.algo.ts:122","pc":[622]},{"teal":628,"source":"contracts\\Moderator.algo.ts:92","pc":[623,624]},{"teal":631,"source":"contracts\\Moderator.algo.ts:92","pc":[625,626]},{"teal":632,"source":"contracts\\Moderator.algo.ts:92","pc":[627]},{"teal":637,"source":"contracts\\Moderator.algo.ts:126","pc":[628]},{"teal":640,"source":"contracts\\Moderator.algo.ts:127","pc":[629,630,631]},{"teal":641,"source":"contracts\\Moderator.algo.ts:127","pc":[632,633,634]},{"teal":644,"source":"contracts\\Moderator.algo.ts:127","pc":[635,636,637]},{"teal":645,"source":"contracts\\Moderator.algo.ts:127","pc":[638,639,640]},{"teal":648,"source":"contracts\\Moderator.algo.ts:126","pc":[641,642,643]},{"teal":649,"source":"contracts\\Moderator.algo.ts:126","pc":[644]},{"teal":650,"source":"contracts\\Moderator.algo.ts:126","pc":[645]},{"teal":651,"source":"contracts\\Moderator.algo.ts:126","pc":[646]},{"teal":652,"source":"contracts\\Moderator.algo.ts:126","pc":[647]},{"teal":653,"source":"contracts\\Moderator.algo.ts:126","pc":[648]},{"teal":657,"source":"contracts\\Moderator.algo.ts:126","pc":[649,650,651]},{"teal":660,"source":"contracts\\Moderator.algo.ts:126","pc":[652]},{"teal":661,"source":"contracts\\Moderator.algo.ts:126","pc":[653,654]},{"teal":665,"source":"contracts\\Moderator.algo.ts:128","pc":[655,656]},{"teal":666,"source":"contracts\\Moderator.algo.ts:128","pc":[657]},{"teal":667,"source":"contracts\\Moderator.algo.ts:128","pc":[658]},{"teal":668,"source":"contracts\\Moderator.algo.ts:128","pc":[659]},{"teal":669,"source":"contracts\\Moderator.algo.ts:128","pc":[660,661]},{"teal":670,"source":"contracts\\Moderator.algo.ts:128","pc":[662]},{"teal":671,"source":"contracts\\Moderator.algo.ts:128","pc":[663]},{"teal":672,"source":"contracts\\Moderator.algo.ts:128","pc":[664]},{"teal":673,"source":"contracts\\Moderator.algo.ts:128","pc":[665]},{"teal":676,"source":"contracts\\Moderator.algo.ts:128","errorMessage":"Arrays must have the same length","pc":[666]},{"teal":680,"source":"contracts\\Moderator.algo.ts:130","pc":[667]},{"teal":681,"source":"contracts\\Moderator.algo.ts:130","pc":[668,669]},{"teal":685,"source":"contracts\\Moderator.algo.ts:131","pc":[670]},{"teal":686,"source":"contracts\\Moderator.algo.ts:131","pc":[671,672]},{"teal":691,"source":"contracts\\Moderator.algo.ts:131","pc":[673,674]},{"teal":692,"source":"contracts\\Moderator.algo.ts:131","pc":[675,676]},{"teal":693,"source":"contracts\\Moderator.algo.ts:131","pc":[677]},{"teal":694,"source":"contracts\\Moderator.algo.ts:131","pc":[678]},{"teal":695,"source":"contracts\\Moderator.algo.ts:131","pc":[679]},{"teal":696,"source":"contracts\\Moderator.algo.ts:131","pc":[680]},{"teal":697,"source":"contracts\\Moderator.algo.ts:131","pc":[681,682,683]},{"teal":701,"source":"contracts\\Moderator.algo.ts:132","pc":[684,685]},{"teal":702,"source":"contracts\\Moderator.algo.ts:132","pc":[686,687]},{"teal":703,"source":"contracts\\Moderator.algo.ts:132","pc":[688,689]},{"teal":704,"source":"contracts\\Moderator.algo.ts:132","pc":[690]},{"teal":705,"source":"contracts\\Moderator.algo.ts:132","pc":[691,692]},{"teal":706,"source":"contracts\\Moderator.algo.ts:132","pc":[693]},{"teal":707,"source":"contracts\\Moderator.algo.ts:132","pc":[694]},{"teal":708,"source":"contracts\\Moderator.algo.ts:132","pc":[695]},{"teal":709,"source":"contracts\\Moderator.algo.ts:132","pc":[696,697]},{"teal":710,"source":"contracts\\Moderator.algo.ts:132","pc":[698]},{"teal":711,"source":"contracts\\Moderator.algo.ts:132","pc":[699]},{"teal":712,"source":"contracts\\Moderator.algo.ts:132","pc":[700]},{"teal":713,"source":"contracts\\Moderator.algo.ts:132","pc":[701]},{"teal":714,"source":"contracts\\Moderator.algo.ts:132","pc":[702]},{"teal":715,"source":"contracts\\Moderator.algo.ts:132","pc":[703,704]},{"teal":720,"source":"contracts\\Moderator.algo.ts:131","pc":[705,706]},{"teal":721,"source":"contracts\\Moderator.algo.ts:131","pc":[707]},{"teal":722,"source":"contracts\\Moderator.algo.ts:131","pc":[708]},{"teal":723,"source":"contracts\\Moderator.algo.ts:131","pc":[709,710]},{"teal":724,"source":"contracts\\Moderator.algo.ts:131","pc":[711,712,713]},{"teal":729,"source":"contracts\\Moderator.algo.ts:135","pc":[714,715]},{"teal":730,"source":"contracts\\Moderator.algo.ts:135","pc":[716]},{"teal":731,"source":"contracts\\Moderator.algo.ts:135","pc":[717]},{"teal":732,"source":"contracts\\Moderator.algo.ts:135","pc":[718]},{"teal":733,"source":"contracts\\Moderator.algo.ts:135","pc":[719]},{"teal":734,"source":"contracts\\Moderator.algo.ts:135","pc":[720]},{"teal":735,"source":"contracts\\Moderator.algo.ts:135","pc":[721]},{"teal":736,"source":"contracts\\Moderator.algo.ts:135","pc":[722]},{"teal":737,"source":"contracts\\Moderator.algo.ts:135","pc":[723]},{"teal":738,"source":"contracts\\Moderator.algo.ts:135","pc":[724]},{"teal":739,"source":"contracts\\Moderator.algo.ts:135","pc":[725]},{"teal":740,"source":"contracts\\Moderator.algo.ts:135","pc":[726]},{"teal":741,"source":"contracts\\Moderator.algo.ts:135","pc":[727]},{"teal":742,"source":"contracts\\Moderator.algo.ts:135","pc":[728]},{"teal":745,"source":"contracts\\Moderator.algo.ts:135","errorMessage":"wideRatio failed","pc":[729]},{"teal":746,"source":"contracts\\Moderator.algo.ts:135","pc":[730,731]},{"teal":750,"source":"contracts\\Moderator.algo.ts:137","pc":[732,733]},{"teal":751,"source":"contracts\\Moderator.algo.ts:137","pc":[734,735]},{"teal":752,"source":"contracts\\Moderator.algo.ts:137","pc":[736]},{"teal":753,"source":"contracts\\Moderator.algo.ts:137","pc":[737,738]},{"teal":757,"source":"contracts\\Moderator.algo.ts:139","pc":[739,740]},{"teal":758,"source":"contracts\\Moderator.algo.ts:139","pc":[741,742]},{"teal":759,"source":"contracts\\Moderator.algo.ts:139","pc":[743]},{"teal":760,"source":"contracts\\Moderator.algo.ts:139","pc":[744,745]},{"teal":761,"source":"contracts\\Moderator.algo.ts:139","pc":[746]},{"teal":764,"source":"contracts\\Moderator.algo.ts:139","errorMessage":"Insufficient balance for rewards","pc":[747]},{"teal":768,"source":"contracts\\Moderator.algo.ts:141","pc":[748]},{"teal":769,"source":"contracts\\Moderator.algo.ts:141","pc":[749,750]},{"teal":774,"source":"contracts\\Moderator.algo.ts:143","pc":[751,752]},{"teal":775,"source":"contracts\\Moderator.algo.ts:143","pc":[753]},{"teal":776,"source":"contracts\\Moderator.algo.ts:143","pc":[754]},{"teal":777,"source":"contracts\\Moderator.algo.ts:143","pc":[755]},{"teal":778,"source":"contracts\\Moderator.algo.ts:143","pc":[756]},{"teal":779,"source":"contracts\\Moderator.algo.ts:143","pc":[757]},{"teal":780,"source":"contracts\\Moderator.algo.ts:143","pc":[758,759,760]},{"teal":785,"source":"contracts\\Moderator.algo.ts:144","pc":[761]},{"teal":786,"source":"contracts\\Moderator.algo.ts:144","pc":[762,763]},{"teal":787,"source":"contracts\\Moderator.algo.ts:144","pc":[764,765]},{"teal":788,"source":"contracts\\Moderator.algo.ts:144","pc":[766]},{"teal":789,"source":"contracts\\Moderator.algo.ts:144","pc":[767,768]},{"teal":790,"source":"contracts\\Moderator.algo.ts:144","pc":[769]},{"teal":791,"source":"contracts\\Moderator.algo.ts:144","pc":[770]},{"teal":792,"source":"contracts\\Moderator.algo.ts:144","pc":[771,772]},{"teal":793,"source":"contracts\\Moderator.algo.ts:144","pc":[773]},{"teal":794,"source":"contracts\\Moderator.algo.ts:144","pc":[774]},{"teal":795,"source":"contracts\\Moderator.algo.ts:144","pc":[775]},{"teal":796,"source":"contracts\\Moderator.algo.ts:144","pc":[776]},{"teal":797,"source":"contracts\\Moderator.algo.ts:144","pc":[777]},{"teal":798,"source":"contracts\\Moderator.algo.ts:144","pc":[778]},{"teal":799,"source":"contracts\\Moderator.algo.ts:144","pc":[779]},{"teal":800,"source":"contracts\\Moderator.algo.ts:144","pc":[780]},{"teal":803,"source":"contracts\\Moderator.algo.ts:144","errorMessage":"wideRatio failed","pc":[781]},{"teal":804,"source":"contracts\\Moderator.algo.ts:144","pc":[782,783]},{"teal":809,"source":"contracts\\Moderator.algo.ts:147","pc":[784]},{"teal":810,"source":"contracts\\Moderator.algo.ts:147","pc":[785,786]},{"teal":815,"source":"contracts\\Moderator.algo.ts:147","pc":[787,788]},{"teal":816,"source":"contracts\\Moderator.algo.ts:147","pc":[789,790]},{"teal":817,"source":"contracts\\Moderator.algo.ts:147","pc":[791]},{"teal":818,"source":"contracts\\Moderator.algo.ts:147","pc":[792]},{"teal":819,"source":"contracts\\Moderator.algo.ts:147","pc":[793]},{"teal":820,"source":"contracts\\Moderator.algo.ts:147","pc":[794]},{"teal":821,"source":"contracts\\Moderator.algo.ts:147","pc":[795,796,797]},{"teal":829,"source":"contracts\\Moderator.algo.ts:148","pc":[798]},{"teal":830,"source":"contracts\\Moderator.algo.ts:148","pc":[799]},{"teal":831,"source":"contracts\\Moderator.algo.ts:148","pc":[800,801]},{"teal":835,"source":"contracts\\Moderator.algo.ts:149","pc":[802,803]},{"teal":836,"source":"contracts\\Moderator.algo.ts:149","pc":[804,805]},{"teal":837,"source":"contracts\\Moderator.algo.ts:149","pc":[806]},{"teal":838,"source":"contracts\\Moderator.algo.ts:149","pc":[807,808]},{"teal":839,"source":"contracts\\Moderator.algo.ts:149","pc":[809]},{"teal":840,"source":"contracts\\Moderator.algo.ts:149","pc":[810]},{"teal":841,"source":"contracts\\Moderator.algo.ts:149","pc":[811]},{"teal":842,"source":"contracts\\Moderator.algo.ts:149","pc":[812,813]},{"teal":843,"source":"contracts\\Moderator.algo.ts:149","pc":[814]},{"teal":844,"source":"contracts\\Moderator.algo.ts:149","pc":[815]},{"teal":845,"source":"contracts\\Moderator.algo.ts:149","pc":[816]},{"teal":846,"source":"contracts\\Moderator.algo.ts:149","pc":[817]},{"teal":847,"source":"contracts\\Moderator.algo.ts:149","pc":[818]},{"teal":848,"source":"contracts\\Moderator.algo.ts:149","pc":[819]},{"teal":849,"source":"contracts\\Moderator.algo.ts:149","pc":[820]},{"teal":850,"source":"contracts\\Moderator.algo.ts:149","pc":[821,822]},{"teal":851,"source":"contracts\\Moderator.algo.ts:149","pc":[823]},{"teal":852,"source":"contracts\\Moderator.algo.ts:149","pc":[824,825]},{"teal":856,"source":"contracts\\Moderator.algo.ts:150","pc":[826,827]},{"teal":857,"source":"contracts\\Moderator.algo.ts:150","pc":[828,829]},{"teal":858,"source":"contracts\\Moderator.algo.ts:150","pc":[830]},{"teal":859,"source":"contracts\\Moderator.algo.ts:150","pc":[831,832]},{"teal":860,"source":"contracts\\Moderator.algo.ts:150","pc":[833]},{"teal":861,"source":"contracts\\Moderator.algo.ts:150","pc":[834]},{"teal":862,"source":"contracts\\Moderator.algo.ts:150","pc":[835]},{"teal":863,"source":"contracts\\Moderator.algo.ts:150","pc":[836,837]},{"teal":864,"source":"contracts\\Moderator.algo.ts:150","pc":[838]},{"teal":865,"source":"contracts\\Moderator.algo.ts:150","pc":[839]},{"teal":866,"source":"contracts\\Moderator.algo.ts:150","pc":[840]},{"teal":867,"source":"contracts\\Moderator.algo.ts:150","pc":[841,842]},{"teal":871,"source":"contracts\\Moderator.algo.ts:151","pc":[843,844]},{"teal":872,"source":"contracts\\Moderator.algo.ts:151","pc":[845,846]},{"teal":875,"source":"contracts\\Moderator.algo.ts:148","pc":[847]},{"teal":876,"source":"contracts\\Moderator.algo.ts:148","pc":[848,849]},{"teal":879,"source":"contracts\\Moderator.algo.ts:148","pc":[850]},{"teal":884,"source":"contracts\\Moderator.algo.ts:147","pc":[851,852]},{"teal":885,"source":"contracts\\Moderator.algo.ts:147","pc":[853]},{"teal":886,"source":"contracts\\Moderator.algo.ts:147","pc":[854]},{"teal":887,"source":"contracts\\Moderator.algo.ts:147","pc":[855,856]},{"teal":888,"source":"contracts\\Moderator.algo.ts:147","pc":[857,858,859]},{"teal":893,"source":"contracts\\Moderator.algo.ts:155","pc":[860]},{"teal":894,"source":"contracts\\Moderator.algo.ts:155","pc":[861,862]},{"teal":899,"source":"contracts\\Moderator.algo.ts:155","pc":[863,864]},{"teal":900,"source":"contracts\\Moderator.algo.ts:155","pc":[865,866]},{"teal":901,"source":"contracts\\Moderator.algo.ts:155","pc":[867]},{"teal":902,"source":"contracts\\Moderator.algo.ts:155","pc":[868]},{"teal":903,"source":"contracts\\Moderator.algo.ts:155","pc":[869]},{"teal":904,"source":"contracts\\Moderator.algo.ts:155","pc":[870]},{"teal":905,"source":"contracts\\Moderator.algo.ts:155","pc":[871,872,873]},{"teal":909,"source":"contracts\\Moderator.algo.ts:156","pc":[874,875]},{"teal":910,"source":"contracts\\Moderator.algo.ts:156","pc":[876,877]},{"teal":911,"source":"contracts\\Moderator.algo.ts:156","pc":[878]},{"teal":912,"source":"contracts\\Moderator.algo.ts:156","pc":[879,880]},{"teal":913,"source":"contracts\\Moderator.algo.ts:156","pc":[881]},{"teal":914,"source":"contracts\\Moderator.algo.ts:156","pc":[882]},{"teal":915,"source":"contracts\\Moderator.algo.ts:156","pc":[883]},{"teal":916,"source":"contracts\\Moderator.algo.ts:156","pc":[884,885]},{"teal":917,"source":"contracts\\Moderator.algo.ts:156","pc":[886]},{"teal":918,"source":"contracts\\Moderator.algo.ts:156","pc":[887]},{"teal":919,"source":"contracts\\Moderator.algo.ts:156","pc":[888]},{"teal":920,"source":"contracts\\Moderator.algo.ts:156","pc":[889,890,891]},{"teal":925,"source":"contracts\\Moderator.algo.ts:155","pc":[892,893]},{"teal":926,"source":"contracts\\Moderator.algo.ts:155","pc":[894]},{"teal":927,"source":"contracts\\Moderator.algo.ts:155","pc":[895]},{"teal":928,"source":"contracts\\Moderator.algo.ts:155","pc":[896,897]},{"teal":929,"source":"contracts\\Moderator.algo.ts:155","pc":[898,899,900]},{"teal":934,"source":"contracts\\Moderator.algo.ts:159","pc":[901,902,903]},{"teal":938,"source":"contracts\\Moderator.algo.ts:161","pc":[904]},{"teal":941,"source":"contracts\\Moderator.algo.ts:126","pc":[905,906]},{"teal":944,"source":"contracts\\Moderator.algo.ts:126","pc":[907,908]},{"teal":945,"source":"contracts\\Moderator.algo.ts:126","pc":[909]},{"teal":950,"source":"contracts\\Moderator.algo.ts:165","pc":[910,911]},{"teal":951,"source":"contracts\\Moderator.algo.ts:165","pc":[912]},{"teal":952,"source":"contracts\\Moderator.algo.ts:165","pc":[913]},{"teal":953,"source":"contracts\\Moderator.algo.ts:165","pc":[914]},{"teal":954,"source":"contracts\\Moderator.algo.ts:165","pc":[915,916]},{"teal":955,"source":"contracts\\Moderator.algo.ts:165","pc":[917]},{"teal":956,"source":"contracts\\Moderator.algo.ts:165","pc":[918]},{"teal":959,"source":"contracts\\Moderator.algo.ts:165","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[919]},{"teal":962,"source":"contracts\\Moderator.algo.ts:165","pc":[920,921,922]},{"teal":963,"source":"contracts\\Moderator.algo.ts:165","pc":[923]},{"teal":964,"source":"contracts\\Moderator.algo.ts:165","pc":[924]},{"teal":965,"source":"contracts\\Moderator.algo.ts:165","pc":[925]},{"teal":966,"source":"contracts\\Moderator.algo.ts:165","pc":[926]},{"teal":969,"source":"contracts\\Moderator.algo.ts:165","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[927]},{"teal":972,"source":"contracts\\Moderator.algo.ts:165","pc":[928,929,930]},{"teal":973,"source":"contracts\\Moderator.algo.ts:165","pc":[931]},{"teal":974,"source":"contracts\\Moderator.algo.ts:165","pc":[932]},{"teal":978,"source":"contracts\\Moderator.algo.ts:165","pc":[933,934,935]},{"teal":983,"source":"contracts\\Moderator.algo.ts:166","pc":[936,937]},{"teal":984,"source":"contracts\\Moderator.algo.ts:166","pc":[938,939,940]},{"teal":985,"source":"contracts\\Moderator.algo.ts:166","pc":[941,942]},{"teal":986,"source":"contracts\\Moderator.algo.ts:166","pc":[943]},{"teal":987,"source":"contracts\\Moderator.algo.ts:166","pc":[944]},{"teal":990,"source":"contracts\\Moderator.algo.ts:166","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[945]},{"teal":999,"source":"contracts\\Moderator.algo.ts:167","pc":[946,947]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:168","pc":[948,949]},{"teal":1001,"source":"contracts\\Moderator.algo.ts:168","pc":[950,951]},{"teal":1002,"source":"contracts\\Moderator.algo.ts:168","pc":[952]},{"teal":1005,"source":"contracts\\Moderator.algo.ts:168","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[953]},{"teal":1008,"source":"contracts\\Moderator.algo.ts:167","pc":[954,955]},{"teal":1009,"source":"contracts\\Moderator.algo.ts:169","pc":[956,957]},{"teal":1010,"source":"contracts\\Moderator.algo.ts:169","pc":[958,959]},{"teal":1011,"source":"contracts\\Moderator.algo.ts:169","pc":[960]},{"teal":1014,"source":"contracts\\Moderator.algo.ts:169","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[961]},{"teal":1017,"source":"contracts\\Moderator.algo.ts:167","pc":[962,963]},{"teal":1018,"source":"contracts\\Moderator.algo.ts:170","pc":[964,965]},{"teal":1019,"source":"contracts\\Moderator.algo.ts:170","pc":[966,967]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:170","pc":[968]},{"teal":1023,"source":"contracts\\Moderator.algo.ts:170","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[969]},{"teal":1027,"source":"contracts\\Moderator.algo.ts:173","pc":[970]},{"teal":1028,"source":"contracts\\Moderator.algo.ts:173","pc":[971]},{"teal":1029,"source":"contracts\\Moderator.algo.ts:173","pc":[972]},{"teal":1030,"source":"contracts\\Moderator.algo.ts:173","pc":[973]},{"teal":1034,"source":"contracts\\Moderator.algo.ts:174","pc":[974]},{"teal":1035,"source":"contracts\\Moderator.algo.ts:174","pc":[975,976]},{"teal":1036,"source":"contracts\\Moderator.algo.ts:174","pc":[977]},{"teal":1037,"source":"contracts\\Moderator.algo.ts:165","pc":[978]},{"teal":1042,"source":"contracts\\Moderator.algo.ts:178","pc":[979]},{"teal":1045,"source":"contracts\\Moderator.algo.ts:178","pc":[980,981,982]},{"teal":1046,"source":"contracts\\Moderator.algo.ts:178","pc":[983]},{"teal":1047,"source":"contracts\\Moderator.algo.ts:178","pc":[984]},{"teal":1048,"source":"contracts\\Moderator.algo.ts:178","pc":[985]},{"teal":1049,"source":"contracts\\Moderator.algo.ts:178","pc":[986]},{"teal":1053,"source":"contracts\\Moderator.algo.ts:178","pc":[987,988,989]},{"teal":1057,"source":"contracts\\Moderator.algo.ts:179","pc":[990]},{"teal":1058,"source":"contracts\\Moderator.algo.ts:179","pc":[991]},{"teal":1059,"source":"contracts\\Moderator.algo.ts:179","pc":[992]},{"teal":1060,"source":"contracts\\Moderator.algo.ts:179","pc":[993]},{"teal":1061,"source":"contracts\\Moderator.algo.ts:179","pc":[994]},{"teal":1065,"source":"contracts\\Moderator.algo.ts:180","pc":[995]},{"teal":1066,"source":"contracts\\Moderator.algo.ts:180","pc":[996]},{"teal":1069,"source":"contracts\\Moderator.algo.ts:180","errorMessage":"box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value","pc":[997]},{"teal":1070,"source":"contracts\\Moderator.algo.ts:178","pc":[998]},{"teal":1075,"source":"contracts\\Moderator.algo.ts:184","pc":[999]},{"teal":1078,"source":"contracts\\Moderator.algo.ts:184","pc":[1000,1001,1002]},{"teal":1079,"source":"contracts\\Moderator.algo.ts:184","pc":[1003]},{"teal":1080,"source":"contracts\\Moderator.algo.ts:184","pc":[1004]},{"teal":1081,"source":"contracts\\Moderator.algo.ts:184","pc":[1005]},{"teal":1082,"source":"contracts\\Moderator.algo.ts:184","pc":[1006]},{"teal":1085,"source":"contracts\\Moderator.algo.ts:184","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[1007]},{"teal":1088,"source":"contracts\\Moderator.algo.ts:184","pc":[1008,1009,1010]},{"teal":1089,"source":"contracts\\Moderator.algo.ts:184","pc":[1011]},{"teal":1090,"source":"contracts\\Moderator.algo.ts:184","pc":[1012]},{"teal":1091,"source":"contracts\\Moderator.algo.ts:184","pc":[1013]},{"teal":1092,"source":"contracts\\Moderator.algo.ts:184","pc":[1014]},{"teal":1093,"source":"contracts\\Moderator.algo.ts:184","pc":[1015]},{"teal":1097,"source":"contracts\\Moderator.algo.ts:184","pc":[1016,1017,1018]},{"teal":1100,"source":"contracts\\Moderator.algo.ts:184","pc":[1019]},{"teal":1101,"source":"contracts\\Moderator.algo.ts:184","pc":[1020]},{"teal":1105,"source":"contracts\\Moderator.algo.ts:185","pc":[1021]},{"teal":1106,"source":"contracts\\Moderator.algo.ts:185","pc":[1022]},{"teal":1107,"source":"contracts\\Moderator.algo.ts:185","pc":[1023]},{"teal":1108,"source":"contracts\\Moderator.algo.ts:185","pc":[1024]},{"teal":1109,"source":"contracts\\Moderator.algo.ts:185","pc":[1025]},{"teal":1117,"source":"contracts\\Moderator.algo.ts:186","pc":[1026]},{"teal":1118,"source":"contracts\\Moderator.algo.ts:186","pc":[1027]},{"teal":1119,"source":"contracts\\Moderator.algo.ts:186","pc":[1028]},{"teal":1120,"source":"contracts\\Moderator.algo.ts:186","pc":[1029]},{"teal":1121,"source":"contracts\\Moderator.algo.ts:189","pc":[1030]},{"teal":1122,"source":"contracts\\Moderator.algo.ts:186","pc":[1031]},{"teal":1123,"source":"contracts\\Moderator.algo.ts:186","pc":[1032]},{"teal":1124,"source":"contracts\\Moderator.algo.ts:186","pc":[1033]},{"teal":1125,"source":"contracts\\Moderator.algo.ts:186","pc":[1034]},{"teal":1126,"source":"contracts\\Moderator.algo.ts:190","pc":[1035]},{"teal":1127,"source":"contracts\\Moderator.algo.ts:189","pc":[1036]},{"teal":1128,"source":"contracts\\Moderator.algo.ts:186","pc":[1037]},{"teal":1129,"source":"contracts\\Moderator.algo.ts:186","pc":[1038,1039]},{"teal":1130,"source":"contracts\\Moderator.algo.ts:186","pc":[1040]},{"teal":1131,"source":"contracts\\Moderator.algo.ts:186","pc":[1041]},{"teal":1132,"source":"contracts\\Moderator.algo.ts:191","pc":[1042]},{"teal":1133,"source":"contracts\\Moderator.algo.ts:190","pc":[1043]},{"teal":1134,"source":"contracts\\Moderator.algo.ts:186","pc":[1044]},{"teal":1135,"source":"contracts\\Moderator.algo.ts:186","pc":[1045,1046]},{"teal":1136,"source":"contracts\\Moderator.algo.ts:186","pc":[1047]},{"teal":1137,"source":"contracts\\Moderator.algo.ts:186","pc":[1048]},{"teal":1138,"source":"contracts\\Moderator.algo.ts:192","pc":[1049]},{"teal":1139,"source":"contracts\\Moderator.algo.ts:191","pc":[1050]},{"teal":1140,"source":"contracts\\Moderator.algo.ts:188","pc":[1051,1052]},{"teal":1148,"source":"contracts\\Moderator.algo.ts:195","pc":[1053,1054]},{"teal":1149,"source":"contracts\\Moderator.algo.ts:195","pc":[1055,1056,1057]},{"teal":1150,"source":"contracts\\Moderator.algo.ts:195","pc":[1058]},{"teal":1151,"source":"contracts\\Moderator.algo.ts:196","pc":[1059,1060]},{"teal":1152,"source":"contracts\\Moderator.algo.ts:196","pc":[1061,1062,1063]},{"teal":1153,"source":"contracts\\Moderator.algo.ts:196","pc":[1064]},{"teal":1154,"source":"contracts\\Moderator.algo.ts:195","pc":[1065]},{"teal":1155,"source":"contracts\\Moderator.algo.ts:197","pc":[1066,1067]},{"teal":1156,"source":"contracts\\Moderator.algo.ts:197","pc":[1068,1069,1070]},{"teal":1157,"source":"contracts\\Moderator.algo.ts:197","pc":[1071]},{"teal":1158,"source":"contracts\\Moderator.algo.ts:196","pc":[1072]},{"teal":1159,"source":"contracts\\Moderator.algo.ts:198","pc":[1073,1074]},{"teal":1160,"source":"contracts\\Moderator.algo.ts:198","pc":[1075,1076,1077]},{"teal":1161,"source":"contracts\\Moderator.algo.ts:198","pc":[1078]},{"teal":1162,"source":"contracts\\Moderator.algo.ts:197","pc":[1079]},{"teal":1163,"source":"contracts\\Moderator.algo.ts:194","pc":[1080,1081]},{"teal":1168,"source":"contracts\\Moderator.algo.ts:200","pc":[1082,1083]},{"teal":1169,"source":"contracts\\Moderator.algo.ts:200","pc":[1084,1085]},{"teal":1170,"source":"contracts\\Moderator.algo.ts:200","pc":[1086]},{"teal":1171,"source":"contracts\\Moderator.algo.ts:200","pc":[1087,1088,1089]},{"teal":1176,"source":"contracts\\Moderator.algo.ts:201","pc":[1090]},{"teal":1177,"source":"contracts\\Moderator.algo.ts:201","pc":[1091,1092,1093]},{"teal":1182,"source":"contracts\\Moderator.algo.ts:204","pc":[1094,1095]},{"teal":1183,"source":"contracts\\Moderator.algo.ts:204","pc":[1096,1097]},{"teal":1184,"source":"contracts\\Moderator.algo.ts:204","pc":[1098]},{"teal":1188,"source":"contracts\\Moderator.algo.ts:184","pc":[1099,1100]},{"teal":1191,"source":"contracts\\Moderator.algo.ts:184","pc":[1101,1102]},{"teal":1192,"source":"contracts\\Moderator.algo.ts:184","pc":[1103]},{"teal":1197,"source":"contracts\\Moderator.algo.ts:208","pc":[1104,1105,1106]},{"teal":1200,"source":"contracts\\Moderator.algo.ts:208","pc":[1107,1108,1109]},{"teal":1201,"source":"contracts\\Moderator.algo.ts:208","pc":[1110]},{"teal":1202,"source":"contracts\\Moderator.algo.ts:208","pc":[1111]},{"teal":1203,"source":"contracts\\Moderator.algo.ts:208","pc":[1112]},{"teal":1204,"source":"contracts\\Moderator.algo.ts:208","pc":[1113]},{"teal":1207,"source":"contracts\\Moderator.algo.ts:208","errorMessage":"argument 1 (Address) for storeModelParams must be a address","pc":[1114]},{"teal":1210,"source":"contracts\\Moderator.algo.ts:208","pc":[1115,1116]},{"teal":1211,"source":"contracts\\Moderator.algo.ts:208","pc":[1117]},{"teal":1212,"source":"contracts\\Moderator.algo.ts:208","pc":[1118]},{"teal":1213,"source":"contracts\\Moderator.algo.ts:208","pc":[1119]},{"teal":1214,"source":"contracts\\Moderator.algo.ts:208","pc":[1120,1121]},{"teal":1215,"source":"contracts\\Moderator.algo.ts:208","pc":[1122]},{"teal":1216,"source":"contracts\\Moderator.algo.ts:208","pc":[1123]},{"teal":1219,"source":"contracts\\Moderator.algo.ts:208","errorMessage":"argument 2 (mbrPay) for storeModelParams must be a pay transaction","pc":[1124]},{"teal":1222,"source":"contracts\\Moderator.algo.ts:208","pc":[1125,1126,1127]},{"teal":1223,"source":"contracts\\Moderator.algo.ts:208","pc":[1128]},{"teal":1224,"source":"contracts\\Moderator.algo.ts:208","pc":[1129]},{"teal":1228,"source":"contracts\\Moderator.algo.ts:208","pc":[1130,1131,1132]},{"teal":1233,"source":"contracts\\Moderator.algo.ts:209","pc":[1133,1134]},{"teal":1234,"source":"contracts\\Moderator.algo.ts:209","pc":[1135]},{"teal":1235,"source":"contracts\\Moderator.algo.ts:209","pc":[1136]},{"teal":1236,"source":"contracts\\Moderator.algo.ts:209","pc":[1137]},{"teal":1237,"source":"contracts\\Moderator.algo.ts:209","pc":[1138,1139,1140]},{"teal":1243,"source":"contracts\\Moderator.algo.ts:210","pc":[1141,1142]},{"teal":1244,"source":"contracts\\Moderator.algo.ts:210","pc":[1143,1144]},{"teal":1245,"source":"contracts\\Moderator.algo.ts:210","pc":[1145]},{"teal":1248,"source":"contracts\\Moderator.algo.ts:210","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1146]},{"teal":1257,"source":"contracts\\Moderator.algo.ts:211","pc":[1147,1148]},{"teal":1258,"source":"contracts\\Moderator.algo.ts:212","pc":[1149,1150]},{"teal":1259,"source":"contracts\\Moderator.algo.ts:212","pc":[1151,1152]},{"teal":1260,"source":"contracts\\Moderator.algo.ts:212","pc":[1153]},{"teal":1263,"source":"contracts\\Moderator.algo.ts:212","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1154]},{"teal":1266,"source":"contracts\\Moderator.algo.ts:211","pc":[1155,1156]},{"teal":1267,"source":"contracts\\Moderator.algo.ts:213","pc":[1157,1158]},{"teal":1268,"source":"contracts\\Moderator.algo.ts:213","pc":[1159,1160]},{"teal":1269,"source":"contracts\\Moderator.algo.ts:213","pc":[1161]},{"teal":1272,"source":"contracts\\Moderator.algo.ts:213","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1162]},{"teal":1275,"source":"contracts\\Moderator.algo.ts:211","pc":[1163,1164]},{"teal":1276,"source":"contracts\\Moderator.algo.ts:214","pc":[1165,1166]},{"teal":1277,"source":"contracts\\Moderator.algo.ts:214","pc":[1167,1168]},{"teal":1278,"source":"contracts\\Moderator.algo.ts:214","pc":[1169]},{"teal":1281,"source":"contracts\\Moderator.algo.ts:214","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[1170]},{"teal":1285,"source":"contracts\\Moderator.algo.ts:217","pc":[1171,1172]},{"teal":1286,"source":"contracts\\Moderator.algo.ts:217","pc":[1173]},{"teal":1287,"source":"contracts\\Moderator.algo.ts:217","pc":[1174]},{"teal":1288,"source":"contracts\\Moderator.algo.ts:217","pc":[1175]},{"teal":1289,"source":"contracts\\Moderator.algo.ts:217","pc":[1176,1177]},{"teal":1290,"source":"contracts\\Moderator.algo.ts:217","pc":[1178]},{"teal":1291,"source":"contracts\\Moderator.algo.ts:209","pc":[1179,1180,1181]},{"teal":1297,"source":"contracts\\Moderator.algo.ts:219","pc":[1182,1183]},{"teal":1298,"source":"contracts\\Moderator.algo.ts:219","pc":[1184,1185]},{"teal":1299,"source":"contracts\\Moderator.algo.ts:219","pc":[1186]},{"teal":1302,"source":"contracts\\Moderator.algo.ts:219","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1187]},{"teal":1311,"source":"contracts\\Moderator.algo.ts:220","pc":[1188,1189]},{"teal":1312,"source":"contracts\\Moderator.algo.ts:221","pc":[1190,1191]},{"teal":1313,"source":"contracts\\Moderator.algo.ts:221","pc":[1192,1193]},{"teal":1314,"source":"contracts\\Moderator.algo.ts:221","pc":[1194]},{"teal":1317,"source":"contracts\\Moderator.algo.ts:221","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1195]},{"teal":1320,"source":"contracts\\Moderator.algo.ts:220","pc":[1196,1197]},{"teal":1321,"source":"contracts\\Moderator.algo.ts:222","pc":[1198,1199]},{"teal":1322,"source":"contracts\\Moderator.algo.ts:222","pc":[1200,1201]},{"teal":1323,"source":"contracts\\Moderator.algo.ts:222","pc":[1202]},{"teal":1326,"source":"contracts\\Moderator.algo.ts:222","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1203]},{"teal":1329,"source":"contracts\\Moderator.algo.ts:220","pc":[1204,1205]},{"teal":1330,"source":"contracts\\Moderator.algo.ts:223","pc":[1206,1207]},{"teal":1331,"source":"contracts\\Moderator.algo.ts:223","pc":[1208,1209]},{"teal":1332,"source":"contracts\\Moderator.algo.ts:223","pc":[1210]},{"teal":1335,"source":"contracts\\Moderator.algo.ts:223","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[1211]},{"teal":1339,"source":"contracts\\Moderator.algo.ts:226","pc":[1212,1213]},{"teal":1340,"source":"contracts\\Moderator.algo.ts:226","pc":[1214]},{"teal":1341,"source":"contracts\\Moderator.algo.ts:226","pc":[1215]},{"teal":1342,"source":"contracts\\Moderator.algo.ts:226","pc":[1216]},{"teal":1346,"source":"contracts\\Moderator.algo.ts:227","pc":[1217,1218]},{"teal":1347,"source":"contracts\\Moderator.algo.ts:227","pc":[1219]},{"teal":1348,"source":"contracts\\Moderator.algo.ts:227","pc":[1220]},{"teal":1349,"source":"contracts\\Moderator.algo.ts:227","pc":[1221]},{"teal":1350,"source":"contracts\\Moderator.algo.ts:227","pc":[1222,1223]},{"teal":1351,"source":"contracts\\Moderator.algo.ts:227","pc":[1224]},{"teal":1354,"source":"contracts\\Moderator.algo.ts:208","pc":[1225]},{"teal":1359,"source":"contracts\\Moderator.algo.ts:232","pc":[1226]},{"teal":1362,"source":"contracts\\Moderator.algo.ts:232","pc":[1227,1228,1229]},{"teal":1363,"source":"contracts\\Moderator.algo.ts:232","pc":[1230]},{"teal":1364,"source":"contracts\\Moderator.algo.ts:232","pc":[1231]},{"teal":1365,"source":"contracts\\Moderator.algo.ts:232","pc":[1232]},{"teal":1366,"source":"contracts\\Moderator.algo.ts:232","pc":[1233]},{"teal":1369,"source":"contracts\\Moderator.algo.ts:232","errorMessage":"argument 0 (Address) for getBoxValue must be a address","pc":[1234]},{"teal":1372,"source":"contracts\\Moderator.algo.ts:232","pc":[1235,1236,1237]},{"teal":1373,"source":"contracts\\Moderator.algo.ts:232","pc":[1238]},{"teal":1374,"source":"contracts\\Moderator.algo.ts:232","pc":[1239]},{"teal":1375,"source":"contracts\\Moderator.algo.ts:232","pc":[1240]},{"teal":1376,"source":"contracts\\Moderator.algo.ts:232","pc":[1241]},{"teal":1380,"source":"contracts\\Moderator.algo.ts:232","pc":[1242,1243,1244]},{"teal":1385,"source":"contracts\\Moderator.algo.ts:233","pc":[1245,1246]},{"teal":1386,"source":"contracts\\Moderator.algo.ts:233","pc":[1247,1248,1249]},{"teal":1387,"source":"contracts\\Moderator.algo.ts:233","pc":[1250,1251]},{"teal":1388,"source":"contracts\\Moderator.algo.ts:233","pc":[1252]},{"teal":1389,"source":"contracts\\Moderator.algo.ts:233","pc":[1253]},{"teal":1392,"source":"contracts\\Moderator.algo.ts:233","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[1254]},{"teal":1396,"source":"contracts\\Moderator.algo.ts:234","pc":[1255,1256]},{"teal":1397,"source":"contracts\\Moderator.algo.ts:234","pc":[1257]},{"teal":1398,"source":"contracts\\Moderator.algo.ts:234","pc":[1258]},{"teal":1399,"source":"contracts\\Moderator.algo.ts:234","pc":[1259]},{"teal":1400,"source":"contracts\\Moderator.algo.ts:234","pc":[1260]},{"teal":1404,"source":"contracts\\Moderator.algo.ts:235","pc":[1261,1262]},{"teal":1405,"source":"contracts\\Moderator.algo.ts:235","pc":[1263]},{"teal":1408,"source":"contracts\\Moderator.algo.ts:235","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[1264]},{"teal":1409,"source":"contracts\\Moderator.algo.ts:232","pc":[1265]},{"teal":1414,"source":"contracts\\Moderator.algo.ts:239","pc":[1266]},{"teal":1417,"source":"contracts\\Moderator.algo.ts:239","pc":[1267,1268,1269]},{"teal":1418,"source":"contracts\\Moderator.algo.ts:239","pc":[1270]},{"teal":1419,"source":"contracts\\Moderator.algo.ts:239","pc":[1271]},{"teal":1420,"source":"contracts\\Moderator.algo.ts:239","pc":[1272]},{"teal":1421,"source":"contracts\\Moderator.algo.ts:239","pc":[1273]},{"teal":1424,"source":"contracts\\Moderator.algo.ts:239","errorMessage":"argument 0 (Address) for adminGetBoxValue must be a address","pc":[1274]},{"teal":1427,"source":"contracts\\Moderator.algo.ts:239","pc":[1275,1276,1277]},{"teal":1428,"source":"contracts\\Moderator.algo.ts:239","pc":[1278]},{"teal":1429,"source":"contracts\\Moderator.algo.ts:239","pc":[1279]},{"teal":1430,"source":"contracts\\Moderator.algo.ts:239","pc":[1280]},{"teal":1431,"source":"contracts\\Moderator.algo.ts:239","pc":[1281]},{"teal":1435,"source":"contracts\\Moderator.algo.ts:239","pc":[1282,1283,1284]},{"teal":1439,"source":"contracts\\Moderator.algo.ts:240","pc":[1285,1286]},{"teal":1440,"source":"contracts\\Moderator.algo.ts:240","pc":[1287]},{"teal":1441,"source":"contracts\\Moderator.algo.ts:240","pc":[1288]},{"teal":1442,"source":"contracts\\Moderator.algo.ts:240","pc":[1289]},{"teal":1443,"source":"contracts\\Moderator.algo.ts:240","pc":[1290]},{"teal":1447,"source":"contracts\\Moderator.algo.ts:241","pc":[1291,1292]},{"teal":1448,"source":"contracts\\Moderator.algo.ts:241","pc":[1293]},{"teal":1451,"source":"contracts\\Moderator.algo.ts:241","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[1294]},{"teal":1452,"source":"contracts\\Moderator.algo.ts:239","pc":[1295]},{"teal":1457,"source":"contracts\\Moderator.algo.ts:245","pc":[1296,1297,1298]},{"teal":1458,"source":"contracts\\Moderator.algo.ts:245","pc":[1299]},{"teal":1459,"source":"contracts\\Moderator.algo.ts:245","pc":[1300]},{"teal":1463,"source":"contracts\\Moderator.algo.ts:245","pc":[1301,1302,1303]},{"teal":1468,"source":"contracts\\Moderator.algo.ts:246","pc":[1304]},{"teal":1469,"source":"contracts\\Moderator.algo.ts:246","pc":[1305]},{"teal":1470,"source":"contracts\\Moderator.algo.ts:246","pc":[1306]},{"teal":1471,"source":"contracts\\Moderator.algo.ts:246","pc":[1307]},{"teal":1472,"source":"contracts\\Moderator.algo.ts:246","pc":[1308,1309,1310]},{"teal":1477,"source":"contracts\\Moderator.algo.ts:247","pc":[1311]},{"teal":1478,"source":"contracts\\Moderator.algo.ts:247","pc":[1312]},{"teal":1481,"source":"contracts\\Moderator.algo.ts:245","pc":[1313]},{"teal":1486,"source":"contracts\\Moderator.algo.ts:252","pc":[1314]},{"teal":1489,"source":"contracts\\Moderator.algo.ts:252","pc":[1315,1316,1317]},{"teal":1490,"source":"contracts\\Moderator.algo.ts:252","pc":[1318]},{"teal":1491,"source":"contracts\\Moderator.algo.ts:252","pc":[1319]},{"teal":1492,"source":"contracts\\Moderator.algo.ts:252","pc":[1320]},{"teal":1493,"source":"contracts\\Moderator.algo.ts:252","pc":[1321]},{"teal":1496,"source":"contracts\\Moderator.algo.ts:252","errorMessage":"argument 0 (address) for deleteBox must be a address","pc":[1322]},{"teal":1499,"source":"contracts\\Moderator.algo.ts:252","pc":[1323,1324,1325]},{"teal":1500,"source":"contracts\\Moderator.algo.ts:252","pc":[1326]},{"teal":1501,"source":"contracts\\Moderator.algo.ts:252","pc":[1327]},{"teal":1502,"source":"contracts\\Moderator.algo.ts:252","pc":[1328]},{"teal":1503,"source":"contracts\\Moderator.algo.ts:252","pc":[1329]},{"teal":1504,"source":"contracts\\Moderator.algo.ts:252","pc":[1330]},{"teal":1508,"source":"contracts\\Moderator.algo.ts:252","pc":[1331,1332,1333]},{"teal":1513,"source":"contracts\\Moderator.algo.ts:253","pc":[1334]},{"teal":1514,"source":"contracts\\Moderator.algo.ts:253","pc":[1335]},{"teal":1515,"source":"contracts\\Moderator.algo.ts:253","pc":[1336]},{"teal":1516,"source":"contracts\\Moderator.algo.ts:253","pc":[1337]},{"teal":1517,"source":"contracts\\Moderator.algo.ts:253","pc":[1338,1339,1340]},{"teal":1522,"source":"contracts\\Moderator.algo.ts:254","pc":[1341]},{"teal":1523,"source":"contracts\\Moderator.algo.ts:254","pc":[1342]},{"teal":1529,"source":"contracts\\Moderator.algo.ts:256","pc":[1343,1344]},{"teal":1530,"source":"contracts\\Moderator.algo.ts:256","pc":[1345]},{"teal":1531,"source":"contracts\\Moderator.algo.ts:256","pc":[1346]},{"teal":1532,"source":"contracts\\Moderator.algo.ts:256","pc":[1347]},{"teal":1533,"source":"contracts\\Moderator.algo.ts:256","pc":[1348,1349,1350]},{"teal":1538,"source":"contracts\\Moderator.algo.ts:257","pc":[1351,1352]},{"teal":1539,"source":"contracts\\Moderator.algo.ts:257","pc":[1353]},{"teal":1544,"source":"contracts\\Moderator.algo.ts:259","pc":[1354]},{"teal":1545,"source":"contracts\\Moderator.algo.ts:252","pc":[1355]},{"teal":1550,"source":"contracts\\Moderator.algo.ts:263","pc":[1356,1357,1358]},{"teal":1551,"source":"contracts\\Moderator.algo.ts:263","pc":[1359]},{"teal":1552,"source":"contracts\\Moderator.algo.ts:263","pc":[1360]},{"teal":1556,"source":"contracts\\Moderator.algo.ts:263","pc":[1361,1362,1363]},{"teal":1560,"source":"contracts\\Moderator.algo.ts:264","pc":[1364,1365]},{"teal":1561,"source":"contracts\\Moderator.algo.ts:264","pc":[1366,1367,1368]},{"teal":1562,"source":"contracts\\Moderator.algo.ts:264","pc":[1369,1370]},{"teal":1563,"source":"contracts\\Moderator.algo.ts:264","pc":[1371]},{"teal":1564,"source":"contracts\\Moderator.algo.ts:264","pc":[1372]},{"teal":1565,"source":"contracts\\Moderator.algo.ts:264","pc":[1373]},{"teal":1571,"source":"contracts\\Moderator.algo.ts:266","pc":[1374]},{"teal":1572,"source":"contracts\\Moderator.algo.ts:266","pc":[1375]},{"teal":1573,"source":"contracts\\Moderator.algo.ts:266","pc":[1376,1377]},{"teal":1577,"source":"contracts\\Moderator.algo.ts:267","pc":[1378,1379]},{"teal":1578,"source":"contracts\\Moderator.algo.ts:267","pc":[1380,1381]},{"teal":1581,"source":"contracts\\Moderator.algo.ts:266","pc":[1382]},{"teal":1582,"source":"contracts\\Moderator.algo.ts:266","pc":[1383,1384]},{"teal":1585,"source":"contracts\\Moderator.algo.ts:266","pc":[1385]},{"teal":1586,"source":"contracts\\Moderator.algo.ts:263","pc":[1386]},{"teal":1591,"source":"contracts\\Moderator.algo.ts:272","pc":[1387,1388,1389]},{"teal":1592,"source":"contracts\\Moderator.algo.ts:272","pc":[1390]},{"teal":1593,"source":"contracts\\Moderator.algo.ts:272","pc":[1391]},{"teal":1597,"source":"contracts\\Moderator.algo.ts:272","pc":[1392,1393,1394]},{"teal":1603,"source":"contracts\\Moderator.algo.ts:273","pc":[1395]},{"teal":1604,"source":"contracts\\Moderator.algo.ts:273","pc":[1396]},{"teal":1605,"source":"contracts\\Moderator.algo.ts:273","pc":[1397,1398]},{"teal":1609,"source":"contracts\\Moderator.algo.ts:274","pc":[1399,1400]},{"teal":1610,"source":"contracts\\Moderator.algo.ts:274","pc":[1401,1402]},{"teal":1613,"source":"contracts\\Moderator.algo.ts:273","pc":[1403]},{"teal":1614,"source":"contracts\\Moderator.algo.ts:273","pc":[1404,1405]},{"teal":1617,"source":"contracts\\Moderator.algo.ts:273","pc":[1406]},{"teal":1618,"source":"contracts\\Moderator.algo.ts:272","pc":[1407]},{"teal":1621,"source":"contracts\\Moderator.algo.ts:24","pc":[1408,1409,1410,1411,1412,1413]},{"teal":1622,"source":"contracts\\Moderator.algo.ts:24","pc":[1414,1415,1416]},{"teal":1623,"source":"contracts\\Moderator.algo.ts:24","pc":[1417,1418,1419,1420]},{"teal":1626,"source":"contracts\\Moderator.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1421]},{"teal":1629,"source":"contracts\\Moderator.algo.ts:24","pc":[1422,1423,1424,1425,1426,1427]},{"teal":1630,"source":"contracts\\Moderator.algo.ts:24","pc":[1428,1429,1430,1431,1432,1433]},{"teal":1631,"source":"contracts\\Moderator.algo.ts:24","pc":[1434,1435,1436,1437,1438,1439]},{"teal":1632,"source":"contracts\\Moderator.algo.ts:24","pc":[1440,1441,1442,1443,1444,1445]},{"teal":1633,"source":"contracts\\Moderator.algo.ts:24","pc":[1446,1447,1448,1449,1450,1451]},{"teal":1634,"source":"contracts\\Moderator.algo.ts:24","pc":[1452,1453,1454,1455,1456,1457]},{"teal":1635,"source":"contracts\\Moderator.algo.ts:24","pc":[1458,1459,1460,1461,1462,1463]},{"teal":1636,"source":"contracts\\Moderator.algo.ts:24","pc":[1464,1465,1466,1467,1468,1469]},{"teal":1637,"source":"contracts\\Moderator.algo.ts:24","pc":[1470,1471,1472,1473,1474,1475]},{"teal":1638,"source":"contracts\\Moderator.algo.ts:24","pc":[1476,1477,1478,1479,1480,1481]},{"teal":1639,"source":"contracts\\Moderator.algo.ts:24","pc":[1482,1483,1484,1485,1486,1487]},{"teal":1640,"source":"contracts\\Moderator.algo.ts:24","pc":[1488,1489,1490,1491,1492,1493]},{"teal":1641,"source":"contracts\\Moderator.algo.ts:24","pc":[1494,1495,1496,1497,1498,1499]},{"teal":1642,"source":"contracts\\Moderator.algo.ts:24","pc":[1500,1501,1502]},{"teal":1643,"source":"contracts\\Moderator.algo.ts:24","pc":[1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530]},{"teal":1646,"source":"contracts\\Moderator.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1531]},{"teal":1649,"source":"contracts\\Moderator.algo.ts:24","pc":[1532,1533,1534,1535,1536,1537]},{"teal":1650,"source":"contracts\\Moderator.algo.ts:24","pc":[1538,1539,1540]},{"teal":1651,"source":"contracts\\Moderator.algo.ts:24","pc":[1541,1542,1543,1544]},{"teal":1654,"source":"contracts\\Moderator.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1545]},{"teal":1657,"source":"contracts\\Moderator.algo.ts:24","pc":[1546,1547,1548,1549,1550,1551]},{"teal":1658,"source":"contracts\\Moderator.algo.ts:24","pc":[1552,1553,1554,1555,1556,1557]},{"teal":1659,"source":"contracts\\Moderator.algo.ts:24","pc":[1558,1559,1560,1561,1562,1563]},{"teal":1660,"source":"contracts\\Moderator.algo.ts:24","pc":[1564,1565,1566]},{"teal":1661,"source":"contracts\\Moderator.algo.ts:24","pc":[1567,1568,1569,1570,1571,1572,1573,1574]},{"teal":1664,"source":"contracts\\Moderator.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1575]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAFAQAgCMCEPSYGABUAE0luaXRpYWxNb2RlbE1ldHJpY3MEFR98dQtzdGFrZUFtb3VudAhpcGZzSGFzaAZyZXdhcmQxGBSBBgsxGQiNDAUnAAAAAAAABZUFowUZAAAAAAAAAAAAAAA2GgFXAgCIAAIiQ4oBACcEi/9JFRZXBgJMUGeJNhoBVwIAiAACIkOKAQAxADYyAHIHSBJEJwSL/0kVFlcGAkxQZ4kqMRYiCUk4ECISRDYaAReIAAUWULAiQ4oCAYv+OAAxABJEi/44BzIKEkSL/jgIi/8SRIAKcmV3YXJkUG9vbIv/Zysji/8jgQIfSEhMFERnIokqMRYiCUk4ECISRIgABRZQsCJDigEBMQA2MgByB0gSRIv/OAAxABJEi/84BzIKEkSL/zgIK2QSRCKJKjEWIglJOBAiEkSIAAUWULAiQ4oBAYv/OAAxABJEi/84BzIKEkSL/zgIK2QSRCKJKogABRZQsCJDigABMgpzAEiJKjYaAlcCADYaAVcCAIgABRZQsCJDigIBKEcFMQA2MgByB0gSRIv/FSQKi/4VJQoSRCOMACOMAYsBi/4VJQoMQQAeiwCL/jX/I4sBJQsINP9MJVgXCIwAiwEiCIwBQv/Xi/8VJAorZB0jIh9ISEwURIwCiwCLAgiMAzIKcwBIiwMPRCOMBIsEi/8VJAoMQQA7sSKyEIv+Nf8jiwQlCwg0/0wlWBcrZAiyCIv/Nf8jiwQkCwg0/0wkWLIHJwWyBSOyAbOLBCIIjARC/7ojjAWLBYv/FSQKDEEAG4v/Nf8jiwUkCwg0/0wkWIgC0YsFIgiMBUL/2ogC4yKMAEYFiSo2GgJXAgA2GgFXAgCIAAUWULAiQ4oCAShHBov/FSQKi/4VJQoSRCOMACOMAYsBi/4VJQoMQQAeiwCL/jX/I4sBJQsINP9MJVgXCIwAiwEiCIwBQv/Xi/8VJAorZB0jIh9ISEwURIwCiwCLAgiMAzIKcwBIiwMPRCOMBIv/FSQKIw1BABcjMgpzAEiLAwkji/8VJAofSEhMFESMBCOMBYsFi/8VJAoMQQA+sSKyEIv+Nf8jiwUlCwg0/0wlWBcrZAiLBAiyCIv/Nf8jiwUkCwg0/0wkWLIHJwWyBSOyAbOLBSIIjAVC/7cjjAaLBov/FSQKDEEAG4v/Nf8jiwYkCwg0/0wkWIgBt4sGIgiMBkL/2ogB6CKMAEYGiTEWIglJOBAiEkQ2GgFJFSQSRIgAAiJDigIAMQA2MgByB0gSRIv+OAAxABJEi/44BzIKEkSL/jgIIQQSRCkkuUgpi/+/iSqIAARQsCJDigABKb1MSEQpvkSJKjYaAUkVJBJEiAAFFlCwIkOKAQEoSSm9TEhEKSMluhcpJSW6FwgpgRAluhcIKYEYJboXCIwAi/9XAAgXi/9XCAgXCIv/VxAIFwiL/1cYCBcIjAGLAYsADkEABCNCAAWLAYsACYwARgGJNhoCNhoBSRUkEkQxFiIJSTgQIhJEiAACIkOKAwCL/r1MSEEAKTEAMQASRIv/OAAxABJEi/84BzIKEkSL/zgIIQQSRIv+SbxIi/2/QgArMQAxABJEi/84ADEAEkSL/zgHMgoSRIv/OAghBBJEi/4kuUiL/km8SIv9v4kqNhoBSRUkEkSIAARQsCJDigEBMQA2MgByB0gSRIv/vUxIRIv/vkSJKjYaAUkVJBJEiAAEULAiQ4oBAYv/vUxIRIv/vkSJiAACIkOKAAApvUxIQQACKbyJKjYaAUkVJBJEiAAFFlCwIkOKAQEpvUxIQQACKbyL/71MSEEAA4v/vCKJiAACIkOKAAAxADYyAHIHSBJEsSKyEDEAsgkjsgGziYgAAiJDigAAsSKyEDEAsgkjsgGziYAEEVdW2zYaAI4B+tsAgARm6BWMgASeiGq6gAQP02g2gAQoa+Y2gAS3iRj1gARt3N/cgARDagKVgARU0lC/gARwXLMQgARWRv90gAT7/SDdgAT0owwfgATwC39hNhoAjg36r/sA+zr7av2T/dj97P5V/s/+9/8V/yf/cACABBdHQFs2GgCOAfp7AIAEg0Xcg4AEH+HjNYAEJIfDLDYaAI4D+1D8Tf8lAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ParamsData = {
  paramHash: string,
  paramKey: string,
  score: bigint,
  reputation: bigint
}


/**
 * Converts the ABI tuple representation of a ParamsData to the struct representation
 */
export function ParamsDataFromTuple(abiTuple: [string, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ParamsData, APP_SPEC.structs) as ParamsData
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'assignRewardPool(uint64,pay)uint64': {
      rewardPoolAmount: bigint | number
      rewardPoolTxn: AppMethodCallTransactionArgument
    }
    'creatorCommitToListing(pay)uint64': {
      stakeAmountTxn: AppMethodCallTransactionArgument
    }
    'commitToListing(pay)uint64': {
      stakeAmountTxn: AppMethodCallTransactionArgument
    }
    'checkBalance()uint64': Record<string, never>
    'bulkPayoutRewards(address[],uint64[])uint64': {
      addresses: string[]
      rewards: bigint[] | number[]
    }
    'adminBulkPayoutRewards(address[],uint64[])uint64': {
      addresses: string[]
      rewards: bigint[] | number[]
    }
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Record<string, never>
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': {
      modelEvaluationMetrics: Classification
    }
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': {
      mbrPay: AppMethodCallTransactionArgument
      address: string
      paramsData: ParamsData
    }
    'getBoxValue(address)(string,string,uint64,uint64)': {
      address: string
    }
    'adminGetBoxValue(address)(string,string,uint64,uint64)': {
      address: string
    }
    'deleteInitialBox()void': Record<string, never>
    'deleteBox(address)uint64': {
      address: string
    }
    'deleteApplication()void': Record<string, never>
    'adminDeleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'assignRewardPool(uint64,pay)uint64': [rewardPoolAmount: bigint | number, rewardPoolTxn: AppMethodCallTransactionArgument]
    'creatorCommitToListing(pay)uint64': [stakeAmountTxn: AppMethodCallTransactionArgument]
    'commitToListing(pay)uint64': [stakeAmountTxn: AppMethodCallTransactionArgument]
    'checkBalance()uint64': []
    'bulkPayoutRewards(address[],uint64[])uint64': [addresses: string[], rewards: bigint[] | number[]]
    'adminBulkPayoutRewards(address[],uint64[])uint64': [addresses: string[], rewards: bigint[] | number[]]
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': []
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': [modelEvaluationMetrics: Classification]
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': [mbrPay: AppMethodCallTransactionArgument, address: string, paramsData: ParamsData]
    'getBoxValue(address)(string,string,uint64,uint64)': [address: string]
    'adminGetBoxValue(address)(string,string,uint64,uint64)': [address: string]
    'deleteInitialBox()void': []
    'deleteBox(address)uint64': [address: string]
    'deleteApplication()void': []
    'adminDeleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'assignRewardPool(uint64,pay)uint64': bigint
  'creatorCommitToListing(pay)uint64': bigint
  'commitToListing(pay)uint64': bigint
  'checkBalance()uint64': bigint
  'bulkPayoutRewards(address[],uint64[])uint64': bigint
  'adminBulkPayoutRewards(address[],uint64[])uint64': bigint
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Classification
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': bigint
  'storeModelParams(pay,address,(string,string,uint64,uint64))void': void
  'getBoxValue(address)(string,string,uint64,uint64)': ParamsData
  'adminGetBoxValue(address)(string,string,uint64,uint64)': ParamsData
  'deleteInitialBox()void': void
  'deleteBox(address)uint64': bigint
  'deleteApplication()void': void
  'adminDeleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'assignRewardPool(uint64,pay)uint64' | 'assignRewardPool', {
      argsObj: DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64']
      argsTuple: DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']
      returns: DmlChainReturns['assignRewardPool(uint64,pay)uint64']
    }>
    & Record<'creatorCommitToListing(pay)uint64' | 'creatorCommitToListing', {
      argsObj: DmlChainArgs['obj']['creatorCommitToListing(pay)uint64']
      argsTuple: DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']
      returns: DmlChainReturns['creatorCommitToListing(pay)uint64']
    }>
    & Record<'commitToListing(pay)uint64' | 'commitToListing', {
      argsObj: DmlChainArgs['obj']['commitToListing(pay)uint64']
      argsTuple: DmlChainArgs['tuple']['commitToListing(pay)uint64']
      returns: DmlChainReturns['commitToListing(pay)uint64']
    }>
    & Record<'checkBalance()uint64' | 'checkBalance', {
      argsObj: DmlChainArgs['obj']['checkBalance()uint64']
      argsTuple: DmlChainArgs['tuple']['checkBalance()uint64']
      returns: DmlChainReturns['checkBalance()uint64']
    }>
    & Record<'bulkPayoutRewards(address[],uint64[])uint64' | 'bulkPayoutRewards', {
      argsObj: DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64']
      argsTuple: DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']
      returns: DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64']
    }>
    & Record<'adminBulkPayoutRewards(address[],uint64[])uint64' | 'adminBulkPayoutRewards', {
      argsObj: DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64']
      argsTuple: DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']
      returns: DmlChainReturns['adminBulkPayoutRewards(address[],uint64[])uint64']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'getClassificationCriteria()(uint64,uint64,uint64,uint64)' | 'getClassificationCriteria', {
      argsObj: DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      returns: DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
    }>
    & Record<'storeModelParams(pay,address,(string,string,uint64,uint64))void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      returns: DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void']
    }>
    & Record<'getBoxValue(address)(string,string,uint64,uint64)' | 'getBoxValue', {
      argsObj: DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']
      returns: DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)']
    }>
    & Record<'adminGetBoxValue(address)(string,string,uint64,uint64)' | 'adminGetBoxValue', {
      argsObj: DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']
      returns: DmlChainReturns['adminGetBoxValue(address)(string,string,uint64,uint64)']
    }>
    & Record<'deleteInitialBox()void' | 'deleteInitialBox', {
      argsObj: DmlChainArgs['obj']['deleteInitialBox()void']
      argsTuple: DmlChainArgs['tuple']['deleteInitialBox()void']
      returns: DmlChainReturns['deleteInitialBox()void']
    }>
    & Record<'deleteBox(address)uint64' | 'deleteBox', {
      argsObj: DmlChainArgs['obj']['deleteBox(address)uint64']
      argsTuple: DmlChainArgs['tuple']['deleteBox(address)uint64']
      returns: DmlChainReturns['deleteBox(address)uint64']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
    & Record<'adminDeleteApplication()void' | 'adminDeleteApplication', {
      argsObj: DmlChainArgs['obj']['adminDeleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['adminDeleteApplication()void']
      returns: DmlChainReturns['adminDeleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
        rewardPool: bigint
        stakeAmount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        paramsData: Map<string, ParamsData>
        classificationPerformanceMetrics: Map<string, Classification>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {method: 'bulkPayoutRewards'}>
  | Expand<CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {method: 'bulkPayoutRewards(address[],uint64[])uint64'}>
  | Expand<CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']> & {method: 'adminBulkPayoutRewards'}>
  | Expand<CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']> & {method: 'adminBulkPayoutRewards(address[],uint64[])uint64'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'bulkPayoutRewards':
          case 'bulkPayoutRewards(address[],uint64[])uint64':
            return DmlChainParamsFactory.delete.bulkPayoutRewards(params)
          case 'adminBulkPayoutRewards':
          case 'adminBulkPayoutRewards(address[],uint64[])uint64':
            return DmlChainParamsFactory.delete.adminBulkPayoutRewards(params)
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the bulkPayoutRewards(address[],uint64[])uint64 ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      bulkPayoutRewards(params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'bulkPayoutRewards(address[],uint64[])uint64' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.addresses, params.args.rewards],
        }
      },
      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the adminBulkPayoutRewards(address[],uint64[])uint64 ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      adminBulkPayoutRewards(params: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'adminBulkPayoutRewards(address[],uint64[])uint64' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.addresses, params.args.rewards],
        }
      },
      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the assignRewardPool(uint64,pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignRewardPool(uint64,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardPoolAmount, params.args.rewardPoolTxn],
    }
  }
  /**
   * Constructs a no op call for the creatorCommitToListing(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static creatorCommitToListing(params: CallParams<DmlChainArgs['obj']['creatorCommitToListing(pay)uint64'] | DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'creatorCommitToListing(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeAmountTxn],
    }
  }
  /**
   * Constructs a no op call for the commitToListing(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static commitToListing(params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'commitToListing(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeAmountTxn],
    }
  }
  /**
   * Constructs a no op call for the checkBalance()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkBalance()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClassificationCriteria()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(pay,address,(string,string,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.address, params.args.paramsData],
    }
  }
  /**
   * Constructs a no op call for the getBoxValue(address)(string,string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxValue(address)(string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the adminGetBoxValue(address)(string,string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adminGetBoxValue(params: CallParams<DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'adminGetBoxValue(address)(string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the deleteInitialBox()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteInitialBox(params: CallParams<DmlChainArgs['obj']['deleteInitialBox()void'] | DmlChainArgs['tuple']['deleteInitialBox()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteInitialBox()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the deleteBox(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBox(params: CallParams<DmlChainArgs['obj']['deleteBox(address)uint64'] | DmlChainArgs['tuple']['deleteBox(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteBox(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the adminDeleteApplication()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adminDeleteApplication(params: CallParams<DmlChainArgs['obj']['adminDeleteApplication()void'] | DmlChainArgs['tuple']['adminDeleteApplication()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'adminDeleteApplication()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the bulkPayoutRewards(address[],uint64[])uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.bulkPayoutRewards(params))
      },
      /**
       * Deletes an existing instance of the DMLChain smart contract using the adminBulkPayoutRewards(address[],uint64[])uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      adminBulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']>) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.adminBulkPayoutRewards(params))
      },
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.bulkPayoutRewards(params))
      },

      /**
       * Deletes an existing instance of the DMLChain smart contract using the `adminBulkPayoutRewards(address[],uint64[])uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      adminBulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']>) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.adminBulkPayoutRewards(params))
      },

      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `creatorCommitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    creatorCommitToListing: (params: CallParams<DmlChainArgs['obj']['creatorCommitToListing(pay)uint64'] | DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.creatorCommitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    commitToListing: (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.commitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `adminGetBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    adminGetBoxValue: (params: CallParams<DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.adminGetBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `deleteInitialBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteInitialBox: (params: CallParams<DmlChainArgs['obj']['deleteInitialBox()void'] | DmlChainArgs['tuple']['deleteInitialBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.deleteInitialBox(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `deleteBox(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBox: (params: CallParams<DmlChainArgs['obj']['deleteBox(address)uint64'] | DmlChainArgs['tuple']['deleteBox(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.deleteBox(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `adminDeleteApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    adminDeleteApplication: (params: CallParams<DmlChainArgs['obj']['adminDeleteApplication()void'] | DmlChainArgs['tuple']['adminDeleteApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.adminDeleteApplication(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.bulkPayoutRewards(params))
      },

      /**
       * Deletes an existing instance of the DMLChain smart contract using the `adminBulkPayoutRewards(address[],uint64[])uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      adminBulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']>) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.adminBulkPayoutRewards(params))
      },

      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `creatorCommitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    creatorCommitToListing: (params: CallParams<DmlChainArgs['obj']['creatorCommitToListing(pay)uint64'] | DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.creatorCommitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    commitToListing: (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.commitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `adminGetBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    adminGetBoxValue: (params: CallParams<DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.adminGetBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `deleteInitialBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteInitialBox: (params: CallParams<DmlChainArgs['obj']['deleteInitialBox()void'] | DmlChainArgs['tuple']['deleteInitialBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.deleteInitialBox(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `deleteBox(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBox: (params: CallParams<DmlChainArgs['obj']['deleteBox(address)uint64'] | DmlChainArgs['tuple']['deleteBox(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.deleteBox(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `adminDeleteApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    adminDeleteApplication: (params: CallParams<DmlChainArgs['obj']['adminDeleteApplication()void'] | DmlChainArgs['tuple']['adminDeleteApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.adminDeleteApplication(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      bulkPayoutRewards: async (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & SendParams) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.bulkPayoutRewards(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64'])}
      },

      /**
       * Deletes an existing instance of the DMLChain smart contract using the `adminBulkPayoutRewards(address[],uint64[])uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      adminBulkPayoutRewards: async (params: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']> & SendParams) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.adminBulkPayoutRewards(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['adminBulkPayoutRewards(address[],uint64[])uint64'])}
      },

      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignRewardPool: async (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.assignRewardPool(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['assignRewardPool(uint64,pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `creatorCommitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    creatorCommitToListing: async (params: CallParams<DmlChainArgs['obj']['creatorCommitToListing(pay)uint64'] | DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.creatorCommitToListing(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['creatorCommitToListing(pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    commitToListing: async (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.commitToListing(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['commitToListing(pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkBalance: async (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.checkBalance(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['checkBalance()uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClassificationCriteria: async (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getClassificationCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxValue: async (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getBoxValue(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `adminGetBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    adminGetBoxValue: async (params: CallParams<DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.adminGetBoxValue(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['adminGetBoxValue(address)(string,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `deleteInitialBox()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteInitialBox: async (params: CallParams<DmlChainArgs['obj']['deleteInitialBox()void'] | DmlChainArgs['tuple']['deleteInitialBox()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.deleteInitialBox(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteInitialBox()void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `deleteBox(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBox: async (params: CallParams<DmlChainArgs['obj']['deleteBox(address)uint64'] | DmlChainArgs['tuple']['deleteBox(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.deleteBox(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteBox(address)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `adminDeleteApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    adminDeleteApplication: async (params: CallParams<DmlChainArgs['obj']['adminDeleteApplication()void'] | DmlChainArgs['tuple']['adminDeleteApplication()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.adminDeleteApplication(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['adminDeleteApplication()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
          rewardPool: result.rewardPool,
          stakeAmount: result.stakeAmount,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
      /**
       * Get the current value of the rewardPool key in global state
       */
      rewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPool")) as bigint | undefined },
      /**
       * Get the current value of the stakeAmount key in global state
       */
      stakeAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakeAmount")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the paramsData map in box state
       */
      paramsData: {
        /**
         * Get all current values of the paramsData map in box state
         */
        getMap: async (): Promise<Map<string, ParamsData>> => { return (await this.appClient.state.box.getMap("paramsData")) as Map<string, ParamsData> },
        /**
         * Get a current value of the paramsData map by key from box state
         */
        value: async (key: string): Promise<ParamsData | undefined> => { return await this.appClient.state.box.getMapValue("paramsData", key) as ParamsData | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a assignRewardPool(uint64,pay)uint64 method call against the DMLChain contract
       */
      assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignRewardPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('assignRewardPool(uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a creatorCommitToListing(pay)uint64 method call against the DMLChain contract
       */
      creatorCommitToListing(params: CallParams<DmlChainArgs['obj']['creatorCommitToListing(pay)uint64'] | DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.creatorCommitToListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('creatorCommitToListing(pay)uint64', v))
        return this
      },
      /**
       * Add a commitToListing(pay)uint64 method call against the DMLChain contract
       */
      commitToListing(params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.commitToListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('commitToListing(pay)uint64', v))
        return this
      },
      /**
       * Add a checkBalance()uint64 method call against the DMLChain contract
       */
      checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkBalance()uint64', v))
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClassificationCriteria()(uint64,uint64,uint64,uint64) method call against the DMLChain contract
       */
      getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClassificationCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClassificationCriteria()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64', v))
        return this
      },
      /**
       * Add a storeModelParams(pay,address,(string,string,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxValue(address)(string,string,uint64,uint64) method call against the DMLChain contract
       */
      getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxValue(address)(string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a adminGetBoxValue(address)(string,string,uint64,uint64) method call against the DMLChain contract
       */
      adminGetBoxValue(params: CallParams<DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.adminGetBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('adminGetBoxValue(address)(string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a deleteInitialBox()void method call against the DMLChain contract
       */
      deleteInitialBox(params: CallParams<DmlChainArgs['obj']['deleteInitialBox()void'] | DmlChainArgs['tuple']['deleteInitialBox()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteInitialBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteBox(address)uint64 method call against the DMLChain contract
       */
      deleteBox(params: CallParams<DmlChainArgs['obj']['deleteBox(address)uint64'] | DmlChainArgs['tuple']['deleteBox(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBox(params)))
        resultMappers.push((v) => client.decodeReturnValue('deleteBox(address)uint64', v))
        return this
      },
      /**
       * Add a adminDeleteApplication()void method call against the DMLChain contract
       */
      adminDeleteApplication(params: CallParams<DmlChainArgs['obj']['adminDeleteApplication()void'] | DmlChainArgs['tuple']['adminDeleteApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.adminDeleteApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.bulkPayoutRewards(params)))
            resultMappers.push((v) => client.decodeReturnValue('bulkPayoutRewards(address[],uint64[])uint64', v))
            return this
          },
          adminBulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.adminBulkPayoutRewards(params)))
            resultMappers.push((v) => client.decodeReturnValue('adminBulkPayoutRewards(address[],uint64[])uint64', v))
            return this
          },
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assignRewardPool(uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignRewardPool(params?: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['assignRewardPool(uint64,pay)uint64'] | undefined]>

  /**
   * Calls the creatorCommitToListing(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  creatorCommitToListing(params?: CallParams<DmlChainArgs['obj']['creatorCommitToListing(pay)uint64'] | DmlChainArgs['tuple']['creatorCommitToListing(pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['creatorCommitToListing(pay)uint64'] | undefined]>

  /**
   * Calls the commitToListing(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  commitToListing(params?: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['commitToListing(pay)uint64'] | undefined]>

  /**
   * Calls the checkBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkBalance(params?: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['checkBalance()uint64'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClassificationCriteria(params?: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | undefined]>

  /**
   * Calls the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | undefined]>

  /**
   * Calls the getBoxValue(address)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxValue(params?: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the adminGetBoxValue(address)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminGetBoxValue(params?: CallParams<DmlChainArgs['obj']['adminGetBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['adminGetBoxValue(address)(string,string,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['adminGetBoxValue(address)(string,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the deleteInitialBox()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteInitialBox(params?: CallParams<DmlChainArgs['obj']['deleteInitialBox()void'] | DmlChainArgs['tuple']['deleteInitialBox()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteInitialBox()void'] | undefined]>

  /**
   * Calls the deleteBox(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBox(params?: CallParams<DmlChainArgs['obj']['deleteBox(address)uint64'] | DmlChainArgs['tuple']['deleteBox(address)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteBox(address)uint64'] | undefined]>

  /**
   * Calls the adminDeleteApplication()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminDeleteApplication(params?: CallParams<DmlChainArgs['obj']['adminDeleteApplication()void'] | DmlChainArgs['tuple']['adminDeleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['adminDeleteApplication()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the bulkPayoutRewards(address[],uint64[])uint64 ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bulkPayoutRewards(params?: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64'] | undefined]>
    /**
     * Deletes an existing instance of the DMLChain smart contract using the adminBulkPayoutRewards(address[],uint64[])uint64 ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    adminBulkPayoutRewards(params?: CallParams<DmlChainArgs['obj']['adminBulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['adminBulkPayoutRewards(address[],uint64[])uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['adminBulkPayoutRewards(address[],uint64[])uint64'] | undefined]>
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['updateApplication(string)void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

