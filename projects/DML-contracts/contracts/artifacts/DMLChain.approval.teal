#pragma version 10
intcblock 1 8 0 32 24 1000000 16 1000 10000
bytecblock 0x 0x0013496e697469616c4d6f64656c4d657472696373 0x151f7c75 0x00087265674d6f64656c 0x726577617264506f6f6c 0x6970667348617368 0x73756363657373 0x726577617264

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string)void
*abi_route_createApplication:
	// modelHash: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(modelHash: string): void
createApplication:
	proto 1 0

	// contracts\Moderator.algo.ts:51
	// this.ipfsHash.value = modelHash
	bytec 5 //  "ipfsHash"
	frame_dig -1 // modelHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// updateApplication(string)void
*abi_route_updateApplication:
	// modelHash: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateApplication(string)void
	callsub updateApplication
	intc 0 // 1
	return

// updateApplication(modelHash: string): void
updateApplication:
	proto 1 0

	// contracts\Moderator.algo.ts:56
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\Moderator.algo.ts:57
	// this.ipfsHash.value = modelHash
	bytec 5 //  "ipfsHash"
	frame_dig -1 // modelHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// assignRewardPool(uint64,pay)uint64
*abi_route_assignRewardPool:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// rewardPoolTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (rewardPoolTxn) for assignRewardPool must be a pay transaction
	assert

	// rewardPoolAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute assignRewardPool(uint64,pay)uint64
	callsub assignRewardPool
	itob
	concat
	log
	intc 0 // 1
	return

// assignRewardPool(rewardPoolAmount: uint64, rewardPoolTxn: PayTxn): uint64
assignRewardPool:
	proto 2 1

	// contracts\Moderator.algo.ts:62
	// verifyPayTxn(rewardPoolTxn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: rewardPoolAmount,
	//     })
	// verify sender
	frame_dig -2 // rewardPoolTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"rewardPoolTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -2 // rewardPoolTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardPoolTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // rewardPoolTxn: PayTxn
	gtxns Amount
	frame_dig -1 // rewardPoolAmount: uint64
	==

	// transaction verification failed: {"txn":"rewardPoolTxn","field":"amount","expected":"rewardPoolAmount"}
	assert

	// contracts\Moderator.algo.ts:67
	// this.rewardPool.value = rewardPoolAmount
	bytec 4 //  "rewardPool"
	frame_dig -1 // rewardPoolAmount: uint64
	app_global_put

	// contracts\Moderator.algo.ts:68
	// return this.rewardPool.value;
	bytec 4 //  "rewardPool"
	app_global_get
	retsub

// checkBalance()uint64
*abi_route_checkBalance:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute checkBalance()uint64
	callsub checkBalance
	itob
	concat
	log
	intc 0 // 1
	return

// checkBalance(): uint64
checkBalance:
	proto 0 1

	// contracts\Moderator.algo.ts:73
	// return this.app.address.balance;
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	retsub

// payoutRewards(address,uint64)string
*abi_route_payoutRewards:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// reward: uint64
	txna ApplicationArgs 2
	btoi

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 1 (Address) for payoutRewards must be a address
	assert

	// execute payoutRewards(address,uint64)string
	callsub payoutRewards
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// payoutRewards(Address: Address, reward: uint64): string
payoutRewards:
	proto 2 1

	// contracts\Moderator.algo.ts:78
	// sendPayment({
	//       amount: reward,
	//       receiver: Address,
	//       note: 'reward',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Moderator.algo.ts:79
	// amount: reward
	frame_dig -2 // reward: uint64
	itxn_field Amount

	// contracts\Moderator.algo.ts:80
	// receiver: Address
	frame_dig -1 // Address: Address
	itxn_field Receiver

	// contracts\Moderator.algo.ts:81
	// note: 'reward'
	bytec 7 //  "reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Moderator.algo.ts:84
	// return 'success';
	bytec 6 //  "success"
	retsub

// bulkPayoutRewards(address[],uint64[])string
*abi_route_bulkPayoutRewards:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// rewards: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// addresses: address[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bulkPayoutRewards(address[],uint64[])string
	callsub bulkPayoutRewards
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bulkPayoutRewards(addresses: Address[], rewards: uint64[]): string
bulkPayoutRewards:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\Moderator.algo.ts:89
	// assert(addresses.length === rewards.length, 'Arrays must have the same length')
	frame_dig -1 // addresses: Address[]
	len
	intc 3 // 32
	/
	frame_dig -2 // rewards: uint64[]
	len
	intc 1 // 8
	/
	==

	// Arrays must have the same length
	assert

	// contracts\Moderator.algo.ts:91
	// totalReward = 0
	intc 2 // 0
	frame_bury 0 // totalReward: uint64

	// contracts\Moderator.algo.ts:92
	// for (let i = 0; i < rewards.length; i += 1)
	intc 2 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts\Moderator.algo.ts:92
	// i < rewards.length
	frame_dig 1 // i: uint64
	frame_dig -2 // rewards: uint64[]
	len
	intc 1 // 8
	/
	<
	bz *for_0_end

	// contracts\Moderator.algo.ts:93
	// totalReward += rewards[i]
	frame_dig 0 // totalReward: uint64
	frame_dig -2 // rewards: uint64[]
	store 255 // full array
	intc 2 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	+
	frame_bury 0 // totalReward: uint64

*for_0_continue:
	// contracts\Moderator.algo.ts:92
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts\Moderator.algo.ts:96
	// assert(this.rewardPool.value >= totalReward, 'Insufficient balance for rewards')
	bytec 4 //  "rewardPool"
	app_global_get
	frame_dig 0 // totalReward: uint64
	>=

	// Insufficient balance for rewards
	assert

	// contracts\Moderator.algo.ts:98
	// for (let i = 0; i < addresses.length; i += 1)
	intc 2 // 0
	frame_bury 2 // i: uint64

*for_1:
	// contracts\Moderator.algo.ts:98
	// i < addresses.length
	frame_dig 2 // i: uint64
	frame_dig -1 // addresses: Address[]
	len
	intc 3 // 32
	/
	<
	bz *for_1_end

	// contracts\Moderator.algo.ts:99
	// sendPayment({
	//         amount: rewards[i],
	//         receiver: addresses[i],
	//         note: 'reward',
	//       })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Moderator.algo.ts:100
	// amount: rewards[i]
	frame_dig -2 // rewards: uint64[]
	store 255 // full array
	intc 2 //  initial offset
	frame_dig 2 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itxn_field Amount

	// contracts\Moderator.algo.ts:101
	// receiver: addresses[i]
	frame_dig -1 // addresses: Address[]
	store 255 // full array
	intc 2 //  initial offset
	frame_dig 2 // i: uint64
	intc 3 // 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 3 // 32
	extract3
	itxn_field Receiver

	// contracts\Moderator.algo.ts:102
	// note: 'reward'
	bytec 7 //  "reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*for_1_continue:
	// contracts\Moderator.algo.ts:98
	// i += 1
	frame_dig 2 // i: uint64
	intc 0 // 1
	+
	frame_bury 2 // i: uint64
	b *for_1

*for_1_end:
	// contracts\Moderator.algo.ts:106
	// return 'success';
	bytec 6 //  "success"

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void
*abi_route_storeClassificationSelectionCriteria:
	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction
	assert

	// evaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void
	callsub storeClassificationSelectionCriteria
	intc 0 // 1
	return

// storeClassificationSelectionCriteria(evaluationMetrics: Classification, mbrPay: PayTxn): void
storeClassificationSelectionCriteria:
	proto 2 0

	// contracts\Moderator.algo.ts:111
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:112
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: boxMbr,
	//     })
	// verify sender
	frame_dig -2 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -2 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // mbrPay: PayTxn
	gtxns Amount
	intc 5 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:118
	// this.classificationPerformanceMetrics('InitialModelMetrics').create(32)
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 3 // 32
	box_create
	pop

	// contracts\Moderator.algo.ts:119
	// this.classificationPerformanceMetrics('InitialModelMetrics').value = evaluationMetrics
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	frame_dig -1 // evaluationMetrics: Classification
	box_put
	retsub

// getClassificationCriteria()(uint64,uint64,uint64,uint64)
*abi_route_getClassificationCriteria:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getClassificationCriteria()(uint64,uint64,uint64,uint64)
	callsub getClassificationCriteria
	concat
	log
	intc 0 // 1
	return

// getClassificationCriteria(): Classification
getClassificationCriteria:
	proto 0 1

	// contracts\Moderator.algo.ts:124
	// assert(this.classificationPerformanceMetrics('InitialModelMetrics').exists)
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:125
	// return this.classificationPerformanceMetrics('InitialModelMetrics').value;
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_get

	// box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value
	assert
	retsub

// classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool
*abi_route_classModelSelectionCriteria:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// modelEvaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool
	callsub classModelSelectionCriteria
	pushbytes 0x00
	intc 2 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// classModelSelectionCriteria(modelEvaluationMetrics: Classification): boolean
classModelSelectionCriteria:
	proto 1 1

	// contracts\Moderator.algo.ts:130
	// assert(this.classificationPerformanceMetrics('InitialModelMetrics').exists)
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	assert

	// *if0_condition
	// contracts\Moderator.algo.ts:133
	// modelEvaluationMetrics.accuracy >= baselineClassMetrics.accuracy &&
	//       modelEvaluationMetrics.precision >= baselineClassMetrics.precision &&
	//       modelEvaluationMetrics.recall >= baselineClassMetrics.recall &&
	//       modelEvaluationMetrics.f1score >= baselineClassMetrics.f1score
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 0 8
	btoi
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 2 // 0
	intc 1 // 8
	box_extract
	btoi
	>=
	dup
	bz *skip_and0
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 8 8
	btoi
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and0:
	dup
	bz *skip_and1
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 16 8
	btoi
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 6 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 24 8
	btoi
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 4 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and2:
	bz *if0_end

	// *if0_consequent
	// contracts\Moderator.algo.ts:138
	// return true;
	intc 0 // 1
	retsub

*if0_end:
	// contracts\Moderator.algo.ts:140
	// return false;
	intc 2 // 0
	retsub

// storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void
*abi_route_storeModelRegressionSelectionCriteria:
	// evaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void
	callsub storeModelRegressionSelectionCriteria
	intc 0 // 1
	return

// storeModelRegressionSelectionCriteria(evaluationMetrics: Regression): void
storeModelRegressionSelectionCriteria:
	proto 1 0

	// contracts\Moderator.algo.ts:145
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:146
	// this.regressionPerformanceMetrics('regModel').value = evaluationMetrics
	bytec 3 // 0x00087265674d6f64656c
	frame_dig -1 // evaluationMetrics: Regression
	box_put
	retsub

// regModelSelectionCriteria((uint64,uint64,uint64,uint64))string
*abi_route_regModelSelectionCriteria:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// modelEvaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute regModelSelectionCriteria((uint64,uint64,uint64,uint64))string
	callsub regModelSelectionCriteria
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// regModelSelectionCriteria(modelEvaluationMetrics: Regression): string
regModelSelectionCriteria:
	proto 1 1

	// *if1_condition
	// contracts\Moderator.algo.ts:153
	// modelEvaluationMetrics.MSE <= baselineRegMetrics.MSE &&
	//       modelEvaluationMetrics.MAE <= baselineRegMetrics.MAE &&
	//       modelEvaluationMetrics.RMSE <= baselineRegMetrics.RMSE &&
	//       modelEvaluationMetrics.COD >= baselineRegMetrics.COD
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 0 8
	btoi
	bytec 3 // 0x00087265674d6f64656c
	intc 2 // 0
	intc 1 // 8
	box_extract
	btoi
	<=
	dup
	bz *skip_and3
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 16 8
	btoi
	bytec 3 // 0x00087265674d6f64656c
	intc 6 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	<=
	&&

*skip_and3:
	dup
	bz *skip_and4
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 8 8
	btoi
	bytec 3 // 0x00087265674d6f64656c
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	<=
	&&

*skip_and4:
	dup
	bz *skip_and5
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 24 8
	btoi
	bytec 3 // 0x00087265674d6f64656c
	intc 4 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and5:
	bz *if1_end

	// *if1_consequent
	// contracts\Moderator.algo.ts:158
	// return 'Model has been accepted for further consideration';
	pushbytes 0x4d6f64656c20686173206265656e20616363657074656420666f72206675727468657220636f6e73696465726174696f6e // "Model has been accepted for further consideration"
	retsub

*if1_end:
	// contracts\Moderator.algo.ts:160
	// return 'failed the minimum requirements';
	pushbytes 0x6661696c656420746865206d696e696d756d20726571756972656d656e7473 // "failed the minimum requirements"
	retsub

// storeModelParams(pay,address,(string,string,uint64,uint64))void
*abi_route_storeModelParams:
	// paramsData: (string,string,uint64,uint64)
	txna ApplicationArgs 2

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 1 (Address) for storeModelParams must be a address
	assert

	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (mbrPay) for storeModelParams must be a pay transaction
	assert

	// execute storeModelParams(pay,address,(string,string,uint64,uint64))void
	callsub storeModelParams
	intc 0 // 1
	return

// storeModelParams(mbrPay: PayTxn, Address: Address, paramsData: ParamsData): void
storeModelParams:
	proto 3 0

	// *if2_condition
	// contracts\Moderator.algo.ts:165
	// this.paramsData(Address).exists
	frame_dig -2 // Address: Address
	box_len
	swap
	pop
	bz *if2_else

	// *if2_consequent
	// contracts\Moderator.algo.ts:166
	// verifyTxn(this.txn, { sender: this.txn.sender })
	// verify sender
	txn Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.txn.sender"}
	assert

	// contracts\Moderator.algo.ts:167
	// verifyPayTxn(mbrPay, {
	//         sender: this.txn.sender,
	//         receiver: this.app.address,
	//         amount: boxMbr,
	//       })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	intc 5 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:173
	// this.paramsData(Address).value = paramsData
	frame_dig -2 // Address: Address
	dup
	box_del
	pop
	frame_dig -3 // paramsData: ParamsData
	box_put
	b *if2_end

*if2_else:
	// contracts\Moderator.algo.ts:175
	// verifyTxn(this.txn, { sender: this.txn.sender })
	// verify sender
	txn Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.txn.sender"}
	assert

	// contracts\Moderator.algo.ts:176
	// verifyPayTxn(mbrPay, {
	//         sender: this.txn.sender,
	//         receiver: this.app.address,
	//         amount: boxMbr,
	//       })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	intc 5 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:182
	// this.paramsData(Address).create(32)
	frame_dig -2 // Address: Address
	intc 3 // 32
	box_create
	pop

	// contracts\Moderator.algo.ts:183
	// this.paramsData(Address).value = paramsData
	frame_dig -2 // Address: Address
	dup
	box_del
	pop
	frame_dig -3 // paramsData: ParamsData
	box_put

*if2_end:
	retsub

// getBoxValue(address)(string,string,uint64,uint64)
*abi_route_getBoxValue:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 0 (Address) for getBoxValue must be a address
	assert

	// execute getBoxValue(address)(string,string,uint64,uint64)
	callsub getBoxValue
	concat
	log
	intc 0 // 1
	return

// getBoxValue(Address: Address): ParamsData
getBoxValue:
	proto 1 1

	// contracts\Moderator.algo.ts:189
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:190
	// assert(this.paramsData(Address).exists)
	frame_dig -1 // Address: Address
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:191
	// return this.paramsData(Address).value;
	frame_dig -1 // Address: Address
	box_get

	// box value does not exist: this.paramsData(Address).value
	assert
	retsub

// distributeRewards((uint64))uint64[]
*abi_route_distributeRewards:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// contributor: (uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 8
	==

	// argument 0 (contributor) for distributeRewards must be a (uint64)
	assert

	// execute distributeRewards((uint64))uint64[]
	callsub distributeRewards
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// distributeRewards(contributor: rewardCalculation): uint64[]
distributeRewards:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 15

	// contracts\Moderator.algo.ts:197
	// honestyScores: StaticArray<uint64, 3> = [50, 50, 50]
	pushbytes 0x000000000000003200000000000000320000000000000032
	frame_bury 0 // honestyScores: StaticArray<uint64, 3>

	// contracts\Moderator.algo.ts:199
	// poolWeight = 0
	intc 2 // 0
	frame_bury 1 // poolWeight: uint64

	// contracts\Moderator.algo.ts:201
	// total = baseCase.accuracy + baseCase.precision + baseCase.recall + baseCase.f1score
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 2 // 0
	intc 1 // 8
	box_extract
	btoi
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	+
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 6 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	+
	bytec 1 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 4 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	+
	frame_bury 2 // total: uint64

	// contracts\Moderator.algo.ts:202
	// excess = 0
	intc 2 // 0
	frame_bury 3 // excess: uint64

	// contracts\Moderator.algo.ts:203
	// rewardAmount: uint64[] = []
	bytec 0 // 0x
	frame_bury 4 // rewardAmount: uint64[]

	// *if3_condition
	// contracts\Moderator.algo.ts:205
	// contributor.score > total
	frame_dig -1 // contributor: rewardCalculation
	extract 0 8
	btoi
	frame_dig 2 // total: uint64
	>
	bz *if3_end

	// *if3_consequent
	// contracts\Moderator.algo.ts:206
	// excess = contributor.score - total
	frame_dig -1 // contributor: rewardCalculation
	extract 0 8
	btoi
	frame_dig 2 // total: uint64
	-
	frame_bury 3 // excess: uint64

*if3_end:
	// contracts\Moderator.algo.ts:209
	// honestyScores.forEach
	frame_dig 0 // honestyScores: StaticArray<uint64, 3>
	dup
	frame_bury 5 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 6 // honestyScore: uint64
	intc 2 // 0
	frame_bury 7 // the offset we are extracting the next element from

*forEach_0:
	// contracts\Moderator.algo.ts:210
	// repWeight = wideRatio([honestyScore * honestyScore * 1000], [100 * 100])
	intc 2 // 0
	frame_dig 6 // honestyScore: uint64
	frame_dig 6 // honestyScore: uint64
	*
	intc 7 // 1000
	*
	intc 2 // 0
	intc 8 // 10000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 8 // repWeight: uint64

	// contracts\Moderator.algo.ts:212
	// participantWeight = repWeight * excess
	frame_dig 8 // repWeight: uint64
	frame_dig 3 // excess: uint64
	*
	frame_bury 9 // participantWeight: uint64

	// contracts\Moderator.algo.ts:214
	// poolWeight += participantWeight
	frame_dig 1 // poolWeight: uint64
	frame_dig 9 // participantWeight: uint64
	+
	frame_bury 1 // poolWeight: uint64

	// increment offset and loop if not out of bounds
	frame_dig 7 // the offset we are extracting the next element from
	intc 1 // 8
	+
	dup
	intc 4 //  offset of last element
	<
	bz *forEach_0_end
	frame_bury 7 // the offset we are extracting the next element from
	frame_dig 5 // copy of the array we are iterating over
	frame_dig 7 // the offset we are extracting the next element from
	intc 1 // 8
	extract
	btoi
	frame_bury 6 // honestyScore: uint64
	b *forEach_0

*forEach_0_end:
	// contracts\Moderator.algo.ts:217
	// honestyScores.forEach
	frame_dig 0 // honestyScores: StaticArray<uint64, 3>
	dup
	frame_bury 10 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 11 // honestyScore: uint64
	intc 2 // 0
	frame_bury 12 // the offset we are extracting the next element from

*forEach_1:
	// contracts\Moderator.algo.ts:218
	// repWeight = wideRatio([honestyScore * honestyScore * 1000], [100 * 100])
	intc 2 // 0
	frame_dig 11 // honestyScore: uint64
	frame_dig 11 // honestyScore: uint64
	*
	intc 7 // 1000
	*
	intc 2 // 0
	intc 8 // 10000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 13 // repWeight: uint64

	// contracts\Moderator.algo.ts:220
	// participantWeight = repWeight * excess
	frame_dig 13 // repWeight: uint64
	frame_dig 3 // excess: uint64
	*
	frame_bury 14 // participantWeight: uint64

	// contracts\Moderator.algo.ts:222
	// reward = wideRatio([participantWeight * pricePool], [poolWeight])
	intc 2 // 0
	frame_dig 14 // participantWeight: uint64
	pushint 10000000
	*
	intc 2 // 0
	frame_dig 1 // poolWeight: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 15 // reward: uint64

	// contracts\Moderator.algo.ts:224
	// rewardAmount.push(reward)
	frame_dig 4 // rewardAmount: uint64[]
	frame_dig 15 // reward: uint64
	itob
	concat
	frame_bury 4 // rewardAmount: uint64[]

	// increment offset and loop if not out of bounds
	frame_dig 12 // the offset we are extracting the next element from
	intc 1 // 8
	+
	dup
	intc 4 //  offset of last element
	<
	bz *forEach_1_end
	frame_bury 12 // the offset we are extracting the next element from
	frame_dig 10 // copy of the array we are iterating over
	frame_dig 12 // the offset we are extracting the next element from
	intc 1 // 8
	extract
	btoi
	frame_bury 11 // honestyScore: uint64
	b *forEach_1

*forEach_1_end:
	// contracts\Moderator.algo.ts:227
	// return rewardAmount;
	frame_dig 4 // rewardAmount: uint64[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 15
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts\Moderator.algo.ts:232
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\Moderator.algo.ts:233
	// sendPayment({
	//       closeRemainderTo: this.txn.sender,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Moderator.algo.ts:234
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 2 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0x115756db // method "createApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x66e8158c // method "assignRewardPool(uint64,pay)uint64"
	pushbytes 0x286be636 // method "checkBalance()uint64"
	pushbytes 0x11a779ab // method "payoutRewards(address,uint64)string"
	pushbytes 0xd95509fa // method "bulkPayoutRewards(address[],uint64[])string"
	pushbytes 0xb78918f5 // method "storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void"
	pushbytes 0x6ddcdfdc // method "getClassificationCriteria()(uint64,uint64,uint64,uint64)"
	pushbytes 0x1342d8ea // method "classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool"
	pushbytes 0x7de2dfcd // method "storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void"
	pushbytes 0xbf8adedf // method "regModelSelectionCriteria((uint64,uint64,uint64,uint64))string"
	pushbytes 0x54d250bf // method "storeModelParams(pay,address,(string,string,uint64,uint64))void"
	pushbytes 0x705cb310 // method "getBoxValue(address)(string,string,uint64,uint64)"
	pushbytes 0xd1885361 // method "distributeRewards((uint64))uint64[]"
	txna ApplicationArgs 0
	match *abi_route_assignRewardPool *abi_route_checkBalance *abi_route_payoutRewards *abi_route_bulkPayoutRewards *abi_route_storeClassificationSelectionCriteria *abi_route_getClassificationCriteria *abi_route_classModelSelectionCriteria *abi_route_storeModelRegressionSelectionCriteria *abi_route_regModelSelectionCriteria *abi_route_storeModelParams *abi_route_getBoxValue *abi_route_distributeRewards

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x1747405b // method "updateApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err