#pragma version 10
intcblock 1 0 32 8 1000000
bytecblock 0x0013496e697469616c4d6f64656c4d657472696373 0x151f7c75 0x 0x7374616b65416d6f756e74 0x6970667348617368

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string)void
*abi_route_createApplication:
	// modelHash: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(modelHash: string): void
createApplication:
	proto 1 0

	// contracts\Moderator.algo.ts:42
	// this.ipfsHash.value = modelHash
	bytec 4 //  "ipfsHash"
	frame_dig -1 // modelHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// updateApplication(string)void
*abi_route_updateApplication:
	// modelHash: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateApplication(string)void
	callsub updateApplication
	intc 0 // 1
	return

// updateApplication(modelHash: string): void
updateApplication:
	proto 1 0

	// contracts\Moderator.algo.ts:47
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\Moderator.algo.ts:48
	// this.ipfsHash.value = modelHash
	bytec 4 //  "ipfsHash"
	frame_dig -1 // modelHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// assignRewardPool(uint64,pay)uint64
*abi_route_assignRewardPool:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// rewardPoolTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (rewardPoolTxn) for assignRewardPool must be a pay transaction
	assert

	// rewardPoolAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute assignRewardPool(uint64,pay)uint64
	callsub assignRewardPool
	itob
	concat
	log
	intc 0 // 1
	return

// assignRewardPool(rewardPoolAmount: uint64, rewardPoolTxn: PayTxn): uint64
assignRewardPool:
	proto 2 1

	// contracts\Moderator.algo.ts:53
	// verifyPayTxn(rewardPoolTxn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: rewardPoolAmount,
	//     })
	// verify sender
	frame_dig -2 // rewardPoolTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"rewardPoolTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -2 // rewardPoolTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardPoolTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // rewardPoolTxn: PayTxn
	gtxns Amount
	frame_dig -1 // rewardPoolAmount: uint64
	==

	// transaction verification failed: {"txn":"rewardPoolTxn","field":"amount","expected":"rewardPoolAmount"}
	assert

	// contracts\Moderator.algo.ts:58
	// this.rewardPool.value = rewardPoolAmount
	pushbytes 0x726577617264506f6f6c // "rewardPool"
	frame_dig -1 // rewardPoolAmount: uint64
	app_global_put

	// contracts\Moderator.algo.ts:59
	// this.stakeAmount.value = wideRatio([rewardPoolAmount], [2])
	bytec 3 //  "stakeAmount"
	intc 1 // 0
	frame_dig -1 // rewardPoolAmount: uint64
	intc 1 // 0
	pushint 2
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	app_global_put

	// contracts\Moderator.algo.ts:60
	// return 1;
	intc 0 // 1
	retsub

// commitToListing(pay)uint64
*abi_route_commitToListing:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// stakeAmountTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (stakeAmountTxn) for commitToListing must be a pay transaction
	assert

	// execute commitToListing(pay)uint64
	callsub commitToListing
	itob
	concat
	log
	intc 0 // 1
	return

// commitToListing(stakeAmountTxn: PayTxn): uint64
commitToListing:
	proto 1 1

	// contracts\Moderator.algo.ts:65
	// verifyPayTxn(stakeAmountTxn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: this.stakeAmount.value,
	//     })
	// verify sender
	frame_dig -1 // stakeAmountTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeAmountTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // stakeAmountTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeAmountTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // stakeAmountTxn: PayTxn
	gtxns Amount
	bytec 3 //  "stakeAmount"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeAmountTxn","field":"amount","expected":"this.stakeAmount.value"}
	assert

	// contracts\Moderator.algo.ts:71
	// return 1;
	intc 0 // 1
	retsub

// checkBalance()uint64
*abi_route_checkBalance:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute checkBalance()uint64
	callsub checkBalance
	itob
	concat
	log
	intc 0 // 1
	return

// checkBalance(): uint64
checkBalance:
	proto 0 1

	// contracts\Moderator.algo.ts:76
	// return this.app.address.balance;
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	retsub

// bulkPayoutRewards(address[],uint64[])uint64
*abi_route_bulkPayoutRewards:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// rewards: uint64[]
	txna ApplicationArgs 2
	extract 2 0

	// addresses: address[]
	txna ApplicationArgs 1
	extract 2 0

	// execute bulkPayoutRewards(address[],uint64[])uint64
	callsub bulkPayoutRewards
	itob
	concat
	log
	intc 0 // 1
	return

// bulkPayoutRewards(addresses: Address[], rewards: uint64[]): uint64
bulkPayoutRewards:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 5

	// contracts\Moderator.algo.ts:82
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\Moderator.algo.ts:83
	// assert(addresses.length === rewards.length, 'Arrays must have the same length')
	frame_dig -1 // addresses: Address[]
	len
	intc 2 // 32
	/
	frame_dig -2 // rewards: uint64[]
	len
	intc 3 // 8
	/
	==

	// Arrays must have the same length
	assert

	// contracts\Moderator.algo.ts:85
	// totalReward = 0
	intc 1 // 0
	frame_bury 0 // totalReward: uint64

	// contracts\Moderator.algo.ts:86
	// for (let i = 0; i < rewards.length; i += 1)
	intc 1 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts\Moderator.algo.ts:86
	// i < rewards.length
	frame_dig 1 // i: uint64
	frame_dig -2 // rewards: uint64[]
	len
	intc 3 // 8
	/
	<
	bz *for_0_end

	// contracts\Moderator.algo.ts:87
	// totalReward += rewards[i]
	frame_dig 0 // totalReward: uint64
	frame_dig -2 // rewards: uint64[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 1 // i: uint64
	intc 3 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	+
	frame_bury 0 // totalReward: uint64

*for_0_continue:
	// contracts\Moderator.algo.ts:86
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts\Moderator.algo.ts:90
	// totalStakeAmount = wideRatio([addresses.length, this.stakeAmount.value], [1])
	frame_dig -1 // addresses: Address[]
	len
	intc 2 // 32
	/
	bytec 3 //  "stakeAmount"
	app_global_get
	mulw
	intc 1 // 0
	intc 0 // 1
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // totalStakeAmount: uint64

	// contracts\Moderator.algo.ts:92
	// totalPayout = totalReward + totalStakeAmount
	frame_dig 0 // totalReward: uint64
	frame_dig 2 // totalStakeAmount: uint64
	+
	frame_bury 3 // totalPayout: uint64

	// contracts\Moderator.algo.ts:94
	// assert(this.app.address.balance >= totalPayout, 'Insufficient balance for rewards')
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_dig 3 // totalPayout: uint64
	>=

	// Insufficient balance for rewards
	assert

	// contracts\Moderator.algo.ts:96
	// for (let i = 0; i < addresses.length; i += 1)
	intc 1 // 0
	frame_bury 4 // i: uint64

*for_1:
	// contracts\Moderator.algo.ts:96
	// i < addresses.length
	frame_dig 4 // i: uint64
	frame_dig -1 // addresses: Address[]
	len
	intc 2 // 32
	/
	<
	bz *for_1_end

	// contracts\Moderator.algo.ts:97
	// sendPayment({
	//         amount: rewards[i] + this.stakeAmount.value,
	//         receiver: addresses[i],
	//         note: 'reward',
	//       })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Moderator.algo.ts:98
	// amount: rewards[i] + this.stakeAmount.value
	frame_dig -2 // rewards: uint64[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 4 // i: uint64
	intc 3 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 3 // 8
	extract3
	btoi
	bytec 3 //  "stakeAmount"
	app_global_get
	+
	itxn_field Amount

	// contracts\Moderator.algo.ts:99
	// receiver: addresses[i]
	frame_dig -1 // addresses: Address[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 4 // i: uint64
	intc 2 // 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 32
	extract3
	itxn_field Receiver

	// contracts\Moderator.algo.ts:100
	// note: 'reward'
	pushbytes 0x726577617264 // "reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*for_1_continue:
	// contracts\Moderator.algo.ts:96
	// i += 1
	frame_dig 4 // i: uint64
	intc 0 // 1
	+
	frame_bury 4 // i: uint64
	b *for_1

*for_1_end:
	// contracts\Moderator.algo.ts:104
	// for (let i = 0; i < addresses.length; i += 1)
	intc 1 // 0
	frame_bury 5 // i: uint64

*for_2:
	// contracts\Moderator.algo.ts:104
	// i < addresses.length
	frame_dig 5 // i: uint64
	frame_dig -1 // addresses: Address[]
	len
	intc 2 // 32
	/
	<
	bz *for_2_end

	// contracts\Moderator.algo.ts:105
	// this.deleteBox(addresses[i])
	frame_dig -1 // addresses: Address[]
	store 255 // full array
	intc 1 //  initial offset
	frame_dig 5 // i: uint64
	intc 2 // 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 32
	extract3
	callsub deleteBox

*for_2_continue:
	// contracts\Moderator.algo.ts:104
	// i += 1
	frame_dig 5 // i: uint64
	intc 0 // 1
	+
	frame_bury 5 // i: uint64
	b *for_2

*for_2_end:
	// contracts\Moderator.algo.ts:108
	// this.deleteApplication()
	callsub deleteApplication

	// contracts\Moderator.algo.ts:110
	// return 1;
	intc 0 // 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void
*abi_route_storeClassificationSelectionCriteria:
	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction
	assert

	// evaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void
	callsub storeClassificationSelectionCriteria
	intc 0 // 1
	return

// storeClassificationSelectionCriteria(evaluationMetrics: Classification, mbrPay: PayTxn): void
storeClassificationSelectionCriteria:
	proto 2 0

	// contracts\Moderator.algo.ts:115
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:116
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: boxMbr,
	//     })
	// verify sender
	frame_dig -2 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -2 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // mbrPay: PayTxn
	gtxns Amount
	intc 4 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:122
	// this.classificationPerformanceMetrics('InitialModelMetrics').create(32)
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 2 // 32
	box_create
	pop

	// contracts\Moderator.algo.ts:123
	// this.classificationPerformanceMetrics('InitialModelMetrics').value = evaluationMetrics
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	frame_dig -1 // evaluationMetrics: Classification
	box_put
	retsub

// getClassificationCriteria()(uint64,uint64,uint64,uint64)
*abi_route_getClassificationCriteria:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute getClassificationCriteria()(uint64,uint64,uint64,uint64)
	callsub getClassificationCriteria
	concat
	log
	intc 0 // 1
	return

// getClassificationCriteria(): Classification
getClassificationCriteria:
	proto 0 1

	// contracts\Moderator.algo.ts:128
	// assert(this.classificationPerformanceMetrics('InitialModelMetrics').exists)
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:129
	// return this.classificationPerformanceMetrics('InitialModelMetrics').value;
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_get

	// box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value
	assert
	retsub

// classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64
*abi_route_classModelSelectionCriteria:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// modelEvaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64
	callsub classModelSelectionCriteria
	itob
	concat
	log
	intc 0 // 1
	return

// classModelSelectionCriteria(modelEvaluationMetrics: Classification): uint64
classModelSelectionCriteria:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts\Moderator.algo.ts:134
	// assert(this.classificationPerformanceMetrics('InitialModelMetrics').exists)
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:137
	// baselineScore =
	//       baselineClassMetrics.accuracy +
	//       baselineClassMetrics.precision +
	//       baselineClassMetrics.recall +
	//       baselineClassMetrics.f1score
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 1 // 0
	intc 3 // 8
	box_extract
	btoi
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 3 //  headOffset
	intc 3 // 8
	box_extract
	btoi
	+
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	pushint 16 // headOffset
	intc 3 // 8
	box_extract
	btoi
	+
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	pushint 24 // headOffset
	intc 3 // 8
	box_extract
	btoi
	+
	frame_bury 0 // baselineScore: uint64

	// contracts\Moderator.algo.ts:143
	// modelScore =
	//       modelEvaluationMetrics.accuracy +
	//       modelEvaluationMetrics.precision +
	//       modelEvaluationMetrics.recall +
	//       modelEvaluationMetrics.f1score
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 0 8
	btoi
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 8 8
	btoi
	+
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 16 8
	btoi
	+
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 24 8
	btoi
	+
	frame_bury 1 // modelScore: uint64

	// *if0_condition
	// contracts\Moderator.algo.ts:149
	// modelScore <= baselineScore
	frame_dig 1 // modelScore: uint64
	frame_dig 0 // baselineScore: uint64
	<=
	bz *if0_end

	// *if0_consequent
	// contracts\Moderator.algo.ts:150
	// return 0;
	intc 1 // 0
	b *classModelSelectionCriteria*return

*if0_end:
	// contracts\Moderator.algo.ts:153
	// return modelScore - baselineScore;
	frame_dig 1 // modelScore: uint64
	frame_dig 0 // baselineScore: uint64
	-

*classModelSelectionCriteria*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// storeModelParams(pay,address,(string,string,uint64,uint64))void
*abi_route_storeModelParams:
	// paramsData: (string,string,uint64,uint64)
	txna ApplicationArgs 2

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (Address) for storeModelParams must be a address
	assert

	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (mbrPay) for storeModelParams must be a pay transaction
	assert

	// execute storeModelParams(pay,address,(string,string,uint64,uint64))void
	callsub storeModelParams
	intc 0 // 1
	return

// storeModelParams(mbrPay: PayTxn, Address: Address, paramsData: ParamsData): void
storeModelParams:
	proto 3 0

	// *if1_condition
	// contracts\Moderator.algo.ts:158
	// this.paramsData(Address).exists
	frame_dig -2 // Address: Address
	box_len
	swap
	pop
	bz *if1_else

	// *if1_consequent
	// contracts\Moderator.algo.ts:159
	// verifyTxn(this.txn, { sender: this.txn.sender })
	// verify sender
	txn Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.txn.sender"}
	assert

	// contracts\Moderator.algo.ts:160
	// verifyPayTxn(mbrPay, {
	//         sender: this.txn.sender,
	//         receiver: this.app.address,
	//         amount: boxMbr,
	//       })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	intc 4 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:166
	// this.paramsData(Address).value = paramsData
	frame_dig -2 // Address: Address
	dup
	box_del
	pop
	frame_dig -3 // paramsData: ParamsData
	box_put
	b *if1_end

*if1_else:
	// contracts\Moderator.algo.ts:168
	// verifyTxn(this.txn, { sender: this.txn.sender })
	// verify sender
	txn Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.txn.sender"}
	assert

	// contracts\Moderator.algo.ts:169
	// verifyPayTxn(mbrPay, {
	//         sender: this.txn.sender,
	//         receiver: this.app.address,
	//         amount: boxMbr,
	//       })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	intc 4 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:175
	// this.paramsData(Address).create(32)
	frame_dig -2 // Address: Address
	intc 2 // 32
	box_create
	pop

	// contracts\Moderator.algo.ts:176
	// this.paramsData(Address).value = paramsData
	frame_dig -2 // Address: Address
	dup
	box_del
	pop
	frame_dig -3 // paramsData: ParamsData
	box_put

*if1_end:
	retsub

// getBoxValue(address)(string,string,uint64,uint64)
*abi_route_getBoxValue:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (Address) for getBoxValue must be a address
	assert

	// execute getBoxValue(address)(string,string,uint64,uint64)
	callsub getBoxValue
	concat
	log
	intc 0 // 1
	return

// getBoxValue(Address: Address): ParamsData
getBoxValue:
	proto 1 1

	// contracts\Moderator.algo.ts:182
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:183
	// assert(this.paramsData(Address).exists)
	frame_dig -1 // Address: Address
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:184
	// return this.paramsData(Address).value;
	frame_dig -1 // Address: Address
	box_get

	// box value does not exist: this.paramsData(Address).value
	assert
	retsub

// deleteBox(address)uint64
*abi_route_deleteBox:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// address: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (address) for deleteBox must be a address
	assert

	// execute deleteBox(address)uint64
	callsub deleteBox
	itob
	concat
	log
	intc 0 // 1
	return

// deleteBox(address: Address): uint64
deleteBox:
	proto 1 1

	// *if2_condition
	// contracts\Moderator.algo.ts:189
	// this.classificationPerformanceMetrics('InitialModelMetrics').exists
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	bz *if2_end

	// *if2_consequent
	// contracts\Moderator.algo.ts:190
	// this.classificationPerformanceMetrics('InitialModelMetrics').delete()
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_del

*if2_end:
	// *if3_condition
	// contracts\Moderator.algo.ts:192
	// this.paramsData(address).exists
	frame_dig -1 // address: Address
	box_len
	swap
	pop
	bz *if3_end

	// *if3_consequent
	// contracts\Moderator.algo.ts:193
	// this.paramsData(address).delete()
	frame_dig -1 // address: Address
	box_del

*if3_end:
	// contracts\Moderator.algo.ts:195
	// return 1;
	intc 0 // 1
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts\Moderator.algo.ts:200
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\Moderator.algo.ts:202
	// sendPayment({
	//       closeRemainderTo: this.txn.sender,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Moderator.algo.ts:203
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0x115756db // method "createApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x66e8158c // method "assignRewardPool(uint64,pay)uint64"
	pushbytes 0x0fd36836 // method "commitToListing(pay)uint64"
	pushbytes 0x286be636 // method "checkBalance()uint64"
	pushbytes 0xb78918f5 // method "storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void"
	pushbytes 0x6ddcdfdc // method "getClassificationCriteria()(uint64,uint64,uint64,uint64)"
	pushbytes 0x436a0295 // method "classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64"
	pushbytes 0x54d250bf // method "storeModelParams(pay,address,(string,string,uint64,uint64))void"
	pushbytes 0x705cb310 // method "getBoxValue(address)(string,string,uint64,uint64)"
	pushbytes 0xf4a30c1f // method "deleteBox(address)uint64"
	txna ApplicationArgs 0
	match *abi_route_assignRewardPool *abi_route_commitToListing *abi_route_checkBalance *abi_route_storeClassificationSelectionCriteria *abi_route_getClassificationCriteria *abi_route_classModelSelectionCriteria *abi_route_storeModelParams *abi_route_getBoxValue *abi_route_deleteBox

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x1747405b // method "updateApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*call_DeleteApplication:
	pushbytes 0x8345dc83 // method "bulkPayoutRewards(address[],uint64[])uint64"
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_bulkPayoutRewards *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err