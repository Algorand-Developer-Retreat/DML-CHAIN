#pragma version 10
intcblock 1 8 32 1000000 0 16
bytecblock 0x0013496e697469616c4d6f64656c4d657472696373 0x00087265674d6f64656c 0x151f7c75 0x6970667348617368 0x4d6f64656c20686173206265656e20616363657074656420666f72206675727468657220636f6e73696465726174696f6e 0x6661696c656420746865206d696e696d756d20726571756972656d656e7473

// This TEAL was generated by TEALScript v0.106.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string)void
*abi_route_createApplication:
	// modelHash: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(modelHash: string): void
createApplication:
	proto 1 0

	// contracts\Moderator.algo.ts:42
	// this.ipfsHash.value = modelHash
	bytec 3 //  "ipfsHash"
	frame_dig -1 // modelHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// updateApplication(string)void
*abi_route_updateApplication:
	// modelHash: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateApplication(string)void
	callsub updateApplication
	intc 0 // 1
	return

// updateApplication(modelHash: string): void
updateApplication:
	proto 1 0

	// contracts\Moderator.algo.ts:47
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\Moderator.algo.ts:48
	// this.ipfsHash.value = modelHash
	bytec 3 //  "ipfsHash"
	frame_dig -1 // modelHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// printHash()string
*abi_route_printHash:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute printHash()string
	callsub printHash
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// printHash(): string
printHash:
	proto 0 1

	// contracts\Moderator.algo.ts:53
	// return this.ipfsHash.value;
	bytec 3 //  "ipfsHash"
	app_global_get
	extract 2 0
	retsub

// storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void
*abi_route_storeClassificationSelectionCriteria:
	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction
	assert

	// evaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void
	callsub storeClassificationSelectionCriteria
	intc 0 // 1
	return

// storeClassificationSelectionCriteria(evaluationMetrics: Classification, mbrPay: PayTxn): void
storeClassificationSelectionCriteria:
	proto 2 0

	// contracts\Moderator.algo.ts:58
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:59
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: boxMbr,
	//     })
	// verify sender
	frame_dig -2 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -2 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // mbrPay: PayTxn
	gtxns Amount
	intc 3 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:65
	// this.classificationPerformanceMetrics('InitialModelMetrics').create(32)
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 2 // 32
	box_create
	pop

	// contracts\Moderator.algo.ts:66
	// this.classificationPerformanceMetrics('InitialModelMetrics').value = evaluationMetrics
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	frame_dig -1 // evaluationMetrics: Classification
	box_put
	retsub

// getClassificationCriteria()(uint64,uint64,uint64,uint64)
*abi_route_getClassificationCriteria:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getClassificationCriteria()(uint64,uint64,uint64,uint64)
	callsub getClassificationCriteria
	concat
	log
	intc 0 // 1
	return

// getClassificationCriteria(): Classification
getClassificationCriteria:
	proto 0 1

	// contracts\Moderator.algo.ts:71
	// assert(this.classificationPerformanceMetrics('InitialModelMetrics').exists)
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:72
	// return this.classificationPerformanceMetrics('InitialModelMetrics').value;
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_get

	// box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value
	assert
	retsub

// classModelSelectionCriteria((uint64,uint64,uint64,uint64))string
*abi_route_classModelSelectionCriteria:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// modelEvaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute classModelSelectionCriteria((uint64,uint64,uint64,uint64))string
	callsub classModelSelectionCriteria
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// classModelSelectionCriteria(modelEvaluationMetrics: Classification): string
classModelSelectionCriteria:
	proto 1 1

	// contracts\Moderator.algo.ts:77
	// assert(this.classificationPerformanceMetrics('InitialModelMetrics').exists)
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	box_len
	swap
	pop
	assert

	// *if0_condition
	// contracts\Moderator.algo.ts:80
	// modelEvaluationMetrics.accuracy >= baselineClassMetrics.accuracy &&
	//       modelEvaluationMetrics.precision >= baselineClassMetrics.precision &&
	//       modelEvaluationMetrics.recall >= baselineClassMetrics.recall
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 0 8
	btoi
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 4 // 0
	intc 1 // 8
	box_extract
	btoi
	>=
	dup
	bz *skip_and0
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 8 8
	btoi
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and0:
	dup
	bz *skip_and1
	frame_dig -1 // modelEvaluationMetrics: Classification
	extract 16 8
	btoi
	bytec 0 // 0x0013496e697469616c4d6f64656c4d657472696373
	intc 5 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and1:
	bz *if0_end

	// *if0_consequent
	// contracts\Moderator.algo.ts:84
	// return 'Model has been accepted for further consideration';
	bytec 4 //  "Model has been accepted for further consideration"
	retsub

*if0_end:
	// contracts\Moderator.algo.ts:86
	// return 'failed the minimum requirements';
	bytec 5 //  "failed the minimum requirements"
	retsub

// storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void
*abi_route_storeModelRegressionSelectionCriteria:
	// evaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void
	callsub storeModelRegressionSelectionCriteria
	intc 0 // 1
	return

// storeModelRegressionSelectionCriteria(evaluationMetrics: Regression): void
storeModelRegressionSelectionCriteria:
	proto 1 0

	// contracts\Moderator.algo.ts:91
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\Moderator.algo.ts:92
	// this.regressionPerformanceMetrics('regModel').value = evaluationMetrics
	bytec 1 // 0x00087265674d6f64656c
	frame_dig -1 // evaluationMetrics: Regression
	box_put
	retsub

// regModelSelectionCriteria((uint64,uint64,uint64,uint64))string
*abi_route_regModelSelectionCriteria:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// modelEvaluationMetrics: (uint64,uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)
	assert

	// execute regModelSelectionCriteria((uint64,uint64,uint64,uint64))string
	callsub regModelSelectionCriteria
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// regModelSelectionCriteria(modelEvaluationMetrics: Regression): string
regModelSelectionCriteria:
	proto 1 1

	// *if1_condition
	// contracts\Moderator.algo.ts:99
	// modelEvaluationMetrics.MSE <= baselineRegMetrics.MSE &&
	//       modelEvaluationMetrics.MAE <= baselineRegMetrics.MAE &&
	//       modelEvaluationMetrics.RMSE <= baselineRegMetrics.RMSE &&
	//       modelEvaluationMetrics.COD >= baselineRegMetrics.COD
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 0 8
	btoi
	bytec 1 // 0x00087265674d6f64656c
	intc 4 // 0
	intc 1 // 8
	box_extract
	btoi
	<=
	dup
	bz *skip_and2
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 16 8
	btoi
	bytec 1 // 0x00087265674d6f64656c
	intc 5 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	<=
	&&

*skip_and2:
	dup
	bz *skip_and3
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 8 8
	btoi
	bytec 1 // 0x00087265674d6f64656c
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	<=
	&&

*skip_and3:
	dup
	bz *skip_and4
	frame_dig -1 // modelEvaluationMetrics: Regression
	extract 24 8
	btoi
	bytec 1 // 0x00087265674d6f64656c
	pushint 24 // headOffset
	intc 1 // 8
	box_extract
	btoi
	>=
	&&

*skip_and4:
	bz *if1_end

	// *if1_consequent
	// contracts\Moderator.algo.ts:104
	// return 'Model has been accepted for further consideration';
	bytec 4 //  "Model has been accepted for further consideration"
	retsub

*if1_end:
	// contracts\Moderator.algo.ts:106
	// return 'failed the minimum requirements';
	bytec 5 //  "failed the minimum requirements"
	retsub

// storeModelParams(pay,address,(string,string))void
*abi_route_storeModelParams:
	// paramsData: (string,string)
	txna ApplicationArgs 2

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (Address) for storeModelParams must be a address
	assert

	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 2 (mbrPay) for storeModelParams must be a pay transaction
	assert

	// execute storeModelParams(pay,address,(string,string))void
	callsub storeModelParams
	intc 0 // 1
	return

// storeModelParams(mbrPay: PayTxn, Address: Address, paramsData: ParamsData): void
storeModelParams:
	proto 3 0

	// contracts\Moderator.algo.ts:111
	// verifyTxn(this.txn, { sender: this.txn.sender })
	// verify sender
	txn Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.txn.sender"}
	assert

	// contracts\Moderator.algo.ts:112
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: boxMbr,
	//     })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	intc 3 // 1000000
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"boxMbr"}
	assert

	// contracts\Moderator.algo.ts:118
	// this.paramsData(Address).create(32)
	frame_dig -2 // Address: Address
	intc 2 // 32
	box_create
	pop

	// contracts\Moderator.algo.ts:119
	// this.paramsData(Address).value = paramsData
	frame_dig -2 // Address: Address
	dup
	box_del
	pop
	frame_dig -3 // paramsData: ParamsData
	box_put
	retsub

// getBoxValue(address)(string,string)
*abi_route_getBoxValue:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// Address: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (Address) for getBoxValue must be a address
	assert

	// execute getBoxValue(address)(string,string)
	callsub getBoxValue
	concat
	log
	intc 0 // 1
	return

// getBoxValue(Address: Address): ParamsData
getBoxValue:
	proto 1 1

	// contracts\Moderator.algo.ts:124
	// assert(this.paramsData(Address).exists)
	frame_dig -1 // Address: Address
	box_len
	swap
	pop
	assert

	// contracts\Moderator.algo.ts:125
	// return this.paramsData(Address).value;
	frame_dig -1 // Address: Address
	box_get

	// box value does not exist: this.paramsData(Address).value
	assert
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts\Moderator.algo.ts:130
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert
	retsub

*create_NoOp:
	pushbytes 0x115756db // method "createApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x1537c194 // method "printHash()string"
	pushbytes 0xb78918f5 // method "storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void"
	pushbytes 0x6ddcdfdc // method "getClassificationCriteria()(uint64,uint64,uint64,uint64)"
	pushbytes 0xd1a9c1eb // method "classModelSelectionCriteria((uint64,uint64,uint64,uint64))string"
	pushbytes 0x7de2dfcd // method "storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void"
	pushbytes 0xbf8adedf // method "regModelSelectionCriteria((uint64,uint64,uint64,uint64))string"
	pushbytes 0x5b5536de // method "storeModelParams(pay,address,(string,string))void"
	pushbytes 0xedaedb79 // method "getBoxValue(address)(string,string)"
	txna ApplicationArgs 0
	match *abi_route_printHash *abi_route_storeClassificationSelectionCriteria *abi_route_getClassificationCriteria *abi_route_classModelSelectionCriteria *abi_route_storeModelRegressionSelectionCriteria *abi_route_regModelSelectionCriteria *abi_route_storeModelParams *abi_route_getBoxValue

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x1747405b // method "updateApplication(string)void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err