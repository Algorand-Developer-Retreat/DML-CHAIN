{
  "hints": {
    "createApplication(string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(string)void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "assignRewardPool(uint64,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "commitToListing(pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkBalance()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payoutRewards(address,uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bulkPayoutRewards(address[],uint64[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getClassificationCriteria()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "regModelSelectionCriteria((uint64,uint64,uint64,uint64))string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeModelParams(pay,address,(string,string,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBoxValue(address)(string,string,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "distributeRewards((uint64))uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "ipfsHash": {
          "type": "bytes",
          "key": "ipfsHash"
        },
        "rewardPool": {
          "type": "uint64",
          "key": "rewardPool"
        },
        "stakeAmount": {
          "type": "uint64",
          "key": "stakeAmount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DMLChain",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "modelHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [
          {
            "name": "modelHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assignRewardPool",
        "args": [
          {
            "name": "rewardPoolAmount",
            "type": "uint64"
          },
          {
            "name": "rewardPoolTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "commitToListing",
        "args": [
          {
            "name": "stakeAmountTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "checkBalance",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "payoutRewards",
        "args": [
          {
            "name": "Address",
            "type": "address"
          },
          {
            "name": "reward",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "bulkPayoutRewards",
        "args": [
          {
            "name": "addresses",
            "type": "address[]"
          },
          {
            "name": "rewards",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "storeClassificationSelectionCriteria",
        "args": [
          {
            "name": "evaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          },
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getClassificationCriteria",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "classModelSelectionCriteria",
        "args": [
          {
            "name": "modelEvaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "storeModelRegressionSelectionCriteria",
        "args": [
          {
            "name": "evaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "regModelSelectionCriteria",
        "args": [
          {
            "name": "modelEvaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "storeModelParams",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "Address",
            "type": "address"
          },
          {
            "name": "paramsData",
            "type": "(string,string,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getBoxValue",
        "args": [
          {
            "name": "Address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(string,string,uint64,uint64)"
        }
      },
      {
        "name": "distributeRewards",
        "args": [
          {
            "name": "contributor",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}