{
  "hints": {
    "createApplication(string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(string)void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "assignRewardPool(uint64,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkBalance()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getClassificationCriteria()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "classModelSelectionCriteria((uint64,uint64,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "regModelSelectionCriteria((uint64,uint64,uint64,uint64))string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeModelParams(pay,address,(string,string,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getBoxValue(address)(string,string,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "distributeRewards((uint64))uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "ipfsHash": {
          "type": "bytes",
          "key": "ipfsHash"
        },
        "rewardPool": {
          "type": "uint64",
          "key": "rewardPool"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDggMCAzMiAyNCAxMDAwMDAwIDE2IDEwMDAgMTAwMDAKYnl0ZWNibG9jayAweCAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MyAweDE1MWY3Yzc1IDB4MDAwODcyNjU2NzRkNmY2NDY1NmMgMHg3MjY1Nzc2MTcyNjQ1MDZmNmY2YyAweDY5NzA2NjczNDg2MTczNjgKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiAqY2FsbF9EZWxldGVBcHBsaWNhdGlvbiAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBtb2RlbEhhc2g6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbihtb2RlbEhhc2g6IHN0cmluZyk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NTEKCS8vIHRoaXMuaXBmc0hhc2gudmFsdWUgPSBtb2RlbEhhc2gKCWJ5dGVjIDUgLy8gICJpcGZzSGFzaCIKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEhhc2g6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHVwZGF0ZUFwcGxpY2F0aW9uKHN0cmluZyl2b2lkCiphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb246CgkvLyBtb2RlbEhhc2g6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHVwZGF0ZUFwcGxpY2F0aW9uKHN0cmluZyl2b2lkCgljYWxsc3ViIHVwZGF0ZUFwcGxpY2F0aW9uCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyB1cGRhdGVBcHBsaWNhdGlvbihtb2RlbEhhc2g6IHN0cmluZyk6IHZvaWQKdXBkYXRlQXBwbGljYXRpb246Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NTYKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NTcKCS8vIHRoaXMuaXBmc0hhc2gudmFsdWUgPSBtb2RlbEhhc2gKCWJ5dGVjIDUgLy8gICJpcGZzSGFzaCIKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEhhc2g6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGFzc2lnblJld2FyZFBvb2wodWludDY0LHBheSl1aW50NjQKKmFiaV9yb3V0ZV9hc3NpZ25SZXdhcmRQb29sOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyByZXdhcmRQb29sVHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAocmV3YXJkUG9vbFR4bikgZm9yIGFzc2lnblJld2FyZFBvb2wgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gcmV3YXJkUG9vbEFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhc3NpZ25SZXdhcmRQb29sKHVpbnQ2NCxwYXkpdWludDY0CgljYWxsc3ViIGFzc2lnblJld2FyZFBvb2wKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBhc3NpZ25SZXdhcmRQb29sKHJld2FyZFBvb2xBbW91bnQ6IHVpbnQ2NCwgcmV3YXJkUG9vbFR4bjogUGF5VHhuKTogdWludDY0CmFzc2lnblJld2FyZFBvb2w6Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NjIKCS8vIHZlcmlmeVBheVR4bihyZXdhcmRQb29sVHhuLCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiByZXdhcmRQb29sQW1vdW50LAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gcmV3YXJkUG9vbFR4bjogUGF5VHhuCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJyZXdhcmRQb29sVHhuIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMiAvLyByZXdhcmRQb29sVHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFBvb2xUeG4iLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyByZXdhcmRQb29sVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHJld2FyZFBvb2xBbW91bnQ6IHVpbnQ2NAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFBvb2xUeG4iLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoicmV3YXJkUG9vbEFtb3VudCJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NjcKCS8vIHRoaXMucmV3YXJkUG9vbC52YWx1ZSA9IHJld2FyZFBvb2xBbW91bnQKCWJ5dGVjIDQgLy8gICJyZXdhcmRQb29sIgoJZnJhbWVfZGlnIC0xIC8vIHJld2FyZFBvb2xBbW91bnQ6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NjgKCS8vIHJldHVybiB0aGlzLnJld2FyZFBvb2wudmFsdWU7CglieXRlYyA0IC8vICAicmV3YXJkUG9vbCIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGNoZWNrQmFsYW5jZSgpdWludDY0CiphYmlfcm91dGVfY2hlY2tCYWxhbmNlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGNoZWNrQmFsYW5jZSgpdWludDY0CgljYWxsc3ViIGNoZWNrQmFsYW5jZQoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNoZWNrQmFsYW5jZSgpOiB1aW50NjQKY2hlY2tCYWxhbmNlOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjczCgkvLyByZXR1cm4gdGhpcy5hcHAuYWRkcmVzcy5iYWxhbmNlOwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJcG9wCglyZXRzdWIKCi8vIHN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSxwYXkpdm9pZAoqYWJpX3JvdXRlX3N0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYToKCS8vIG1iclBheTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKG1iclBheSkgZm9yIHN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBldmFsdWF0aW9uTWV0cmljczogKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDMgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoZXZhbHVhdGlvbk1ldHJpY3MpIGZvciBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEgbXVzdCBiZSBhICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBleGVjdXRlIHN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSxwYXkpdm9pZAoJY2FsbHN1YiBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHN0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYShldmFsdWF0aW9uTWV0cmljczogQ2xhc3NpZmljYXRpb24sIG1iclBheTogUGF5VHhuKTogdm9pZApzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWE6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NzgKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgeyBzZW5kZXI6IHRoaXMuYXBwLmNyZWF0b3IgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InRoaXMudHhuIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmNyZWF0b3IifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjc5CgkvLyB2ZXJpZnlQYXlUeG4obWJyUGF5LCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBib3hNYnIsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMiAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50YyA1IC8vIDEwMDAwMDAKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiYm94TWJyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo4NQoJLy8gdGhpcy5jbGFzc2lmaWNhdGlvblBlcmZvcm1hbmNlTWV0cmljcygnSW5pdGlhbE1vZGVsTWV0cmljcycpLmNyZWF0ZSgzMikKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgMyAvLyAzMgoJYm94X2NyZWF0ZQoJcG9wCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjg2CgkvLyB0aGlzLmNsYXNzaWZpY2F0aW9uUGVyZm9ybWFuY2VNZXRyaWNzKCdJbml0aWFsTW9kZWxNZXRyaWNzJykudmFsdWUgPSBldmFsdWF0aW9uTWV0cmljcwoJYnl0ZWMgMSAvLyAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MwoJZnJhbWVfZGlnIC0xIC8vIGV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbgoJYm94X3B1dAoJcmV0c3ViCgovLyBnZXRDbGFzc2lmaWNhdGlvbkNyaXRlcmlhKCkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoqYWJpX3JvdXRlX2dldENsYXNzaWZpY2F0aW9uQ3JpdGVyaWE6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0Q2xhc3NpZmljYXRpb25Dcml0ZXJpYSgpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCWNhbGxzdWIgZ2V0Q2xhc3NpZmljYXRpb25Dcml0ZXJpYQoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGdldENsYXNzaWZpY2F0aW9uQ3JpdGVyaWEoKTogQ2xhc3NpZmljYXRpb24KZ2V0Q2xhc3NpZmljYXRpb25Dcml0ZXJpYToKCXByb3RvIDAgMQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5MQoJLy8gYXNzZXJ0KHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS5leGlzdHMpCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5MgoJLy8gcmV0dXJuIHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS52YWx1ZTsKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS52YWx1ZQoJYXNzZXJ0CglyZXRzdWIKCi8vIGNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSlib29sCiphYmlfcm91dGVfY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChtb2RlbEV2YWx1YXRpb25NZXRyaWNzKSBmb3IgY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhIG11c3QgYmUgYSAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpYm9vbAoJY2FsbHN1YiBjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEKCXB1c2hieXRlcyAweDAwCglpbnRjIDIgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEobW9kZWxFdmFsdWF0aW9uTWV0cmljczogQ2xhc3NpZmljYXRpb24pOiBib29sZWFuCmNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYToKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5NwoJLy8gYXNzZXJ0KHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS5leGlzdHMpCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTAwCgkvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLmFjY3VyYWN5ID49IGJhc2VsaW5lQ2xhc3NNZXRyaWNzLmFjY3VyYWN5ICYmCgkvLyAgICAgICBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLnByZWNpc2lvbiA+PSBiYXNlbGluZUNsYXNzTWV0cmljcy5wcmVjaXNpb24gJiYKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MucmVjYWxsID49IGJhc2VsaW5lQ2xhc3NNZXRyaWNzLnJlY2FsbCAmJgoJLy8gICAgICAgbW9kZWxFdmFsdWF0aW9uTWV0cmljcy5mMXNjb3JlID49IGJhc2VsaW5lQ2xhc3NNZXRyaWNzLmYxc2NvcmUKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbgoJZXh0cmFjdCAwIDgKCWJ0b2kKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgMiAvLyAwCglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCT49CglkdXAKCWJ6ICpza2lwX2FuZDAKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbgoJZXh0cmFjdCA4IDgKCWJ0b2kKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgMSAvLyAgaGVhZE9mZnNldAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk+PQoJJiYKCipza2lwX2FuZDA6CglkdXAKCWJ6ICpza2lwX2FuZDEKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbgoJZXh0cmFjdCAxNiA4CglidG9pCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglpbnRjIDYgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPj0KCSYmCgoqc2tpcF9hbmQxOgoJZHVwCglieiAqc2tpcF9hbmQyCglmcmFtZV9kaWcgLTEgLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljczogQ2xhc3NpZmljYXRpb24KCWV4dHJhY3QgMjQgOAoJYnRvaQoJYnl0ZWMgMSAvLyAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MwoJaW50YyA0IC8vICBoZWFkT2Zmc2V0CglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCT49CgkmJgoKKnNraXBfYW5kMjoKCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTA1CgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMCAvLyAxCglyZXRzdWIKCippZjBfZW5kOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEwNwoJLy8gcmV0dXJuIGZhbHNlOwoJaW50YyAyIC8vIDAKCXJldHN1YgoKLy8gc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkCiphYmlfcm91dGVfc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYToKCS8vIGV2YWx1YXRpb25NZXRyaWNzOiAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChldmFsdWF0aW9uTWV0cmljcykgZm9yIHN0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWEgbXVzdCBiZSBhICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBleGVjdXRlIHN0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhKGV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uKTogdm9pZApzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjExMgoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hcHAuY3JlYXRvciB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTEzCgkvLyB0aGlzLnJlZ3Jlc3Npb25QZXJmb3JtYW5jZU1ldHJpY3MoJ3JlZ01vZGVsJykudmFsdWUgPSBldmFsdWF0aW9uTWV0cmljcwoJYnl0ZWMgMyAvLyAweDAwMDg3MjY1Njc0ZDZmNjQ2NTZjCglmcmFtZV9kaWcgLTEgLy8gZXZhbHVhdGlvbk1ldHJpY3M6IFJlZ3Jlc3Npb24KCWJveF9wdXQKCXJldHN1YgoKLy8gcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSlzdHJpbmcKKmFiaV9yb3V0ZV9yZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChtb2RlbEV2YWx1YXRpb25NZXRyaWNzKSBmb3IgcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSBtdXN0IGJlIGEgKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCWFzc2VydAoKCS8vIGV4ZWN1dGUgcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSlzdHJpbmcKCWNhbGxzdWIgcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYQoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyByZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IFJlZ3Jlc3Npb24pOiBzdHJpbmcKcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYToKCXByb3RvIDEgMQoKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTIwCgkvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLk1TRSA8PSBiYXNlbGluZVJlZ01ldHJpY3MuTVNFICYmCgkvLyAgICAgICBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLk1BRSA8PSBiYXNlbGluZVJlZ01ldHJpY3MuTUFFICYmCgkvLyAgICAgICBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLlJNU0UgPD0gYmFzZWxpbmVSZWdNZXRyaWNzLlJNU0UgJiYKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MuQ09EID49IGJhc2VsaW5lUmVnTWV0cmljcy5DT0QKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uCglleHRyYWN0IDAgOAoJYnRvaQoJYnl0ZWMgMyAvLyAweDAwMDg3MjY1Njc0ZDZmNjQ2NTZjCglpbnRjIDIgLy8gMAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk8PQoJZHVwCglieiAqc2tpcF9hbmQzCglmcmFtZV9kaWcgLTEgLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbgoJZXh0cmFjdCAxNiA4CglidG9pCglieXRlYyAzIC8vIDB4MDAwODcyNjU2NzRkNmY2NDY1NmMKCWludGMgNiAvLyAgaGVhZE9mZnNldAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk8PQoJJiYKCipza2lwX2FuZDM6CglkdXAKCWJ6ICpza2lwX2FuZDQKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uCglleHRyYWN0IDggOAoJYnRvaQoJYnl0ZWMgMyAvLyAweDAwMDg3MjY1Njc0ZDZmNjQ2NTZjCglpbnRjIDEgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPD0KCSYmCgoqc2tpcF9hbmQ0OgoJZHVwCglieiAqc2tpcF9hbmQ1CglmcmFtZV9kaWcgLTEgLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbgoJZXh0cmFjdCAyNCA4CglidG9pCglieXRlYyAzIC8vIDB4MDAwODcyNjU2NzRkNmY2NDY1NmMKCWludGMgNCAvLyAgaGVhZE9mZnNldAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgk+PQoJJiYKCipza2lwX2FuZDU6CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEyNQoJLy8gcmV0dXJuICdNb2RlbCBoYXMgYmVlbiBhY2NlcHRlZCBmb3IgZnVydGhlciBjb25zaWRlcmF0aW9uJzsKCXB1c2hieXRlcyAweDRkNmY2NDY1NmMyMDY4NjE3MzIwNjI2NTY1NmUyMDYxNjM2MzY1NzA3NDY1NjQyMDY2NmY3MjIwNjY3NTcyNzQ2ODY1NzIyMDYzNmY2ZTczNjk2NDY1NzI2MTc0Njk2ZjZlIC8vICJNb2RlbCBoYXMgYmVlbiBhY2NlcHRlZCBmb3IgZnVydGhlciBjb25zaWRlcmF0aW9uIgoJcmV0c3ViCgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMjcKCS8vIHJldHVybiAnZmFpbGVkIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cyc7CglwdXNoYnl0ZXMgMHg2NjYxNjk2YzY1NjQyMDc0Njg2NTIwNmQ2OTZlNjk2ZDc1NmQyMDcyNjU3MTc1Njk3MjY1NmQ2NTZlNzQ3MyAvLyAiZmFpbGVkIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cyIKCXJldHN1YgoKLy8gc3RvcmVNb2RlbFBhcmFtcyhwYXksYWRkcmVzcywoc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0KSl2b2lkCiphYmlfcm91dGVfc3RvcmVNb2RlbFBhcmFtczoKCS8vIHBhcmFtc0RhdGE6IChzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCgoJLy8gQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxIChBZGRyZXNzKSBmb3Igc3RvcmVNb2RlbFBhcmFtcyBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gbWJyUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMiAobWJyUGF5KSBmb3Igc3RvcmVNb2RlbFBhcmFtcyBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIHN0b3JlTW9kZWxQYXJhbXMocGF5LGFkZHJlc3MsKHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCkpdm9pZAoJY2FsbHN1YiBzdG9yZU1vZGVsUGFyYW1zCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzdG9yZU1vZGVsUGFyYW1zKG1iclBheTogUGF5VHhuLCBBZGRyZXNzOiBBZGRyZXNzLCBwYXJhbXNEYXRhOiBQYXJhbXNEYXRhKTogdm9pZApzdG9yZU1vZGVsUGFyYW1zOgoJcHJvdG8gMyAwCgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMzIKCS8vIHRoaXMucGFyYW1zRGF0YShBZGRyZXNzKS5leGlzdHMKCWZyYW1lX2RpZyAtMiAvLyBBZGRyZXNzOiBBZGRyZXNzCglib3hfbGVuCglzd2FwCglwb3AKCWJ6ICppZjJfZWxzZQoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEzMwoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy50eG4uc2VuZGVyIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy50eG4uc2VuZGVyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMzQKCS8vIHZlcmlmeVBheVR4bihtYnJQYXksIHsKCS8vICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICBhbW91bnQ6IGJveE1iciwKCS8vICAgICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLnR4bi5zZW5kZXIifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBBbW91bnQKCWludGMgNSAvLyAxMDAwMDAwCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImJveE1iciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTQwCgkvLyB0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykudmFsdWUgPSBwYXJhbXNEYXRhCglmcmFtZV9kaWcgLTIgLy8gQWRkcmVzczogQWRkcmVzcwoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMyAvLyBwYXJhbXNEYXRhOiBQYXJhbXNEYXRhCglib3hfcHV0CgliICppZjJfZW5kCgoqaWYyX2Vsc2U6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTQyCgkvLyB2ZXJpZnlUeG4odGhpcy50eG4sIHsgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCXR4biBTZW5kZXIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ0aGlzLnR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLnR4bi5zZW5kZXIifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE0MwoJLy8gdmVyaWZ5UGF5VHhuKG1iclBheSwgewoJLy8gICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgIGFtb3VudDogYm94TWJyLAoJLy8gICAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50YyA1IC8vIDEwMDAwMDAKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiYm94TWJyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNDkKCS8vIHRoaXMucGFyYW1zRGF0YShBZGRyZXNzKS5jcmVhdGUoMzIpCglmcmFtZV9kaWcgLTIgLy8gQWRkcmVzczogQWRkcmVzcwoJaW50YyAzIC8vIDMyCglib3hfY3JlYXRlCglwb3AKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTUwCgkvLyB0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykudmFsdWUgPSBwYXJhbXNEYXRhCglmcmFtZV9kaWcgLTIgLy8gQWRkcmVzczogQWRkcmVzcwoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMyAvLyBwYXJhbXNEYXRhOiBQYXJhbXNEYXRhCglib3hfcHV0CgoqaWYyX2VuZDoKCXJldHN1YgoKLy8gZ2V0Qm94VmFsdWUoYWRkcmVzcykoc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0KQoqYWJpX3JvdXRlX2dldEJveFZhbHVlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBBZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAzIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKEFkZHJlc3MpIGZvciBnZXRCb3hWYWx1ZSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBnZXRCb3hWYWx1ZShhZGRyZXNzKShzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQpCgljYWxsc3ViIGdldEJveFZhbHVlCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZ2V0Qm94VmFsdWUoQWRkcmVzczogQWRkcmVzcyk6IFBhcmFtc0RhdGEKZ2V0Qm94VmFsdWU6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTU2CgkvLyB2ZXJpZnlUeG4odGhpcy50eG4sIHsgc2VuZGVyOiB0aGlzLmFwcC5jcmVhdG9yIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ0aGlzLnR4biIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5jcmVhdG9yIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNTcKCS8vIGFzc2VydCh0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykuZXhpc3RzKQoJZnJhbWVfZGlnIC0xIC8vIEFkZHJlc3M6IEFkZHJlc3MKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE1OAoJLy8gcmV0dXJuIHRoaXMucGFyYW1zRGF0YShBZGRyZXNzKS52YWx1ZTsKCWZyYW1lX2RpZyAtMSAvLyBBZGRyZXNzOiBBZGRyZXNzCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykudmFsdWUKCWFzc2VydAoJcmV0c3ViCgovLyBkaXN0cmlidXRlUmV3YXJkcygodWludDY0KSl1aW50NjRbXQoqYWJpX3JvdXRlX2Rpc3RyaWJ1dGVSZXdhcmRzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBjb250cmlidXRvcjogKHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDEgLy8gOAoJPT0KCgkvLyBhcmd1bWVudCAwIChjb250cmlidXRvcikgZm9yIGRpc3RyaWJ1dGVSZXdhcmRzIG11c3QgYmUgYSAodWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBkaXN0cmlidXRlUmV3YXJkcygodWludDY0KSl1aW50NjRbXQoJY2FsbHN1YiBkaXN0cmlidXRlUmV3YXJkcwoJZHVwCglsZW4KCWludGMgMSAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGlzdHJpYnV0ZVJld2FyZHMoY29udHJpYnV0b3I6IHJld2FyZENhbGN1bGF0aW9uKTogdWludDY0W10KZGlzdHJpYnV0ZVJld2FyZHM6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAxNQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNjQKCS8vIGhvbmVzdHlTY29yZXM6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbNTAsIDUwLCA1MF0KCXB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMzIwMDAwMDAwMDAwMDAwMDMyMDAwMDAwMDAwMDAwMDAzMgoJZnJhbWVfYnVyeSAwIC8vIGhvbmVzdHlTY29yZXM6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4KCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTY2CgkvLyBwb29sV2VpZ2h0ID0gMAoJaW50YyAyIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBwb29sV2VpZ2h0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTY4CgkvLyB0b3RhbCA9IGJhc2VDYXNlLmFjY3VyYWN5ICsgYmFzZUNhc2UucHJlY2lzaW9uICsgYmFzZUNhc2UucmVjYWxsICsgYmFzZUNhc2UuZjFzY29yZQoJYnl0ZWMgMSAvLyAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MwoJaW50YyAyIC8vIDAKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJYnl0ZWMgMSAvLyAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MwoJaW50YyAxIC8vICBoZWFkT2Zmc2V0CglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCSsKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgNiAvLyAgaGVhZE9mZnNldAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgkrCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglpbnRjIDQgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJKwoJZnJhbWVfYnVyeSAyIC8vIHRvdGFsOiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTY5CgkvLyBleGNlc3MgPSAwCglpbnRjIDIgLy8gMAoJZnJhbWVfYnVyeSAzIC8vIGV4Y2VzczogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE3MAoJLy8gcmV3YXJkQW1vdW50OiB1aW50NjRbXSA9IFtdCglieXRlYyAwIC8vIDB4CglmcmFtZV9idXJ5IDQgLy8gcmV3YXJkQW1vdW50OiB1aW50NjRbXQoKCS8vICppZjNfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTcyCgkvLyBjb250cmlidXRvci5zY29yZSA+IHRvdGFsCglmcmFtZV9kaWcgLTEgLy8gY29udHJpYnV0b3I6IHJld2FyZENhbGN1bGF0aW9uCglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfZGlnIDIgLy8gdG90YWw6IHVpbnQ2NAoJPgoJYnogKmlmM19lbmQKCgkvLyAqaWYzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNzMKCS8vIGV4Y2VzcyA9IGNvbnRyaWJ1dG9yLnNjb3JlIC0gdG90YWwKCWZyYW1lX2RpZyAtMSAvLyBjb250cmlidXRvcjogcmV3YXJkQ2FsY3VsYXRpb24KCWV4dHJhY3QgMCA4CglidG9pCglmcmFtZV9kaWcgMiAvLyB0b3RhbDogdWludDY0CgktCglmcmFtZV9idXJ5IDMgLy8gZXhjZXNzOiB1aW50NjQKCippZjNfZW5kOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE3NgoJLy8gaG9uZXN0eVNjb3Jlcy5mb3JFYWNoCglmcmFtZV9kaWcgMCAvLyBob25lc3R5U2NvcmVzOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+CglkdXAKCWZyYW1lX2J1cnkgNSAvLyBjb3B5IG9mIHRoZSBhcnJheSB3ZSBhcmUgaXRlcmF0aW5nIG92ZXIKCWV4dHJhY3QgMCA4CglidG9pCglmcmFtZV9idXJ5IDYgLy8gaG9uZXN0eVNjb3JlOiB1aW50NjQKCWludGMgMiAvLyAwCglmcmFtZV9idXJ5IDcgLy8gdGhlIG9mZnNldCB3ZSBhcmUgZXh0cmFjdGluZyB0aGUgbmV4dCBlbGVtZW50IGZyb20KCipmb3JFYWNoXzA6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTc3CgkvLyByZXBXZWlnaHQgPSB3aWRlUmF0aW8oW2hvbmVzdHlTY29yZSAqIGhvbmVzdHlTY29yZSAqIDEwMDBdLCBbMTAwICogMTAwXSkKCWludGMgMiAvLyAwCglmcmFtZV9kaWcgNiAvLyBob25lc3R5U2NvcmU6IHVpbnQ2NAoJZnJhbWVfZGlnIDYgLy8gaG9uZXN0eVNjb3JlOiB1aW50NjQKCSoKCWludGMgNyAvLyAxMDAwCgkqCglpbnRjIDIgLy8gMAoJaW50YyA4IC8vIDEwMDAwCglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSA4IC8vIHJlcFdlaWdodDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE3OQoJLy8gcGFydGljaXBhbnRXZWlnaHQgPSByZXBXZWlnaHQgKiBleGNlc3MKCWZyYW1lX2RpZyA4IC8vIHJlcFdlaWdodDogdWludDY0CglmcmFtZV9kaWcgMyAvLyBleGNlc3M6IHVpbnQ2NAoJKgoJZnJhbWVfYnVyeSA5IC8vIHBhcnRpY2lwYW50V2VpZ2h0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTgxCgkvLyBwb29sV2VpZ2h0ICs9IHBhcnRpY2lwYW50V2VpZ2h0CglmcmFtZV9kaWcgMSAvLyBwb29sV2VpZ2h0OiB1aW50NjQKCWZyYW1lX2RpZyA5IC8vIHBhcnRpY2lwYW50V2VpZ2h0OiB1aW50NjQKCSsKCWZyYW1lX2J1cnkgMSAvLyBwb29sV2VpZ2h0OiB1aW50NjQKCgkvLyBpbmNyZW1lbnQgb2Zmc2V0IGFuZCBsb29wIGlmIG5vdCBvdXQgb2YgYm91bmRzCglmcmFtZV9kaWcgNyAvLyB0aGUgb2Zmc2V0IHdlIGFyZSBleHRyYWN0aW5nIHRoZSBuZXh0IGVsZW1lbnQgZnJvbQoJaW50YyAxIC8vIDgKCSsKCWR1cAoJaW50YyA0IC8vICBvZmZzZXQgb2YgbGFzdCBlbGVtZW50Cgk8CglieiAqZm9yRWFjaF8wX2VuZAoJZnJhbWVfYnVyeSA3IC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCglmcmFtZV9kaWcgNSAvLyBjb3B5IG9mIHRoZSBhcnJheSB3ZSBhcmUgaXRlcmF0aW5nIG92ZXIKCWZyYW1lX2RpZyA3IC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCglpbnRjIDEgLy8gOAoJZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSA2IC8vIGhvbmVzdHlTY29yZTogdWludDY0CgliICpmb3JFYWNoXzAKCipmb3JFYWNoXzBfZW5kOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE4NAoJLy8gaG9uZXN0eVNjb3Jlcy5mb3JFYWNoCglmcmFtZV9kaWcgMCAvLyBob25lc3R5U2NvcmVzOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+CglkdXAKCWZyYW1lX2J1cnkgMTAgLy8gY29weSBvZiB0aGUgYXJyYXkgd2UgYXJlIGl0ZXJhdGluZyBvdmVyCglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfYnVyeSAxMSAvLyBob25lc3R5U2NvcmU6IHVpbnQ2NAoJaW50YyAyIC8vIDAKCWZyYW1lX2J1cnkgMTIgLy8gdGhlIG9mZnNldCB3ZSBhcmUgZXh0cmFjdGluZyB0aGUgbmV4dCBlbGVtZW50IGZyb20KCipmb3JFYWNoXzE6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTg1CgkvLyByZXBXZWlnaHQgPSB3aWRlUmF0aW8oW2hvbmVzdHlTY29yZSAqIGhvbmVzdHlTY29yZSAqIDEwMDBdLCBbMTAwICogMTAwXSkKCWludGMgMiAvLyAwCglmcmFtZV9kaWcgMTEgLy8gaG9uZXN0eVNjb3JlOiB1aW50NjQKCWZyYW1lX2RpZyAxMSAvLyBob25lc3R5U2NvcmU6IHVpbnQ2NAoJKgoJaW50YyA3IC8vIDEwMDAKCSoKCWludGMgMiAvLyAwCglpbnRjIDggLy8gMTAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDEzIC8vIHJlcFdlaWdodDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE4NwoJLy8gcGFydGljaXBhbnRXZWlnaHQgPSByZXBXZWlnaHQgKiBleGNlc3MKCWZyYW1lX2RpZyAxMyAvLyByZXBXZWlnaHQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDMgLy8gZXhjZXNzOiB1aW50NjQKCSoKCWZyYW1lX2J1cnkgMTQgLy8gcGFydGljaXBhbnRXZWlnaHQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxODkKCS8vIHJld2FyZCA9IHdpZGVSYXRpbyhbcGFydGljaXBhbnRXZWlnaHQgKiBwcmljZVBvb2xdLCBbcG9vbFdlaWdodF0pCglpbnRjIDIgLy8gMAoJZnJhbWVfZGlnIDE0IC8vIHBhcnRpY2lwYW50V2VpZ2h0OiB1aW50NjQKCXB1c2hpbnQgMTAwMDAwMDAKCSoKCWludGMgMiAvLyAwCglmcmFtZV9kaWcgMSAvLyBwb29sV2VpZ2h0OiB1aW50NjQKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCgoJLy8gd2lkZVJhdGlvIGZhaWxlZAoJYXNzZXJ0CglmcmFtZV9idXJ5IDE1IC8vIHJld2FyZDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE5MQoJLy8gcmV3YXJkQW1vdW50LnB1c2gocmV3YXJkKQoJZnJhbWVfZGlnIDQgLy8gcmV3YXJkQW1vdW50OiB1aW50NjRbXQoJZnJhbWVfZGlnIDE1IC8vIHJld2FyZDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgNCAvLyByZXdhcmRBbW91bnQ6IHVpbnQ2NFtdCgoJLy8gaW5jcmVtZW50IG9mZnNldCBhbmQgbG9vcCBpZiBub3Qgb3V0IG9mIGJvdW5kcwoJZnJhbWVfZGlnIDEyIC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCglpbnRjIDEgLy8gOAoJKwoJZHVwCglpbnRjIDQgLy8gIG9mZnNldCBvZiBsYXN0IGVsZW1lbnQKCTwKCWJ6ICpmb3JFYWNoXzFfZW5kCglmcmFtZV9idXJ5IDEyIC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCglmcmFtZV9kaWcgMTAgLy8gY29weSBvZiB0aGUgYXJyYXkgd2UgYXJlIGl0ZXJhdGluZyBvdmVyCglmcmFtZV9kaWcgMTIgLy8gdGhlIG9mZnNldCB3ZSBhcmUgZXh0cmFjdGluZyB0aGUgbmV4dCBlbGVtZW50IGZyb20KCWludGMgMSAvLyA4CglleHRyYWN0CglidG9pCglmcmFtZV9idXJ5IDExIC8vIGhvbmVzdHlTY29yZTogdWludDY0CgliICpmb3JFYWNoXzEKCipmb3JFYWNoXzFfZW5kOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE5NAoJLy8gcmV0dXJuIHJld2FyZEFtb3VudDsKCWZyYW1lX2RpZyA0IC8vIHJld2FyZEFtb3VudDogdWludDY0W10KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxNQoJcmV0c3ViCgovLyBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKTogdm9pZApkZWxldGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxOTkKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjAwCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIwMQoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDIgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweDExNTc1NmRiIC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHg2NmU4MTU4YyAvLyBtZXRob2QgImFzc2lnblJld2FyZFBvb2wodWludDY0LHBheSl1aW50NjQiCglwdXNoYnl0ZXMgMHgyODZiZTYzNiAvLyBtZXRob2QgImNoZWNrQmFsYW5jZSgpdWludDY0IgoJcHVzaGJ5dGVzIDB4Yjc4OTE4ZjUgLy8gbWV0aG9kICJzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkscGF5KXZvaWQiCglwdXNoYnl0ZXMgMHg2ZGRjZGZkYyAvLyBtZXRob2QgImdldENsYXNzaWZpY2F0aW9uQ3JpdGVyaWEoKSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpIgoJcHVzaGJ5dGVzIDB4MTM0MmQ4ZWEgLy8gbWV0aG9kICJjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpYm9vbCIKCXB1c2hieXRlcyAweDdkZTJkZmNkIC8vIG1ldGhvZCAic3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYSgodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkIgoJcHVzaGJ5dGVzIDB4YmY4YWRlZGYgLy8gbWV0aG9kICJyZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXN0cmluZyIKCXB1c2hieXRlcyAweDU0ZDI1MGJmIC8vIG1ldGhvZCAic3RvcmVNb2RlbFBhcmFtcyhwYXksYWRkcmVzcywoc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0KSl2b2lkIgoJcHVzaGJ5dGVzIDB4NzA1Y2IzMTAgLy8gbWV0aG9kICJnZXRCb3hWYWx1ZShhZGRyZXNzKShzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQpIgoJcHVzaGJ5dGVzIDB4ZDE4ODUzNjEgLy8gbWV0aG9kICJkaXN0cmlidXRlUmV3YXJkcygodWludDY0KSl1aW50NjRbXSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYXNzaWduUmV3YXJkUG9vbCAqYWJpX3JvdXRlX2NoZWNrQmFsYW5jZSAqYWJpX3JvdXRlX3N0b3JlQ2xhc3NpZmljYXRpb25TZWxlY3Rpb25Dcml0ZXJpYSAqYWJpX3JvdXRlX2dldENsYXNzaWZpY2F0aW9uQ3JpdGVyaWEgKmFiaV9yb3V0ZV9jbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEgKmFiaV9yb3V0ZV9zdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhICphYmlfcm91dGVfcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSAqYWJpX3JvdXRlX3N0b3JlTW9kZWxQYXJhbXMgKmFiaV9yb3V0ZV9nZXRCb3hWYWx1ZSAqYWJpX3JvdXRlX2Rpc3RyaWJ1dGVSZXdhcmRzCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCXB1c2hieXRlcyAweDE3NDc0MDViIC8vIG1ldGhvZCAidXBkYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgVXBkYXRlQXBwbGljYXRpb24KCWVycgoKKmNhbGxfRGVsZXRlQXBwbGljYXRpb246CglwdXNoYnl0ZXMgMHgyNDg3YzMyYyAvLyBtZXRob2QgImRlbGV0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIERlbGV0ZUFwcGxpY2F0aW9uCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DMLChain",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "modelHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [
          {
            "name": "modelHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assignRewardPool",
        "args": [
          {
            "name": "rewardPoolAmount",
            "type": "uint64"
          },
          {
            "name": "rewardPoolTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "checkBalance",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "storeClassificationSelectionCriteria",
        "args": [
          {
            "name": "evaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          },
          {
            "name": "mbrPay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getClassificationCriteria",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "classModelSelectionCriteria",
        "args": [
          {
            "name": "modelEvaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "storeModelRegressionSelectionCriteria",
        "args": [
          {
            "name": "evaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "regModelSelectionCriteria",
        "args": [
          {
            "name": "modelEvaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "storeModelParams",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "Address",
            "type": "address"
          },
          {
            "name": "paramsData",
            "type": "(string,string,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getBoxValue",
        "args": [
          {
            "name": "Address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(string,string,uint64,uint64)"
        }
      },
      {
        "name": "distributeRewards",
        "args": [
          {
            "name": "contributor",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}