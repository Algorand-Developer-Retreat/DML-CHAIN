{
  "hints": {
    "createApplication(string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(string)void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "printHash()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeModelParams(string[],string[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "printModelParams(string[20])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "regModelSelectionCriteria((uint64,uint64,uint64,uint64))string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "classModelSelectionCriteria((uint64,uint64,uint64,uint64))string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "submitLocalUpdate(string[],uint64[],uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "finalizeFedAvg(string[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "ipfsHash": {
          "type": "bytes",
          "key": "ipfsHash"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DMLChain",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "modelHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [
          {
            "name": "modelHash",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "printHash",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "storeModelParams",
        "args": [
          {
            "name": "paramkeys",
            "type": "string[]"
          },
          {
            "name": "paramValues",
            "type": "string[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "printModelParams",
        "args": [
          {
            "name": "paramKeys",
            "type": "string[20]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "storeClassificationSelectionCriteria",
        "args": [
          {
            "name": "evaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "storeModelRegressionSelectionCriteria",
        "args": [
          {
            "name": "evaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "regModelSelectionCriteria",
        "args": [
          {
            "name": "modelEvaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "classModelSelectionCriteria",
        "args": [
          {
            "name": "modelEvaluationMetrics",
            "type": "(uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "submitLocalUpdate",
        "args": [
          {
            "name": "paramKeys",
            "type": "string[]"
          },
          {
            "name": "paramValues",
            "type": "uint64[]"
          },
          {
            "name": "dataSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "finalizeFedAvg",
        "args": [
          {
            "name": "paramKeys",
            "type": "string[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}