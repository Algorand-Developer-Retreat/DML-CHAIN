/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"printHash","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"paramkeys","type":"string[]"},{"name":"paramValues","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"printModelParams","args":[{"name":"paramKeys","type":"string[20]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"submitLocalUpdate","args":[{"name":"paramKeys","type":"string[]"},{"name":"paramValues","type":"uint64[]"},{"name":"dataSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"finalizeFedAvg","args":[{"name":"paramKeys","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"parameterKeys":{"keyType":"string","valueType":"string"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"},"aggregatorParameterSums":{"keyType":"string","valueType":"uint64"},"totalDataSize":{"keyType":"string","valueType":"uint64"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:23","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:23","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts\\Moderator.algo.ts:23","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171]},{"teal":15,"source":"contracts\\Moderator.algo.ts:23","pc":[172,173]},{"teal":16,"source":"contracts\\Moderator.algo.ts:23","pc":[174]},{"teal":17,"source":"contracts\\Moderator.algo.ts:23","pc":[175,176]},{"teal":18,"source":"contracts\\Moderator.algo.ts:23","pc":[177]},{"teal":19,"source":"contracts\\Moderator.algo.ts:23","pc":[178,179]},{"teal":20,"source":"contracts\\Moderator.algo.ts:23","pc":[180]},{"teal":21,"source":"contracts\\Moderator.algo.ts:23","pc":[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206]},{"teal":25,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[207]},{"teal":30,"source":"contracts\\Moderator.algo.ts:42","pc":[208,209,210]},{"teal":31,"source":"contracts\\Moderator.algo.ts:42","pc":[211,212,213]},{"teal":34,"source":"contracts\\Moderator.algo.ts:42","pc":[214,215,216]},{"teal":35,"source":"contracts\\Moderator.algo.ts:42","pc":[217]},{"teal":36,"source":"contracts\\Moderator.algo.ts:42","pc":[218]},{"teal":40,"source":"contracts\\Moderator.algo.ts:42","pc":[219,220,221]},{"teal":44,"source":"contracts\\Moderator.algo.ts:43","pc":[222,223]},{"teal":45,"source":"contracts\\Moderator.algo.ts:43","pc":[224,225]},{"teal":46,"source":"contracts\\Moderator.algo.ts:43","pc":[226]},{"teal":47,"source":"contracts\\Moderator.algo.ts:43","pc":[227]},{"teal":48,"source":"contracts\\Moderator.algo.ts:43","pc":[228]},{"teal":49,"source":"contracts\\Moderator.algo.ts:43","pc":[229,230,231]},{"teal":50,"source":"contracts\\Moderator.algo.ts:43","pc":[232]},{"teal":51,"source":"contracts\\Moderator.algo.ts:43","pc":[233]},{"teal":52,"source":"contracts\\Moderator.algo.ts:43","pc":[234]},{"teal":53,"source":"contracts\\Moderator.algo.ts:42","pc":[235]},{"teal":58,"source":"contracts\\Moderator.algo.ts:47","pc":[236,237,238]},{"teal":59,"source":"contracts\\Moderator.algo.ts:47","pc":[239,240,241]},{"teal":62,"source":"contracts\\Moderator.algo.ts:47","pc":[242,243,244]},{"teal":63,"source":"contracts\\Moderator.algo.ts:47","pc":[245]},{"teal":64,"source":"contracts\\Moderator.algo.ts:47","pc":[246]},{"teal":68,"source":"contracts\\Moderator.algo.ts:47","pc":[247,248,249]},{"teal":72,"source":"contracts\\Moderator.algo.ts:48","pc":[250,251]},{"teal":73,"source":"contracts\\Moderator.algo.ts:48","pc":[252,253,254]},{"teal":74,"source":"contracts\\Moderator.algo.ts:48","pc":[255,256]},{"teal":75,"source":"contracts\\Moderator.algo.ts:48","pc":[257]},{"teal":76,"source":"contracts\\Moderator.algo.ts:48","pc":[258]},{"teal":77,"source":"contracts\\Moderator.algo.ts:48","pc":[259]},{"teal":81,"source":"contracts\\Moderator.algo.ts:49","pc":[260,261]},{"teal":82,"source":"contracts\\Moderator.algo.ts:49","pc":[262,263]},{"teal":83,"source":"contracts\\Moderator.algo.ts:49","pc":[264]},{"teal":84,"source":"contracts\\Moderator.algo.ts:49","pc":[265]},{"teal":85,"source":"contracts\\Moderator.algo.ts:49","pc":[266]},{"teal":86,"source":"contracts\\Moderator.algo.ts:49","pc":[267,268,269]},{"teal":87,"source":"contracts\\Moderator.algo.ts:49","pc":[270]},{"teal":88,"source":"contracts\\Moderator.algo.ts:49","pc":[271]},{"teal":89,"source":"contracts\\Moderator.algo.ts:49","pc":[272]},{"teal":90,"source":"contracts\\Moderator.algo.ts:47","pc":[273]},{"teal":95,"source":"contracts\\Moderator.algo.ts:53","pc":[274,275]},{"teal":98,"source":"contracts\\Moderator.algo.ts:53","pc":[276,277,278]},{"teal":99,"source":"contracts\\Moderator.algo.ts:53","pc":[279]},{"teal":100,"source":"contracts\\Moderator.algo.ts:53","pc":[280]},{"teal":101,"source":"contracts\\Moderator.algo.ts:53","pc":[281]},{"teal":102,"source":"contracts\\Moderator.algo.ts:53","pc":[282,283,284]},{"teal":103,"source":"contracts\\Moderator.algo.ts:53","pc":[285]},{"teal":104,"source":"contracts\\Moderator.algo.ts:53","pc":[286]},{"teal":105,"source":"contracts\\Moderator.algo.ts:53","pc":[287]},{"teal":106,"source":"contracts\\Moderator.algo.ts:53","pc":[288]},{"teal":107,"source":"contracts\\Moderator.algo.ts:53","pc":[289]},{"teal":108,"source":"contracts\\Moderator.algo.ts:53","pc":[290]},{"teal":112,"source":"contracts\\Moderator.algo.ts:53","pc":[291,292,293]},{"teal":116,"source":"contracts\\Moderator.algo.ts:54","pc":[294,295]},{"teal":117,"source":"contracts\\Moderator.algo.ts:54","pc":[296]},{"teal":118,"source":"contracts\\Moderator.algo.ts:54","pc":[297,298,299]},{"teal":119,"source":"contracts\\Moderator.algo.ts:53","pc":[300]},{"teal":124,"source":"contracts\\Moderator.algo.ts:58","pc":[301,302,303]},{"teal":127,"source":"contracts\\Moderator.algo.ts:58","pc":[304,305,306]},{"teal":130,"source":"contracts\\Moderator.algo.ts:58","pc":[307,308,309]},{"teal":131,"source":"contracts\\Moderator.algo.ts:58","pc":[310]},{"teal":132,"source":"contracts\\Moderator.algo.ts:58","pc":[311]},{"teal":136,"source":"contracts\\Moderator.algo.ts:58","pc":[312,313,314]},{"teal":139,"source":"contracts\\Moderator.algo.ts:58","pc":[315]},{"teal":140,"source":"contracts\\Moderator.algo.ts:58","pc":[316,317]},{"teal":144,"source":"contracts\\Moderator.algo.ts:59","pc":[318,319]},{"teal":145,"source":"contracts\\Moderator.algo.ts:59","pc":[320,321,322]},{"teal":146,"source":"contracts\\Moderator.algo.ts:59","pc":[323,324]},{"teal":147,"source":"contracts\\Moderator.algo.ts:59","pc":[325]},{"teal":148,"source":"contracts\\Moderator.algo.ts:59","pc":[326]},{"teal":149,"source":"contracts\\Moderator.algo.ts:59","pc":[327]},{"teal":153,"source":"contracts\\Moderator.algo.ts:60","pc":[328,329]},{"teal":154,"source":"contracts\\Moderator.algo.ts:60","pc":[330]},{"teal":155,"source":"contracts\\Moderator.algo.ts:60","pc":[331]},{"teal":156,"source":"contracts\\Moderator.algo.ts:60","pc":[332,333]},{"teal":157,"source":"contracts\\Moderator.algo.ts:60","pc":[334]},{"teal":158,"source":"contracts\\Moderator.algo.ts:60","pc":[335]},{"teal":159,"source":"contracts\\Moderator.algo.ts:60","pc":[336]},{"teal":160,"source":"contracts\\Moderator.algo.ts:60","pc":[337]},{"teal":164,"source":"contracts\\Moderator.algo.ts:62","pc":[338]},{"teal":165,"source":"contracts\\Moderator.algo.ts:62","pc":[339,340]},{"teal":172,"source":"contracts\\Moderator.algo.ts:63","pc":[341,342]},{"teal":173,"source":"contracts\\Moderator.algo.ts:63","pc":[343,344]},{"teal":174,"source":"contracts\\Moderator.algo.ts:63","pc":[345]},{"teal":175,"source":"contracts\\Moderator.algo.ts:63","pc":[346]},{"teal":176,"source":"contracts\\Moderator.algo.ts:63","pc":[347]},{"teal":177,"source":"contracts\\Moderator.algo.ts:63","pc":[348,349,350]},{"teal":181,"source":"contracts\\Moderator.algo.ts:64","pc":[351,352]},{"teal":182,"source":"contracts\\Moderator.algo.ts:64","pc":[353,354]},{"teal":183,"source":"contracts\\Moderator.algo.ts:64","pc":[355]},{"teal":184,"source":"contracts\\Moderator.algo.ts:64","pc":[356,357]},{"teal":185,"source":"contracts\\Moderator.algo.ts:64","pc":[358]},{"teal":186,"source":"contracts\\Moderator.algo.ts:64","pc":[359]},{"teal":187,"source":"contracts\\Moderator.algo.ts:64","pc":[360]},{"teal":188,"source":"contracts\\Moderator.algo.ts:64","pc":[361]},{"teal":189,"source":"contracts\\Moderator.algo.ts:64","pc":[362]},{"teal":190,"source":"contracts\\Moderator.algo.ts:64","pc":[363,364]},{"teal":191,"source":"contracts\\Moderator.algo.ts:64","pc":[365,366]},{"teal":192,"source":"contracts\\Moderator.algo.ts:64","pc":[367,368]},{"teal":193,"source":"contracts\\Moderator.algo.ts:64","pc":[369]},{"teal":194,"source":"contracts\\Moderator.algo.ts:64","pc":[370]},{"teal":195,"source":"contracts\\Moderator.algo.ts:64","pc":[371]},{"teal":196,"source":"contracts\\Moderator.algo.ts:64","pc":[372]},{"teal":197,"source":"contracts\\Moderator.algo.ts:64","pc":[373,374]},{"teal":198,"source":"contracts\\Moderator.algo.ts:64","pc":[375]},{"teal":199,"source":"contracts\\Moderator.algo.ts:64","pc":[376]},{"teal":200,"source":"contracts\\Moderator.algo.ts:64","pc":[377]},{"teal":201,"source":"contracts\\Moderator.algo.ts:64","pc":[378]},{"teal":202,"source":"contracts\\Moderator.algo.ts:64","pc":[379]},{"teal":203,"source":"contracts\\Moderator.algo.ts:64","pc":[380]},{"teal":204,"source":"contracts\\Moderator.algo.ts:64","pc":[381]},{"teal":205,"source":"contracts\\Moderator.algo.ts:64","pc":[382,383,384]},{"teal":206,"source":"contracts\\Moderator.algo.ts:64","pc":[385,386]},{"teal":210,"source":"contracts\\Moderator.algo.ts:65","pc":[387,388]},{"teal":211,"source":"contracts\\Moderator.algo.ts:65","pc":[389,390]},{"teal":212,"source":"contracts\\Moderator.algo.ts:65","pc":[391]},{"teal":213,"source":"contracts\\Moderator.algo.ts:65","pc":[392,393]},{"teal":214,"source":"contracts\\Moderator.algo.ts:65","pc":[394]},{"teal":215,"source":"contracts\\Moderator.algo.ts:65","pc":[395]},{"teal":216,"source":"contracts\\Moderator.algo.ts:65","pc":[396]},{"teal":217,"source":"contracts\\Moderator.algo.ts:65","pc":[397]},{"teal":218,"source":"contracts\\Moderator.algo.ts:65","pc":[398]},{"teal":219,"source":"contracts\\Moderator.algo.ts:65","pc":[399,400]},{"teal":220,"source":"contracts\\Moderator.algo.ts:65","pc":[401,402]},{"teal":221,"source":"contracts\\Moderator.algo.ts:65","pc":[403,404]},{"teal":222,"source":"contracts\\Moderator.algo.ts:65","pc":[405]},{"teal":223,"source":"contracts\\Moderator.algo.ts:65","pc":[406]},{"teal":224,"source":"contracts\\Moderator.algo.ts:65","pc":[407]},{"teal":225,"source":"contracts\\Moderator.algo.ts:65","pc":[408]},{"teal":226,"source":"contracts\\Moderator.algo.ts:65","pc":[409,410]},{"teal":227,"source":"contracts\\Moderator.algo.ts:65","pc":[411]},{"teal":228,"source":"contracts\\Moderator.algo.ts:65","pc":[412]},{"teal":229,"source":"contracts\\Moderator.algo.ts:65","pc":[413]},{"teal":230,"source":"contracts\\Moderator.algo.ts:65","pc":[414]},{"teal":231,"source":"contracts\\Moderator.algo.ts:65","pc":[415]},{"teal":232,"source":"contracts\\Moderator.algo.ts:65","pc":[416]},{"teal":233,"source":"contracts\\Moderator.algo.ts:65","pc":[417]},{"teal":234,"source":"contracts\\Moderator.algo.ts:65","pc":[418,419,420]},{"teal":235,"source":"contracts\\Moderator.algo.ts:65","pc":[421,422]},{"teal":239,"source":"contracts\\Moderator.algo.ts:67","pc":[423,424]},{"teal":240,"source":"contracts\\Moderator.algo.ts:67","pc":[425]},{"teal":241,"source":"contracts\\Moderator.algo.ts:67","pc":[426]},{"teal":242,"source":"contracts\\Moderator.algo.ts:67","pc":[427]},{"teal":243,"source":"contracts\\Moderator.algo.ts:67","pc":[428,429,430]},{"teal":244,"source":"contracts\\Moderator.algo.ts:67","pc":[431]},{"teal":245,"source":"contracts\\Moderator.algo.ts:67","pc":[432]},{"teal":246,"source":"contracts\\Moderator.algo.ts:67","pc":[433]},{"teal":247,"source":"contracts\\Moderator.algo.ts:67","pc":[434]},{"teal":248,"source":"contracts\\Moderator.algo.ts:67","pc":[435]},{"teal":249,"source":"contracts\\Moderator.algo.ts:67","pc":[436,437]},{"teal":250,"source":"contracts\\Moderator.algo.ts:67","pc":[438]},{"teal":251,"source":"contracts\\Moderator.algo.ts:67","pc":[439]},{"teal":252,"source":"contracts\\Moderator.algo.ts:67","pc":[440]},{"teal":253,"source":"contracts\\Moderator.algo.ts:67","pc":[441,442,443]},{"teal":254,"source":"contracts\\Moderator.algo.ts:67","pc":[444]},{"teal":255,"source":"contracts\\Moderator.algo.ts:67","pc":[445]},{"teal":256,"source":"contracts\\Moderator.algo.ts:67","pc":[446]},{"teal":260,"source":"contracts\\Moderator.algo.ts:69","pc":[447,448]},{"teal":261,"source":"contracts\\Moderator.algo.ts:69","pc":[449]},{"teal":262,"source":"contracts\\Moderator.algo.ts:69","pc":[450]},{"teal":263,"source":"contracts\\Moderator.algo.ts:69","pc":[451,452]},{"teal":264,"source":"contracts\\Moderator.algo.ts:63","pc":[453,454,455]},{"teal":267,"source":"contracts\\Moderator.algo.ts:58","pc":[456]},{"teal":272,"source":"contracts\\Moderator.algo.ts:74","pc":[457,458,459]},{"teal":275,"source":"contracts\\Moderator.algo.ts:74","pc":[460,461,462]},{"teal":276,"source":"contracts\\Moderator.algo.ts:74","pc":[463]},{"teal":277,"source":"contracts\\Moderator.algo.ts:74","pc":[464]},{"teal":281,"source":"contracts\\Moderator.algo.ts:74","pc":[465,466,467]},{"teal":284,"source":"contracts\\Moderator.algo.ts:74","pc":[468]},{"teal":285,"source":"contracts\\Moderator.algo.ts:74","pc":[469,470]},{"teal":289,"source":"contracts\\Moderator.algo.ts:75","pc":[471]},{"teal":290,"source":"contracts\\Moderator.algo.ts:75","pc":[472,473]},{"teal":297,"source":"contracts\\Moderator.algo.ts:76","pc":[474,475]},{"teal":298,"source":"contracts\\Moderator.algo.ts:76","pc":[476,477]},{"teal":299,"source":"contracts\\Moderator.algo.ts:76","pc":[478]},{"teal":300,"source":"contracts\\Moderator.algo.ts:76","pc":[479,480,481]},{"teal":304,"source":"contracts\\Moderator.algo.ts:77","pc":[482,483]},{"teal":305,"source":"contracts\\Moderator.algo.ts:77","pc":[484,485]},{"teal":306,"source":"contracts\\Moderator.algo.ts:77","pc":[486]},{"teal":307,"source":"contracts\\Moderator.algo.ts:77","pc":[487,488]},{"teal":308,"source":"contracts\\Moderator.algo.ts:77","pc":[489]},{"teal":309,"source":"contracts\\Moderator.algo.ts:77","pc":[490]},{"teal":310,"source":"contracts\\Moderator.algo.ts:77","pc":[491]},{"teal":311,"source":"contracts\\Moderator.algo.ts:77","pc":[492,493]},{"teal":312,"source":"contracts\\Moderator.algo.ts:77","pc":[494,495]},{"teal":313,"source":"contracts\\Moderator.algo.ts:77","pc":[496,497]},{"teal":314,"source":"contracts\\Moderator.algo.ts:77","pc":[498]},{"teal":315,"source":"contracts\\Moderator.algo.ts:77","pc":[499]},{"teal":316,"source":"contracts\\Moderator.algo.ts:77","pc":[500,501]},{"teal":317,"source":"contracts\\Moderator.algo.ts:77","pc":[502]},{"teal":318,"source":"contracts\\Moderator.algo.ts:77","pc":[503]},{"teal":319,"source":"contracts\\Moderator.algo.ts:77","pc":[504]},{"teal":320,"source":"contracts\\Moderator.algo.ts:77","pc":[505]},{"teal":321,"source":"contracts\\Moderator.algo.ts:77","pc":[506]},{"teal":322,"source":"contracts\\Moderator.algo.ts:77","pc":[507]},{"teal":323,"source":"contracts\\Moderator.algo.ts:77","pc":[508]},{"teal":324,"source":"contracts\\Moderator.algo.ts:77","pc":[509,510,511]},{"teal":325,"source":"contracts\\Moderator.algo.ts:77","pc":[512,513]},{"teal":329,"source":"contracts\\Moderator.algo.ts:78","pc":[514,515]},{"teal":330,"source":"contracts\\Moderator.algo.ts:78","pc":[516]},{"teal":331,"source":"contracts\\Moderator.algo.ts:78","pc":[517]},{"teal":332,"source":"contracts\\Moderator.algo.ts:78","pc":[518]},{"teal":333,"source":"contracts\\Moderator.algo.ts:78","pc":[519,520,521]},{"teal":334,"source":"contracts\\Moderator.algo.ts:78","pc":[522]},{"teal":335,"source":"contracts\\Moderator.algo.ts:78","pc":[523]},{"teal":336,"source":"contracts\\Moderator.algo.ts:78","pc":[524]},{"teal":339,"source":"contracts\\Moderator.algo.ts:78","errorMessage":"box value does not exist: this.parameterKeys(key).value","pc":[525]},{"teal":340,"source":"contracts\\Moderator.algo.ts:78","pc":[526,527,528]},{"teal":341,"source":"contracts\\Moderator.algo.ts:78","pc":[529,530]},{"teal":345,"source":"contracts\\Moderator.algo.ts:79","pc":[531,532]},{"teal":346,"source":"contracts\\Moderator.algo.ts:79","pc":[533]},{"teal":350,"source":"contracts\\Moderator.algo.ts:80","pc":[534,535]},{"teal":351,"source":"contracts\\Moderator.algo.ts:80","pc":[536]},{"teal":355,"source":"contracts\\Moderator.algo.ts:81","pc":[537,538]},{"teal":356,"source":"contracts\\Moderator.algo.ts:81","pc":[539]},{"teal":357,"source":"contracts\\Moderator.algo.ts:81","pc":[540]},{"teal":358,"source":"contracts\\Moderator.algo.ts:81","pc":[541,542]},{"teal":359,"source":"contracts\\Moderator.algo.ts:76","pc":[543,544,545]},{"teal":362,"source":"contracts\\Moderator.algo.ts:74","pc":[546]},{"teal":367,"source":"contracts\\Moderator.algo.ts:99","pc":[547,548]},{"teal":368,"source":"contracts\\Moderator.algo.ts:99","pc":[549]},{"teal":369,"source":"contracts\\Moderator.algo.ts:99","pc":[550]},{"teal":370,"source":"contracts\\Moderator.algo.ts:99","pc":[551]},{"teal":371,"source":"contracts\\Moderator.algo.ts:99","pc":[552,553]},{"teal":372,"source":"contracts\\Moderator.algo.ts:99","pc":[554]},{"teal":373,"source":"contracts\\Moderator.algo.ts:99","pc":[555]},{"teal":376,"source":"contracts\\Moderator.algo.ts:99","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[556]},{"teal":379,"source":"contracts\\Moderator.algo.ts:99","pc":[557,558,559]},{"teal":380,"source":"contracts\\Moderator.algo.ts:99","pc":[560]},{"teal":381,"source":"contracts\\Moderator.algo.ts:99","pc":[561]},{"teal":382,"source":"contracts\\Moderator.algo.ts:99","pc":[562,563]},{"teal":383,"source":"contracts\\Moderator.algo.ts:99","pc":[564]},{"teal":386,"source":"contracts\\Moderator.algo.ts:99","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[565]},{"teal":389,"source":"contracts\\Moderator.algo.ts:99","pc":[566,567,568]},{"teal":390,"source":"contracts\\Moderator.algo.ts:99","pc":[569]},{"teal":391,"source":"contracts\\Moderator.algo.ts:99","pc":[570]},{"teal":395,"source":"contracts\\Moderator.algo.ts:99","pc":[571,572,573]},{"teal":400,"source":"contracts\\Moderator.algo.ts:100","pc":[574,575]},{"teal":401,"source":"contracts\\Moderator.algo.ts:100","pc":[576,577,578]},{"teal":402,"source":"contracts\\Moderator.algo.ts:100","pc":[579,580]},{"teal":403,"source":"contracts\\Moderator.algo.ts:100","pc":[581]},{"teal":404,"source":"contracts\\Moderator.algo.ts:100","pc":[582]},{"teal":407,"source":"contracts\\Moderator.algo.ts:100","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[583]},{"teal":416,"source":"contracts\\Moderator.algo.ts:101","pc":[584,585]},{"teal":417,"source":"contracts\\Moderator.algo.ts:102","pc":[586,587]},{"teal":418,"source":"contracts\\Moderator.algo.ts:102","pc":[588,589]},{"teal":419,"source":"contracts\\Moderator.algo.ts:102","pc":[590]},{"teal":422,"source":"contracts\\Moderator.algo.ts:102","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[591]},{"teal":425,"source":"contracts\\Moderator.algo.ts:101","pc":[592,593]},{"teal":426,"source":"contracts\\Moderator.algo.ts:103","pc":[594,595]},{"teal":427,"source":"contracts\\Moderator.algo.ts:103","pc":[596,597]},{"teal":428,"source":"contracts\\Moderator.algo.ts:103","pc":[598]},{"teal":431,"source":"contracts\\Moderator.algo.ts:103","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[599]},{"teal":434,"source":"contracts\\Moderator.algo.ts:101","pc":[600,601]},{"teal":435,"source":"contracts\\Moderator.algo.ts:104","pc":[602,603]},{"teal":436,"source":"contracts\\Moderator.algo.ts:104","pc":[604,605,606,607]},{"teal":437,"source":"contracts\\Moderator.algo.ts:104","pc":[608]},{"teal":440,"source":"contracts\\Moderator.algo.ts:104","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[609]},{"teal":444,"source":"contracts\\Moderator.algo.ts:107","pc":[610,611]},{"teal":445,"source":"contracts\\Moderator.algo.ts:107","pc":[612,613]},{"teal":446,"source":"contracts\\Moderator.algo.ts:107","pc":[614]},{"teal":447,"source":"contracts\\Moderator.algo.ts:107","pc":[615]},{"teal":451,"source":"contracts\\Moderator.algo.ts:108","pc":[616,617]},{"teal":452,"source":"contracts\\Moderator.algo.ts:108","pc":[618,619]},{"teal":453,"source":"contracts\\Moderator.algo.ts:108","pc":[620]},{"teal":454,"source":"contracts\\Moderator.algo.ts:99","pc":[621]},{"teal":459,"source":"contracts\\Moderator.algo.ts:112","pc":[622,623,624]},{"teal":460,"source":"contracts\\Moderator.algo.ts:112","pc":[625]},{"teal":461,"source":"contracts\\Moderator.algo.ts:112","pc":[626]},{"teal":462,"source":"contracts\\Moderator.algo.ts:112","pc":[627,628]},{"teal":463,"source":"contracts\\Moderator.algo.ts:112","pc":[629]},{"teal":466,"source":"contracts\\Moderator.algo.ts:112","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[630]},{"teal":469,"source":"contracts\\Moderator.algo.ts:112","pc":[631,632,633]},{"teal":470,"source":"contracts\\Moderator.algo.ts:112","pc":[634]},{"teal":471,"source":"contracts\\Moderator.algo.ts:112","pc":[635]},{"teal":475,"source":"contracts\\Moderator.algo.ts:112","pc":[636,637,638]},{"teal":480,"source":"contracts\\Moderator.algo.ts:113","pc":[639,640]},{"teal":481,"source":"contracts\\Moderator.algo.ts:113","pc":[641,642,643]},{"teal":482,"source":"contracts\\Moderator.algo.ts:113","pc":[644,645]},{"teal":483,"source":"contracts\\Moderator.algo.ts:113","pc":[646]},{"teal":484,"source":"contracts\\Moderator.algo.ts:113","pc":[647]},{"teal":487,"source":"contracts\\Moderator.algo.ts:113","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[648]},{"teal":491,"source":"contracts\\Moderator.algo.ts:114","pc":[649]},{"teal":492,"source":"contracts\\Moderator.algo.ts:114","pc":[650,651]},{"teal":493,"source":"contracts\\Moderator.algo.ts:114","pc":[652]},{"teal":494,"source":"contracts\\Moderator.algo.ts:112","pc":[653]},{"teal":499,"source":"contracts\\Moderator.algo.ts:118","pc":[654,655]},{"teal":502,"source":"contracts\\Moderator.algo.ts:118","pc":[656,657,658]},{"teal":503,"source":"contracts\\Moderator.algo.ts:118","pc":[659]},{"teal":504,"source":"contracts\\Moderator.algo.ts:118","pc":[660]},{"teal":505,"source":"contracts\\Moderator.algo.ts:118","pc":[661,662]},{"teal":506,"source":"contracts\\Moderator.algo.ts:118","pc":[663]},{"teal":509,"source":"contracts\\Moderator.algo.ts:118","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[664]},{"teal":512,"source":"contracts\\Moderator.algo.ts:118","pc":[665,666,667]},{"teal":513,"source":"contracts\\Moderator.algo.ts:118","pc":[668]},{"teal":514,"source":"contracts\\Moderator.algo.ts:118","pc":[669]},{"teal":515,"source":"contracts\\Moderator.algo.ts:118","pc":[670]},{"teal":516,"source":"contracts\\Moderator.algo.ts:118","pc":[671,672,673]},{"teal":517,"source":"contracts\\Moderator.algo.ts:118","pc":[674]},{"teal":518,"source":"contracts\\Moderator.algo.ts:118","pc":[675]},{"teal":519,"source":"contracts\\Moderator.algo.ts:118","pc":[676]},{"teal":520,"source":"contracts\\Moderator.algo.ts:118","pc":[677]},{"teal":521,"source":"contracts\\Moderator.algo.ts:118","pc":[678]},{"teal":522,"source":"contracts\\Moderator.algo.ts:118","pc":[679]},{"teal":526,"source":"contracts\\Moderator.algo.ts:118","pc":[680,681,682]},{"teal":534,"source":"contracts\\Moderator.algo.ts:121","pc":[683,684]},{"teal":535,"source":"contracts\\Moderator.algo.ts:121","pc":[685,686,687]},{"teal":536,"source":"contracts\\Moderator.algo.ts:121","pc":[688]},{"teal":537,"source":"contracts\\Moderator.algo.ts:119","pc":[689]},{"teal":538,"source":"contracts\\Moderator.algo.ts:119","pc":[690]},{"teal":539,"source":"contracts\\Moderator.algo.ts:119","pc":[691]},{"teal":540,"source":"contracts\\Moderator.algo.ts:119","pc":[692]},{"teal":541,"source":"contracts\\Moderator.algo.ts:121","pc":[693]},{"teal":542,"source":"contracts\\Moderator.algo.ts:121","pc":[694]},{"teal":543,"source":"contracts\\Moderator.algo.ts:121","pc":[695]},{"teal":544,"source":"contracts\\Moderator.algo.ts:121","pc":[696,697,698]},{"teal":545,"source":"contracts\\Moderator.algo.ts:122","pc":[699,700]},{"teal":546,"source":"contracts\\Moderator.algo.ts:122","pc":[701,702,703]},{"teal":547,"source":"contracts\\Moderator.algo.ts:122","pc":[704]},{"teal":548,"source":"contracts\\Moderator.algo.ts:119","pc":[705]},{"teal":549,"source":"contracts\\Moderator.algo.ts:119","pc":[706,707]},{"teal":550,"source":"contracts\\Moderator.algo.ts:119","pc":[708]},{"teal":551,"source":"contracts\\Moderator.algo.ts:119","pc":[709]},{"teal":552,"source":"contracts\\Moderator.algo.ts:122","pc":[710]},{"teal":553,"source":"contracts\\Moderator.algo.ts:122","pc":[711]},{"teal":554,"source":"contracts\\Moderator.algo.ts:121","pc":[712]},{"teal":557,"source":"contracts\\Moderator.algo.ts:122","pc":[713]},{"teal":558,"source":"contracts\\Moderator.algo.ts:122","pc":[714,715,716]},{"teal":559,"source":"contracts\\Moderator.algo.ts:123","pc":[717,718]},{"teal":560,"source":"contracts\\Moderator.algo.ts:123","pc":[719,720,721]},{"teal":561,"source":"contracts\\Moderator.algo.ts:123","pc":[722]},{"teal":562,"source":"contracts\\Moderator.algo.ts:119","pc":[723]},{"teal":563,"source":"contracts\\Moderator.algo.ts:119","pc":[724]},{"teal":564,"source":"contracts\\Moderator.algo.ts:119","pc":[725]},{"teal":565,"source":"contracts\\Moderator.algo.ts:119","pc":[726]},{"teal":566,"source":"contracts\\Moderator.algo.ts:123","pc":[727]},{"teal":567,"source":"contracts\\Moderator.algo.ts:123","pc":[728]},{"teal":568,"source":"contracts\\Moderator.algo.ts:122","pc":[729]},{"teal":571,"source":"contracts\\Moderator.algo.ts:123","pc":[730]},{"teal":572,"source":"contracts\\Moderator.algo.ts:123","pc":[731,732,733]},{"teal":573,"source":"contracts\\Moderator.algo.ts:124","pc":[734,735]},{"teal":574,"source":"contracts\\Moderator.algo.ts:124","pc":[736,737,738]},{"teal":575,"source":"contracts\\Moderator.algo.ts:124","pc":[739]},{"teal":576,"source":"contracts\\Moderator.algo.ts:119","pc":[740]},{"teal":577,"source":"contracts\\Moderator.algo.ts:119","pc":[741,742]},{"teal":578,"source":"contracts\\Moderator.algo.ts:119","pc":[743]},{"teal":579,"source":"contracts\\Moderator.algo.ts:119","pc":[744]},{"teal":580,"source":"contracts\\Moderator.algo.ts:124","pc":[745]},{"teal":581,"source":"contracts\\Moderator.algo.ts:124","pc":[746]},{"teal":582,"source":"contracts\\Moderator.algo.ts:123","pc":[747]},{"teal":585,"source":"contracts\\Moderator.algo.ts:120","pc":[748,749,750]},{"teal":590,"source":"contracts\\Moderator.algo.ts:126","pc":[751,752]},{"teal":591,"source":"contracts\\Moderator.algo.ts:126","pc":[753]},{"teal":596,"source":"contracts\\Moderator.algo.ts:128","pc":[754,755]},{"teal":597,"source":"contracts\\Moderator.algo.ts:118","pc":[756]},{"teal":602,"source":"contracts\\Moderator.algo.ts:132","pc":[757,758]},{"teal":605,"source":"contracts\\Moderator.algo.ts:132","pc":[759,760,761]},{"teal":606,"source":"contracts\\Moderator.algo.ts:132","pc":[762]},{"teal":607,"source":"contracts\\Moderator.algo.ts:132","pc":[763]},{"teal":608,"source":"contracts\\Moderator.algo.ts:132","pc":[764,765]},{"teal":609,"source":"contracts\\Moderator.algo.ts:132","pc":[766]},{"teal":612,"source":"contracts\\Moderator.algo.ts:132","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[767]},{"teal":615,"source":"contracts\\Moderator.algo.ts:132","pc":[768,769,770]},{"teal":616,"source":"contracts\\Moderator.algo.ts:132","pc":[771]},{"teal":617,"source":"contracts\\Moderator.algo.ts:132","pc":[772]},{"teal":618,"source":"contracts\\Moderator.algo.ts:132","pc":[773]},{"teal":619,"source":"contracts\\Moderator.algo.ts:132","pc":[774,775,776]},{"teal":620,"source":"contracts\\Moderator.algo.ts:132","pc":[777]},{"teal":621,"source":"contracts\\Moderator.algo.ts:132","pc":[778]},{"teal":622,"source":"contracts\\Moderator.algo.ts:132","pc":[779]},{"teal":623,"source":"contracts\\Moderator.algo.ts:132","pc":[780]},{"teal":624,"source":"contracts\\Moderator.algo.ts:132","pc":[781]},{"teal":625,"source":"contracts\\Moderator.algo.ts:132","pc":[782]},{"teal":629,"source":"contracts\\Moderator.algo.ts:132","pc":[783,784,785]},{"teal":634,"source":"contracts\\Moderator.algo.ts:133","pc":[786,787]},{"teal":635,"source":"contracts\\Moderator.algo.ts:133","pc":[788,789,790]},{"teal":636,"source":"contracts\\Moderator.algo.ts:133","pc":[791,792]},{"teal":637,"source":"contracts\\Moderator.algo.ts:133","pc":[793]},{"teal":638,"source":"contracts\\Moderator.algo.ts:133","pc":[794]},{"teal":641,"source":"contracts\\Moderator.algo.ts:133","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[795]},{"teal":648,"source":"contracts\\Moderator.algo.ts:136","pc":[796,797]},{"teal":649,"source":"contracts\\Moderator.algo.ts:136","pc":[798,799,800]},{"teal":650,"source":"contracts\\Moderator.algo.ts:136","pc":[801]},{"teal":651,"source":"contracts\\Moderator.algo.ts:134","pc":[802]},{"teal":652,"source":"contracts\\Moderator.algo.ts:134","pc":[803]},{"teal":653,"source":"contracts\\Moderator.algo.ts:134","pc":[804]},{"teal":654,"source":"contracts\\Moderator.algo.ts:134","pc":[805]},{"teal":655,"source":"contracts\\Moderator.algo.ts:136","pc":[806]},{"teal":656,"source":"contracts\\Moderator.algo.ts:136","pc":[807]},{"teal":657,"source":"contracts\\Moderator.algo.ts:136","pc":[808]},{"teal":658,"source":"contracts\\Moderator.algo.ts:136","pc":[809,810,811]},{"teal":659,"source":"contracts\\Moderator.algo.ts:137","pc":[812,813]},{"teal":660,"source":"contracts\\Moderator.algo.ts:137","pc":[814,815,816]},{"teal":661,"source":"contracts\\Moderator.algo.ts:137","pc":[817]},{"teal":662,"source":"contracts\\Moderator.algo.ts:134","pc":[818]},{"teal":663,"source":"contracts\\Moderator.algo.ts:134","pc":[819]},{"teal":664,"source":"contracts\\Moderator.algo.ts:134","pc":[820]},{"teal":665,"source":"contracts\\Moderator.algo.ts:134","pc":[821]},{"teal":666,"source":"contracts\\Moderator.algo.ts:137","pc":[822]},{"teal":667,"source":"contracts\\Moderator.algo.ts:137","pc":[823]},{"teal":668,"source":"contracts\\Moderator.algo.ts:136","pc":[824]},{"teal":671,"source":"contracts\\Moderator.algo.ts:137","pc":[825]},{"teal":672,"source":"contracts\\Moderator.algo.ts:137","pc":[826,827,828]},{"teal":673,"source":"contracts\\Moderator.algo.ts:138","pc":[829,830]},{"teal":674,"source":"contracts\\Moderator.algo.ts:138","pc":[831,832,833]},{"teal":675,"source":"contracts\\Moderator.algo.ts:138","pc":[834]},{"teal":676,"source":"contracts\\Moderator.algo.ts:134","pc":[835]},{"teal":677,"source":"contracts\\Moderator.algo.ts:134","pc":[836,837]},{"teal":678,"source":"contracts\\Moderator.algo.ts:134","pc":[838]},{"teal":679,"source":"contracts\\Moderator.algo.ts:134","pc":[839]},{"teal":680,"source":"contracts\\Moderator.algo.ts:138","pc":[840]},{"teal":681,"source":"contracts\\Moderator.algo.ts:138","pc":[841]},{"teal":682,"source":"contracts\\Moderator.algo.ts:137","pc":[842]},{"teal":685,"source":"contracts\\Moderator.algo.ts:135","pc":[843,844,845]},{"teal":690,"source":"contracts\\Moderator.algo.ts:140","pc":[846,847]},{"teal":691,"source":"contracts\\Moderator.algo.ts:140","pc":[848]},{"teal":696,"source":"contracts\\Moderator.algo.ts:142","pc":[849,850]},{"teal":697,"source":"contracts\\Moderator.algo.ts:132","pc":[851]},{"teal":702,"source":"contracts\\Moderator.algo.ts:146","pc":[852,853,854]},{"teal":703,"source":"contracts\\Moderator.algo.ts:146","pc":[855]},{"teal":706,"source":"contracts\\Moderator.algo.ts:146","pc":[856,857,858]},{"teal":707,"source":"contracts\\Moderator.algo.ts:146","pc":[859,860,861]},{"teal":710,"source":"contracts\\Moderator.algo.ts:146","pc":[862,863,864]},{"teal":713,"source":"contracts\\Moderator.algo.ts:146","pc":[865,866,867]},{"teal":714,"source":"contracts\\Moderator.algo.ts:146","pc":[868]},{"teal":715,"source":"contracts\\Moderator.algo.ts:146","pc":[869]},{"teal":719,"source":"contracts\\Moderator.algo.ts:146","pc":[870,871,872]},{"teal":722,"source":"contracts\\Moderator.algo.ts:146","pc":[873]},{"teal":723,"source":"contracts\\Moderator.algo.ts:146","pc":[874,875]},{"teal":727,"source":"contracts\\Moderator.algo.ts:147","pc":[876]},{"teal":728,"source":"contracts\\Moderator.algo.ts:147","pc":[877]},{"teal":731,"source":"contracts\\Moderator.algo.ts:147","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[878]},{"teal":732,"source":"contracts\\Moderator.algo.ts:147","pc":[879]},{"teal":733,"source":"contracts\\Moderator.algo.ts:147","pc":[880,881]},{"teal":737,"source":"contracts\\Moderator.algo.ts:148","pc":[882]},{"teal":738,"source":"contracts\\Moderator.algo.ts:148","pc":[883,884]},{"teal":739,"source":"contracts\\Moderator.algo.ts:148","pc":[885,886]},{"teal":740,"source":"contracts\\Moderator.algo.ts:148","pc":[887]},{"teal":741,"source":"contracts\\Moderator.algo.ts:148","pc":[888]},{"teal":742,"source":"contracts\\Moderator.algo.ts:148","pc":[889]},{"teal":746,"source":"contracts\\Moderator.algo.ts:150","pc":[890,891]},{"teal":747,"source":"contracts\\Moderator.algo.ts:150","pc":[892]},{"teal":748,"source":"contracts\\Moderator.algo.ts:150","pc":[893]},{"teal":749,"source":"contracts\\Moderator.algo.ts:150","pc":[894,895]},{"teal":750,"source":"contracts\\Moderator.algo.ts:150","pc":[896]},{"teal":751,"source":"contracts\\Moderator.algo.ts:150","pc":[897]},{"teal":752,"source":"contracts\\Moderator.algo.ts:150","pc":[898]},{"teal":753,"source":"contracts\\Moderator.algo.ts:150","pc":[899]},{"teal":754,"source":"contracts\\Moderator.algo.ts:150","pc":[900]},{"teal":758,"source":"contracts\\Moderator.algo.ts:152","pc":[901]},{"teal":759,"source":"contracts\\Moderator.algo.ts:152","pc":[902,903]},{"teal":766,"source":"contracts\\Moderator.algo.ts:153","pc":[904,905]},{"teal":767,"source":"contracts\\Moderator.algo.ts:153","pc":[906,907]},{"teal":768,"source":"contracts\\Moderator.algo.ts:153","pc":[908]},{"teal":769,"source":"contracts\\Moderator.algo.ts:153","pc":[909]},{"teal":770,"source":"contracts\\Moderator.algo.ts:153","pc":[910]},{"teal":771,"source":"contracts\\Moderator.algo.ts:153","pc":[911,912,913]},{"teal":775,"source":"contracts\\Moderator.algo.ts:154","pc":[914,915]},{"teal":776,"source":"contracts\\Moderator.algo.ts:154","pc":[916,917]},{"teal":777,"source":"contracts\\Moderator.algo.ts:154","pc":[918]},{"teal":778,"source":"contracts\\Moderator.algo.ts:154","pc":[919,920]},{"teal":779,"source":"contracts\\Moderator.algo.ts:154","pc":[921]},{"teal":780,"source":"contracts\\Moderator.algo.ts:154","pc":[922]},{"teal":781,"source":"contracts\\Moderator.algo.ts:154","pc":[923]},{"teal":782,"source":"contracts\\Moderator.algo.ts:154","pc":[924]},{"teal":783,"source":"contracts\\Moderator.algo.ts:154","pc":[925]},{"teal":784,"source":"contracts\\Moderator.algo.ts:154","pc":[926,927]},{"teal":785,"source":"contracts\\Moderator.algo.ts:154","pc":[928,929]},{"teal":786,"source":"contracts\\Moderator.algo.ts:154","pc":[930,931]},{"teal":787,"source":"contracts\\Moderator.algo.ts:154","pc":[932]},{"teal":788,"source":"contracts\\Moderator.algo.ts:154","pc":[933]},{"teal":789,"source":"contracts\\Moderator.algo.ts:154","pc":[934]},{"teal":790,"source":"contracts\\Moderator.algo.ts:154","pc":[935]},{"teal":791,"source":"contracts\\Moderator.algo.ts:154","pc":[936,937]},{"teal":792,"source":"contracts\\Moderator.algo.ts:154","pc":[938]},{"teal":793,"source":"contracts\\Moderator.algo.ts:154","pc":[939]},{"teal":794,"source":"contracts\\Moderator.algo.ts:154","pc":[940]},{"teal":795,"source":"contracts\\Moderator.algo.ts:154","pc":[941]},{"teal":796,"source":"contracts\\Moderator.algo.ts:154","pc":[942]},{"teal":797,"source":"contracts\\Moderator.algo.ts:154","pc":[943]},{"teal":798,"source":"contracts\\Moderator.algo.ts:154","pc":[944]},{"teal":799,"source":"contracts\\Moderator.algo.ts:154","pc":[945,946,947]},{"teal":800,"source":"contracts\\Moderator.algo.ts:154","pc":[948,949]},{"teal":804,"source":"contracts\\Moderator.algo.ts:155","pc":[950,951]},{"teal":805,"source":"contracts\\Moderator.algo.ts:155","pc":[952,953]},{"teal":806,"source":"contracts\\Moderator.algo.ts:155","pc":[954]},{"teal":807,"source":"contracts\\Moderator.algo.ts:155","pc":[955,956]},{"teal":808,"source":"contracts\\Moderator.algo.ts:155","pc":[957]},{"teal":809,"source":"contracts\\Moderator.algo.ts:155","pc":[958]},{"teal":810,"source":"contracts\\Moderator.algo.ts:155","pc":[959]},{"teal":811,"source":"contracts\\Moderator.algo.ts:155","pc":[960,961]},{"teal":812,"source":"contracts\\Moderator.algo.ts:155","pc":[962]},{"teal":813,"source":"contracts\\Moderator.algo.ts:155","pc":[963]},{"teal":814,"source":"contracts\\Moderator.algo.ts:155","pc":[964]},{"teal":815,"source":"contracts\\Moderator.algo.ts:155","pc":[965]},{"teal":816,"source":"contracts\\Moderator.algo.ts:155","pc":[966,967]},{"teal":820,"source":"contracts\\Moderator.algo.ts:157","pc":[968,969]},{"teal":821,"source":"contracts\\Moderator.algo.ts:157","pc":[970]},{"teal":822,"source":"contracts\\Moderator.algo.ts:157","pc":[971]},{"teal":823,"source":"contracts\\Moderator.algo.ts:157","pc":[972]},{"teal":824,"source":"contracts\\Moderator.algo.ts:157","pc":[973,974,975]},{"teal":825,"source":"contracts\\Moderator.algo.ts:157","pc":[976]},{"teal":826,"source":"contracts\\Moderator.algo.ts:157","pc":[977]},{"teal":827,"source":"contracts\\Moderator.algo.ts:157","pc":[978]},{"teal":830,"source":"contracts\\Moderator.algo.ts:157","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[979]},{"teal":831,"source":"contracts\\Moderator.algo.ts:157","pc":[980]},{"teal":832,"source":"contracts\\Moderator.algo.ts:157","pc":[981,982]},{"teal":836,"source":"contracts\\Moderator.algo.ts:158","pc":[983,984]},{"teal":837,"source":"contracts\\Moderator.algo.ts:158","pc":[985,986]},{"teal":838,"source":"contracts\\Moderator.algo.ts:158","pc":[987,988]},{"teal":839,"source":"contracts\\Moderator.algo.ts:158","pc":[989]},{"teal":840,"source":"contracts\\Moderator.algo.ts:158","pc":[990]},{"teal":841,"source":"contracts\\Moderator.algo.ts:158","pc":[991,992]},{"teal":845,"source":"contracts\\Moderator.algo.ts:160","pc":[993,994]},{"teal":846,"source":"contracts\\Moderator.algo.ts:160","pc":[995]},{"teal":847,"source":"contracts\\Moderator.algo.ts:160","pc":[996]},{"teal":848,"source":"contracts\\Moderator.algo.ts:160","pc":[997]},{"teal":849,"source":"contracts\\Moderator.algo.ts:160","pc":[998,999,1000]},{"teal":850,"source":"contracts\\Moderator.algo.ts:160","pc":[1001]},{"teal":851,"source":"contracts\\Moderator.algo.ts:160","pc":[1002]},{"teal":852,"source":"contracts\\Moderator.algo.ts:160","pc":[1003,1004]},{"teal":853,"source":"contracts\\Moderator.algo.ts:160","pc":[1005]},{"teal":854,"source":"contracts\\Moderator.algo.ts:160","pc":[1006]},{"teal":858,"source":"contracts\\Moderator.algo.ts:161","pc":[1007,1008]},{"teal":859,"source":"contracts\\Moderator.algo.ts:161","pc":[1009]},{"teal":860,"source":"contracts\\Moderator.algo.ts:161","pc":[1010]},{"teal":861,"source":"contracts\\Moderator.algo.ts:161","pc":[1011,1012]},{"teal":862,"source":"contracts\\Moderator.algo.ts:153","pc":[1013,1014,1015]},{"teal":865,"source":"contracts\\Moderator.algo.ts:146","pc":[1016]},{"teal":870,"source":"contracts\\Moderator.algo.ts:166","pc":[1017,1018,1019]},{"teal":873,"source":"contracts\\Moderator.algo.ts:166","pc":[1020,1021,1022]},{"teal":874,"source":"contracts\\Moderator.algo.ts:166","pc":[1023]},{"teal":875,"source":"contracts\\Moderator.algo.ts:166","pc":[1024]},{"teal":879,"source":"contracts\\Moderator.algo.ts:166","pc":[1025,1026,1027]},{"teal":882,"source":"contracts\\Moderator.algo.ts:166","pc":[1028]},{"teal":883,"source":"contracts\\Moderator.algo.ts:166","pc":[1029,1030]},{"teal":887,"source":"contracts\\Moderator.algo.ts:167","pc":[1031,1032]},{"teal":888,"source":"contracts\\Moderator.algo.ts:167","pc":[1033,1034,1035]},{"teal":889,"source":"contracts\\Moderator.algo.ts:167","pc":[1036,1037]},{"teal":890,"source":"contracts\\Moderator.algo.ts:167","pc":[1038]},{"teal":891,"source":"contracts\\Moderator.algo.ts:167","pc":[1039]},{"teal":892,"source":"contracts\\Moderator.algo.ts:167","pc":[1040]},{"teal":896,"source":"contracts\\Moderator.algo.ts:169","pc":[1041]},{"teal":897,"source":"contracts\\Moderator.algo.ts:169","pc":[1042]},{"teal":900,"source":"contracts\\Moderator.algo.ts:169","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[1043]},{"teal":901,"source":"contracts\\Moderator.algo.ts:169","pc":[1044]},{"teal":902,"source":"contracts\\Moderator.algo.ts:169","pc":[1045,1046]},{"teal":906,"source":"contracts\\Moderator.algo.ts:170","pc":[1047,1048]},{"teal":907,"source":"contracts\\Moderator.algo.ts:170","pc":[1049]},{"teal":908,"source":"contracts\\Moderator.algo.ts:170","pc":[1050]},{"teal":911,"source":"contracts\\Moderator.algo.ts:170","errorMessage":"No data has been aggregated yet.","pc":[1051]},{"teal":915,"source":"contracts\\Moderator.algo.ts:172","pc":[1052]},{"teal":916,"source":"contracts\\Moderator.algo.ts:172","pc":[1053,1054]},{"teal":923,"source":"contracts\\Moderator.algo.ts:173","pc":[1055,1056]},{"teal":924,"source":"contracts\\Moderator.algo.ts:173","pc":[1057,1058]},{"teal":925,"source":"contracts\\Moderator.algo.ts:173","pc":[1059]},{"teal":926,"source":"contracts\\Moderator.algo.ts:173","pc":[1060]},{"teal":927,"source":"contracts\\Moderator.algo.ts:173","pc":[1061]},{"teal":928,"source":"contracts\\Moderator.algo.ts:173","pc":[1062,1063,1064]},{"teal":932,"source":"contracts\\Moderator.algo.ts:174","pc":[1065,1066]},{"teal":933,"source":"contracts\\Moderator.algo.ts:174","pc":[1067,1068]},{"teal":934,"source":"contracts\\Moderator.algo.ts:174","pc":[1069]},{"teal":935,"source":"contracts\\Moderator.algo.ts:174","pc":[1070,1071]},{"teal":936,"source":"contracts\\Moderator.algo.ts:174","pc":[1072]},{"teal":937,"source":"contracts\\Moderator.algo.ts:174","pc":[1073]},{"teal":938,"source":"contracts\\Moderator.algo.ts:174","pc":[1074]},{"teal":939,"source":"contracts\\Moderator.algo.ts:174","pc":[1075]},{"teal":940,"source":"contracts\\Moderator.algo.ts:174","pc":[1076]},{"teal":941,"source":"contracts\\Moderator.algo.ts:174","pc":[1077,1078]},{"teal":942,"source":"contracts\\Moderator.algo.ts:174","pc":[1079,1080]},{"teal":943,"source":"contracts\\Moderator.algo.ts:174","pc":[1081,1082]},{"teal":944,"source":"contracts\\Moderator.algo.ts:174","pc":[1083]},{"teal":945,"source":"contracts\\Moderator.algo.ts:174","pc":[1084]},{"teal":946,"source":"contracts\\Moderator.algo.ts:174","pc":[1085]},{"teal":947,"source":"contracts\\Moderator.algo.ts:174","pc":[1086]},{"teal":948,"source":"contracts\\Moderator.algo.ts:174","pc":[1087,1088]},{"teal":949,"source":"contracts\\Moderator.algo.ts:174","pc":[1089]},{"teal":950,"source":"contracts\\Moderator.algo.ts:174","pc":[1090]},{"teal":951,"source":"contracts\\Moderator.algo.ts:174","pc":[1091]},{"teal":952,"source":"contracts\\Moderator.algo.ts:174","pc":[1092]},{"teal":953,"source":"contracts\\Moderator.algo.ts:174","pc":[1093]},{"teal":954,"source":"contracts\\Moderator.algo.ts:174","pc":[1094]},{"teal":955,"source":"contracts\\Moderator.algo.ts:174","pc":[1095]},{"teal":956,"source":"contracts\\Moderator.algo.ts:174","pc":[1096,1097,1098]},{"teal":957,"source":"contracts\\Moderator.algo.ts:174","pc":[1099,1100]},{"teal":961,"source":"contracts\\Moderator.algo.ts:175","pc":[1101,1102]},{"teal":962,"source":"contracts\\Moderator.algo.ts:175","pc":[1103]},{"teal":963,"source":"contracts\\Moderator.algo.ts:175","pc":[1104]},{"teal":964,"source":"contracts\\Moderator.algo.ts:175","pc":[1105]},{"teal":965,"source":"contracts\\Moderator.algo.ts:175","pc":[1106,1107,1108]},{"teal":966,"source":"contracts\\Moderator.algo.ts:175","pc":[1109]},{"teal":967,"source":"contracts\\Moderator.algo.ts:175","pc":[1110]},{"teal":968,"source":"contracts\\Moderator.algo.ts:175","pc":[1111]},{"teal":971,"source":"contracts\\Moderator.algo.ts:175","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[1112]},{"teal":972,"source":"contracts\\Moderator.algo.ts:175","pc":[1113]},{"teal":973,"source":"contracts\\Moderator.algo.ts:175","pc":[1114,1115]},{"teal":977,"source":"contracts\\Moderator.algo.ts:177","pc":[1116,1117]},{"teal":978,"source":"contracts\\Moderator.algo.ts:177","pc":[1118,1119]},{"teal":979,"source":"contracts\\Moderator.algo.ts:177","pc":[1120]},{"teal":980,"source":"contracts\\Moderator.algo.ts:177","pc":[1121,1122]},{"teal":984,"source":"contracts\\Moderator.algo.ts:179","pc":[1123,1124]},{"teal":985,"source":"contracts\\Moderator.algo.ts:179","pc":[1125]},{"teal":986,"source":"contracts\\Moderator.algo.ts:179","pc":[1126]},{"teal":987,"source":"contracts\\Moderator.algo.ts:179","pc":[1127]},{"teal":988,"source":"contracts\\Moderator.algo.ts:179","pc":[1128,1129,1130]},{"teal":989,"source":"contracts\\Moderator.algo.ts:179","pc":[1131]},{"teal":990,"source":"contracts\\Moderator.algo.ts:179","pc":[1132]},{"teal":991,"source":"contracts\\Moderator.algo.ts:179","pc":[1133]},{"teal":992,"source":"contracts\\Moderator.algo.ts:179","pc":[1134]},{"teal":993,"source":"contracts\\Moderator.algo.ts:179","pc":[1135]},{"teal":994,"source":"contracts\\Moderator.algo.ts:179","pc":[1136,1137]},{"teal":995,"source":"contracts\\Moderator.algo.ts:179","pc":[1138,1139,1140]},{"teal":996,"source":"contracts\\Moderator.algo.ts:179","pc":[1141]},{"teal":997,"source":"contracts\\Moderator.algo.ts:179","pc":[1142]},{"teal":998,"source":"contracts\\Moderator.algo.ts:179","pc":[1143]},{"teal":999,"source":"contracts\\Moderator.algo.ts:179","pc":[1144,1145,1146]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:179","pc":[1147]},{"teal":1001,"source":"contracts\\Moderator.algo.ts:179","pc":[1148]},{"teal":1002,"source":"contracts\\Moderator.algo.ts:179","pc":[1149]},{"teal":1006,"source":"contracts\\Moderator.algo.ts:181","pc":[1150,1151]},{"teal":1007,"source":"contracts\\Moderator.algo.ts:181","pc":[1152]},{"teal":1008,"source":"contracts\\Moderator.algo.ts:181","pc":[1153]},{"teal":1009,"source":"contracts\\Moderator.algo.ts:181","pc":[1154,1155]},{"teal":1010,"source":"contracts\\Moderator.algo.ts:173","pc":[1156,1157,1158]},{"teal":1013,"source":"contracts\\Moderator.algo.ts:166","pc":[1159]},{"teal":1018,"source":"contracts\\Moderator.algo.ts:186","pc":[1160,1161,1162]},{"teal":1019,"source":"contracts\\Moderator.algo.ts:186","pc":[1163]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:186","pc":[1164]},{"teal":1024,"source":"contracts\\Moderator.algo.ts:186","pc":[1165,1166,1167]},{"teal":1028,"source":"contracts\\Moderator.algo.ts:187","pc":[1168,1169]},{"teal":1029,"source":"contracts\\Moderator.algo.ts:187","pc":[1170,1171,1172]},{"teal":1030,"source":"contracts\\Moderator.algo.ts:187","pc":[1173,1174]},{"teal":1031,"source":"contracts\\Moderator.algo.ts:187","pc":[1175]},{"teal":1032,"source":"contracts\\Moderator.algo.ts:187","pc":[1176]},{"teal":1033,"source":"contracts\\Moderator.algo.ts:187","pc":[1177]},{"teal":1034,"source":"contracts\\Moderator.algo.ts:186","pc":[1178]},{"teal":1037,"source":"contracts\\Moderator.algo.ts:23","pc":[1179,1180,1181,1182,1183,1184]},{"teal":1038,"source":"contracts\\Moderator.algo.ts:23","pc":[1185,1186,1187]},{"teal":1039,"source":"contracts\\Moderator.algo.ts:23","pc":[1188,1189,1190,1191]},{"teal":1042,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1192]},{"teal":1045,"source":"contracts\\Moderator.algo.ts:23","pc":[1193,1194,1195,1196,1197,1198]},{"teal":1046,"source":"contracts\\Moderator.algo.ts:23","pc":[1199,1200,1201,1202,1203,1204]},{"teal":1047,"source":"contracts\\Moderator.algo.ts:23","pc":[1205,1206,1207,1208,1209,1210]},{"teal":1048,"source":"contracts\\Moderator.algo.ts:23","pc":[1211,1212,1213,1214,1215,1216]},{"teal":1049,"source":"contracts\\Moderator.algo.ts:23","pc":[1217,1218,1219,1220,1221,1222]},{"teal":1050,"source":"contracts\\Moderator.algo.ts:23","pc":[1223,1224,1225,1226,1227,1228]},{"teal":1051,"source":"contracts\\Moderator.algo.ts:23","pc":[1229,1230,1231,1232,1233,1234]},{"teal":1052,"source":"contracts\\Moderator.algo.ts:23","pc":[1235,1236,1237,1238,1239,1240]},{"teal":1053,"source":"contracts\\Moderator.algo.ts:23","pc":[1241,1242,1243,1244,1245,1246]},{"teal":1054,"source":"contracts\\Moderator.algo.ts:23","pc":[1247,1248,1249]},{"teal":1055,"source":"contracts\\Moderator.algo.ts:23","pc":[1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269]},{"teal":1058,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1270]},{"teal":1061,"source":"contracts\\Moderator.algo.ts:23","pc":[1271,1272,1273,1274,1275,1276]},{"teal":1062,"source":"contracts\\Moderator.algo.ts:23","pc":[1277,1278,1279]},{"teal":1063,"source":"contracts\\Moderator.algo.ts:23","pc":[1280,1281,1282,1283]},{"teal":1066,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1284]},{"teal":1069,"source":"contracts\\Moderator.algo.ts:23","pc":[1285,1286,1287,1288,1289,1290]},{"teal":1070,"source":"contracts\\Moderator.algo.ts:23","pc":[1291,1292,1293]},{"teal":1071,"source":"contracts\\Moderator.algo.ts:23","pc":[1294,1295,1296,1297]},{"teal":1074,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1298]},{"teal":1077,"source":"contracts\\Moderator.algo.ts:23","pc":[1299,1300,1301]},{"teal":1078,"source":"contracts\\Moderator.algo.ts:23","pc":[1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313]},{"teal":1079,"source":"contracts\\Moderator.algo.ts:23","pc":[1314,1315]},{"teal":1080,"source":"contracts\\Moderator.algo.ts:23","pc":[1316]},{"teal":1081,"source":"contracts\\Moderator.algo.ts:23","pc":[1317]},{"teal":1082,"source":"contracts\\Moderator.algo.ts:23","pc":[1318]},{"teal":1086,"source":"contracts\\Moderator.algo.ts:23","pc":[1319,1320,1321]},{"teal":1087,"source":"contracts\\Moderator.algo.ts:23","pc":[1322,1323]},{"teal":1088,"source":"contracts\\Moderator.algo.ts:23","pc":[1324]},{"teal":1089,"source":"contracts\\Moderator.algo.ts:23","pc":[1325]},{"teal":1090,"source":"contracts\\Moderator.algo.ts:23","pc":[1326,1327,1328]},{"teal":1091,"source":"contracts\\Moderator.algo.ts:23","pc":[1329,1330,1331]},{"teal":1092,"source":"contracts\\Moderator.algo.ts:23","pc":[1332]},{"teal":1095,"source":"contracts\\Moderator.algo.ts:23","pc":[1333,1334]},{"teal":1096,"source":"contracts\\Moderator.algo.ts:23","pc":[1335,1336]},{"teal":1097,"source":"contracts\\Moderator.algo.ts:23","pc":[1337]},{"teal":1098,"source":"contracts\\Moderator.algo.ts:23","pc":[1338]},{"teal":1099,"source":"contracts\\Moderator.algo.ts:23","pc":[1339]},{"teal":1100,"source":"contracts\\Moderator.algo.ts:23","pc":[1340,1341,1342]},{"teal":1101,"source":"contracts\\Moderator.algo.ts:23","pc":[1343,1344]},{"teal":1102,"source":"contracts\\Moderator.algo.ts:23","pc":[1345,1346]},{"teal":1103,"source":"contracts\\Moderator.algo.ts:23","pc":[1347]},{"teal":1104,"source":"contracts\\Moderator.algo.ts:23","pc":[1348,1349,1350]},{"teal":1105,"source":"contracts\\Moderator.algo.ts:23","pc":[1351,1352,1353]},{"teal":1108,"source":"contracts\\Moderator.algo.ts:23","pc":[1354]},{"teal":1111,"source":"contracts\\Moderator.algo.ts:23","pc":[1355,1356]},{"teal":1112,"source":"contracts\\Moderator.algo.ts:23","pc":[1357,1358]},{"teal":1113,"source":"contracts\\Moderator.algo.ts:23","pc":[1359]},{"teal":1114,"source":"contracts\\Moderator.algo.ts:23","pc":[1360,1361,1362]},{"teal":1115,"source":"contracts\\Moderator.algo.ts:23","pc":[1363]},{"teal":1116,"source":"contracts\\Moderator.algo.ts:23","pc":[1364]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAQACCCAKECYJAAoACHJlZ01vZGVsDwANdG90YWxEYXRhU2l6ZQ0AC3JjbGFzc01vZGVsCGlwZnNIYXNoBBUffHUxTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbh9mYWlsZWQgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnRzFQATSW5pdGlhbE1vZGVsTWV0cmljczEYFIEGCzEZCI0MA9oAAAAAAAAEKAQ2A8wAAAAAAAAAAAAAADYaAVcCAIgAAiJDigEAJwSL/0kVFlcGAkxQZ4k2GgFXAgCIAAIiQ4oBADEANjIAcgdIEkQnBIv/SRUWVwYCTFBniScFiAAMSRUWVwYCTFBQsCJDigABJwRkVwIAiTYaAjYaAYgAAiJDigIAKEcCMQA2MgByB0gSRIv/I1mL/iNZEkQjjACLAIv/I1kMQQBpi/81/yOLACQLCCQINP80/08CWSQISTT/TFkiCyQIWFcCAIwBi/41/yOLACQLCCQINP80/08CWSQISTT/TFkiCyQIWFcCAIwCiwFJFRZXBgJMUEm8SIsCSRUWVwYCTFC/iwAiCIwAQv+NiTYaAYgAAiJDigEAKEcCI4wAiwCBFAxBAECL/zX/I4sAJAsINP80/08CWUk0/0xZIgskCFhXAgCMAYsBSRUWVwYCTFC+RFcCAIwCiwGwiwKwiwAiCIwAQv+4iTEWIglJOBAiEkQ2GgFJFSEEEkSIAAIiQ4oCADEANjIAcgdIEkSL/jgAMQASRIv+OAcyChJEi/44CIHAhD0SRCcIIQS5SCcIi/+/iTYaAUkVIQQSRIgAAiJDigEAMQA2MgByB0gSRCmL/7+JJwU2GgFJFSEEEkSIAAxJFRZXBgJMUFCwIkOKAQGL/1cACBcpIyW6Fw5JQQAOi/9XEAgXKSEGJboXDhBJQQANi/9XCAgXKSUluhcOEElBAA6L/1cYCBcpgRgluhcPEEEAAycGiScHiScFNhoBSRUhBBJEiAAMSRUWVwYCTFBQsCJDigEBMQA2MgByB0gSRIv/VwAIFysjJboXD0lBAA2L/1cICBcrJSW6Fw8QSUEADov/VxAIFyshBiW6Fw8QQQADJwaJJweJNhoDFzYaAlcCADYaAYgAAiJDigMAKEcFKr5EF4wAKosAi/0IFr+L/yNZi/4VJQoSRCOMAYsBi/8jWQxBAGaL/zX/I4sBJAsIJAg0/zT/TwJZJAhJNP9MWSILJAhYVwIAjAKL/jX/I4sBJQsINP9MJVgXjAOLAkkVFlcGAkxQvkQXjASLBIsDi/0LCIwFiwJJFRZXBgJMUIsFFr+LASIIjAFC/5CJNhoBiAACIkOKAQAoRwQxADYyAHIHSBJEKr5EF4wAiwAjDUQjjAGLAYv/I1kMQQBei/81/yOLASQLCCQINP80/08CWSQISTT/TFkiCyQIWFcCAIwCiwJJFRZXBgJMUL5EF4wDiwOLAAqMBIsCSRUWVwYCTFBJvEiLBIgAskkVFlcGAkxQv4sBIgiMAUL/mImIAAIiQ4oAADEANjIAcgdIEkSJgAQRV1bbNhoAjgH8KACABBU3wZSABE5Cj4aABBJE4zKABLeJGPWABH3i382ABL+K3t+ABNGpweuABO3n6HiABKcGa302GgCOCfwc/Df80/0t/Xj9mP3//l7/AwCABBdHQFs2GgCOAfvoAIAEJIfDLDYaAI4B/3YAigEBgAowMTIzNDU2Nzg5i/8iWImKAQGL/yMSQQAEgAEwiYv/IQUKIw1BAAuL/yEFCoj/4EIAASiL/yEFGIj/wFCJ","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'printHash()string': Record<string, never>
    'storeModelParams(string[],string[])void': {
      paramkeys: string[]
      paramValues: string[]
    }
    'printModelParams(string[20])void': {
      paramKeys: [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string]
    }
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Classification
    }
    'submitLocalUpdate(string[],uint64[],uint64)void': {
      paramKeys: string[]
      paramValues: bigint[] | number[]
      dataSize: bigint | number
    }
    'finalizeFedAvg(string[])void': {
      paramKeys: string[]
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'printHash()string': []
    'storeModelParams(string[],string[])void': [paramkeys: string[], paramValues: string[]]
    'printModelParams(string[20])void': [paramKeys: [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string]]
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Classification]
    'submitLocalUpdate(string[],uint64[],uint64)void': [paramKeys: string[], paramValues: bigint[] | number[], dataSize: bigint | number]
    'finalizeFedAvg(string[])void': [paramKeys: string[]]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'printHash()string': string
  'storeModelParams(string[],string[])void': void
  'printModelParams(string[20])void': void
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'submitLocalUpdate(string[],uint64[],uint64)void': void
  'finalizeFedAvg(string[])void': void
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'printHash()string' | 'printHash', {
      argsObj: DmlChainArgs['obj']['printHash()string']
      argsTuple: DmlChainArgs['tuple']['printHash()string']
      returns: DmlChainReturns['printHash()string']
    }>
    & Record<'storeModelParams(string[],string[])void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(string[],string[])void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(string[],string[])void']
      returns: DmlChainReturns['storeModelParams(string[],string[])void']
    }>
    & Record<'printModelParams(string[20])void' | 'printModelParams', {
      argsObj: DmlChainArgs['obj']['printModelParams(string[20])void']
      argsTuple: DmlChainArgs['tuple']['printModelParams(string[20])void']
      returns: DmlChainReturns['printModelParams(string[20])void']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'submitLocalUpdate(string[],uint64[],uint64)void' | 'submitLocalUpdate', {
      argsObj: DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void']
      argsTuple: DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']
      returns: DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void']
    }>
    & Record<'finalizeFedAvg(string[])void' | 'finalizeFedAvg', {
      argsObj: DmlChainArgs['obj']['finalizeFedAvg(string[])void']
      argsTuple: DmlChainArgs['tuple']['finalizeFedAvg(string[])void']
      returns: DmlChainReturns['finalizeFedAvg(string[])void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        parameterKeys: Map<string, string>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
        aggregatorParameterSums: Map<string, bigint>
        totalDataSize: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the printHash()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printHash()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(string[],string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(string[],string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramkeys, params.args.paramValues],
    }
  }
  /**
   * Constructs a no op call for the printModelParams(string[20])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printModelParams(params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printModelParams(string[20])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the submitLocalUpdate(string[],uint64[],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitLocalUpdate(string[],uint64[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys, params.args.paramValues, params.args.dataSize],
    }
  }
  /**
   * Constructs a no op call for the finalizeFedAvg(string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeFedAvg(string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | DmlChainReturns['createApplication(string)void'] }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printModelParams(string[20])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printModelParams: (params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printModelParams(string[20])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printModelParams: (params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as undefined | DmlChainReturns['updateApplication(string)void']}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as undefined | DmlChainReturns['deleteApplication()void']}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printHash: async (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printHash(params))
      return {...result, return: result.return as undefined | DmlChainReturns['printHash()string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeModelParams(string[],string[])void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printModelParams(string[20])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printModelParams: async (params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printModelParams(params))
      return {...result, return: result.return as undefined | DmlChainReturns['printModelParams(string[20])void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitLocalUpdate: async (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.submitLocalUpdate(params))
      return {...result, return: result.return as undefined | DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalizeFedAvg: async (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.finalizeFedAvg(params))
      return {...result, return: result.return as undefined | DmlChainReturns['finalizeFedAvg(string[])void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the parameterKeys map in box state
       */
      parameterKeys: {
        /**
         * Get all current values of the parameterKeys map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("parameterKeys")) as Map<string, string> },
        /**
         * Get a current value of the parameterKeys map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("parameterKeys", key) as string | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
      /**
       * Get values from the aggregatorParameterSums map in box state
       */
      aggregatorParameterSums: {
        /**
         * Get all current values of the aggregatorParameterSums map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("aggregatorParameterSums")) as Map<string, bigint> },
        /**
         * Get a current value of the aggregatorParameterSums map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("aggregatorParameterSums", key) as bigint | undefined },
      },
      /**
       * Get values from the totalDataSize map in box state
       */
      totalDataSize: {
        /**
         * Get all current values of the totalDataSize map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("totalDataSize")) as Map<string, bigint> },
        /**
         * Get a current value of the totalDataSize map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("totalDataSize", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a printHash()string method call against the DMLChain contract
       */
      printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('printHash()string', v))
        return this
      },
      /**
       * Add a storeModelParams(string[],string[])void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a printModelParams(string[20])void method call against the DMLChain contract
       */
      printModelParams(params: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a submitLocalUpdate(string[],uint64[],uint64)void method call against the DMLChain contract
       */
      submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitLocalUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeFedAvg(string[])void method call against the DMLChain contract
       */
      finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeFedAvg(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the printHash()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printHash(params?: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']>): DmlChainComposer<[...TReturns, DmlChainReturns['printHash()string'] | undefined]>

  /**
   * Calls the storeModelParams(string[],string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(string[],string[])void'] | undefined]>

  /**
   * Calls the printModelParams(string[20])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printModelParams(params?: CallParams<DmlChainArgs['obj']['printModelParams(string[20])void'] | DmlChainArgs['tuple']['printModelParams(string[20])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['printModelParams(string[20])void'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the submitLocalUpdate(string[],uint64[],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitLocalUpdate(params?: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void'] | undefined]>

  /**
   * Calls the finalizeFedAvg(string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeFedAvg(params?: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['finalizeFedAvg(string[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

