/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"assignRewardPool","args":[{"name":"rewardPoolAmount","type":"uint64"},{"name":"rewardPoolTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"commitToListing","args":[{"name":"stakeAmountTxn","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"checkBalance","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"payoutRewards","args":[{"name":"Address","type":"address"},{"name":"reward","type":"uint64"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"bulkPayoutRewards","args":[{"name":"addresses","type":"address[]"},{"name":"rewards","type":"uint64[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getClassificationCriteria","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"mbrPay","type":"pay"},{"name":"Address","type":"address"},{"name":"paramsData","type":"(string,string,uint64,uint64)","struct":"ParamsData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string,uint64,uint64)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"distributeRewards","args":[{"name":"contributor","type":"(uint64)","struct":"rewardCalculation"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"ParamsData":[{"name":"paramHash","type":"string"},{"name":"paramKey","type":"string"},{"name":"score","type":"uint64"},{"name":"reputation","type":"uint64"}],"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}],"rewardCalculation":[{"name":"score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"},"rewardPool":{"key":"cmV3YXJkUG9vbA==","keyType":"AVMBytes","valueType":"uint64"},"stakeAmount":{"key":"c3Rha2VBbW91bnQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"paramsData":{"keyType":"address","valueType":"ParamsData"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:35","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:35","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"teal":3,"source":"contracts\\Moderator.algo.ts:35","pc":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84]},{"teal":15,"source":"contracts\\Moderator.algo.ts:35","pc":[85,86]},{"teal":16,"source":"contracts\\Moderator.algo.ts:35","pc":[87]},{"teal":17,"source":"contracts\\Moderator.algo.ts:35","pc":[88,89]},{"teal":18,"source":"contracts\\Moderator.algo.ts:35","pc":[90]},{"teal":19,"source":"contracts\\Moderator.algo.ts:35","pc":[91,92]},{"teal":20,"source":"contracts\\Moderator.algo.ts:35","pc":[93]},{"teal":21,"source":"contracts\\Moderator.algo.ts:35","pc":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119]},{"teal":25,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[120]},{"teal":30,"source":"contracts\\Moderator.algo.ts:54","pc":[121,122,123]},{"teal":31,"source":"contracts\\Moderator.algo.ts:54","pc":[124,125,126]},{"teal":34,"source":"contracts\\Moderator.algo.ts:54","pc":[127,128,129]},{"teal":35,"source":"contracts\\Moderator.algo.ts:54","pc":[130]},{"teal":36,"source":"contracts\\Moderator.algo.ts:54","pc":[131]},{"teal":40,"source":"contracts\\Moderator.algo.ts:54","pc":[132,133,134]},{"teal":44,"source":"contracts\\Moderator.algo.ts:55","pc":[135,136]},{"teal":45,"source":"contracts\\Moderator.algo.ts:55","pc":[137,138]},{"teal":46,"source":"contracts\\Moderator.algo.ts:55","pc":[139]},{"teal":47,"source":"contracts\\Moderator.algo.ts:55","pc":[140]},{"teal":48,"source":"contracts\\Moderator.algo.ts:55","pc":[141]},{"teal":49,"source":"contracts\\Moderator.algo.ts:55","pc":[142,143,144]},{"teal":50,"source":"contracts\\Moderator.algo.ts:55","pc":[145]},{"teal":51,"source":"contracts\\Moderator.algo.ts:55","pc":[146]},{"teal":52,"source":"contracts\\Moderator.algo.ts:55","pc":[147]},{"teal":53,"source":"contracts\\Moderator.algo.ts:54","pc":[148]},{"teal":58,"source":"contracts\\Moderator.algo.ts:59","pc":[149,150,151]},{"teal":59,"source":"contracts\\Moderator.algo.ts:59","pc":[152,153,154]},{"teal":62,"source":"contracts\\Moderator.algo.ts:59","pc":[155,156,157]},{"teal":63,"source":"contracts\\Moderator.algo.ts:59","pc":[158]},{"teal":64,"source":"contracts\\Moderator.algo.ts:59","pc":[159]},{"teal":68,"source":"contracts\\Moderator.algo.ts:59","pc":[160,161,162]},{"teal":72,"source":"contracts\\Moderator.algo.ts:60","pc":[163,164]},{"teal":73,"source":"contracts\\Moderator.algo.ts:60","pc":[165,166,167]},{"teal":74,"source":"contracts\\Moderator.algo.ts:60","pc":[168,169]},{"teal":75,"source":"contracts\\Moderator.algo.ts:60","pc":[170]},{"teal":76,"source":"contracts\\Moderator.algo.ts:60","pc":[171]},{"teal":77,"source":"contracts\\Moderator.algo.ts:60","pc":[172]},{"teal":81,"source":"contracts\\Moderator.algo.ts:61","pc":[173,174]},{"teal":82,"source":"contracts\\Moderator.algo.ts:61","pc":[175,176]},{"teal":83,"source":"contracts\\Moderator.algo.ts:61","pc":[177]},{"teal":84,"source":"contracts\\Moderator.algo.ts:61","pc":[178]},{"teal":85,"source":"contracts\\Moderator.algo.ts:61","pc":[179]},{"teal":86,"source":"contracts\\Moderator.algo.ts:61","pc":[180,181,182]},{"teal":87,"source":"contracts\\Moderator.algo.ts:61","pc":[183]},{"teal":88,"source":"contracts\\Moderator.algo.ts:61","pc":[184]},{"teal":89,"source":"contracts\\Moderator.algo.ts:61","pc":[185]},{"teal":90,"source":"contracts\\Moderator.algo.ts:59","pc":[186]},{"teal":95,"source":"contracts\\Moderator.algo.ts:65","pc":[187]},{"teal":98,"source":"contracts\\Moderator.algo.ts:65","pc":[188,189]},{"teal":99,"source":"contracts\\Moderator.algo.ts:65","pc":[190]},{"teal":100,"source":"contracts\\Moderator.algo.ts:65","pc":[191]},{"teal":101,"source":"contracts\\Moderator.algo.ts:65","pc":[192]},{"teal":102,"source":"contracts\\Moderator.algo.ts:65","pc":[193,194]},{"teal":103,"source":"contracts\\Moderator.algo.ts:65","pc":[195]},{"teal":104,"source":"contracts\\Moderator.algo.ts:65","pc":[196]},{"teal":107,"source":"contracts\\Moderator.algo.ts:65","errorMessage":"argument 0 (rewardPoolTxn) for assignRewardPool must be a pay transaction","pc":[197]},{"teal":110,"source":"contracts\\Moderator.algo.ts:65","pc":[198,199,200]},{"teal":111,"source":"contracts\\Moderator.algo.ts:65","pc":[201]},{"teal":114,"source":"contracts\\Moderator.algo.ts:65","pc":[202,203,204]},{"teal":115,"source":"contracts\\Moderator.algo.ts:65","pc":[205]},{"teal":116,"source":"contracts\\Moderator.algo.ts:65","pc":[206]},{"teal":117,"source":"contracts\\Moderator.algo.ts:65","pc":[207]},{"teal":118,"source":"contracts\\Moderator.algo.ts:65","pc":[208]},{"teal":119,"source":"contracts\\Moderator.algo.ts:65","pc":[209]},{"teal":123,"source":"contracts\\Moderator.algo.ts:65","pc":[210,211,212]},{"teal":132,"source":"contracts\\Moderator.algo.ts:66","pc":[213,214]},{"teal":133,"source":"contracts\\Moderator.algo.ts:67","pc":[215,216]},{"teal":134,"source":"contracts\\Moderator.algo.ts:67","pc":[217,218]},{"teal":135,"source":"contracts\\Moderator.algo.ts:67","pc":[219]},{"teal":138,"source":"contracts\\Moderator.algo.ts:67","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[220]},{"teal":141,"source":"contracts\\Moderator.algo.ts:66","pc":[221,222]},{"teal":142,"source":"contracts\\Moderator.algo.ts:68","pc":[223,224]},{"teal":143,"source":"contracts\\Moderator.algo.ts:68","pc":[225,226]},{"teal":144,"source":"contracts\\Moderator.algo.ts:68","pc":[227]},{"teal":147,"source":"contracts\\Moderator.algo.ts:68","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[228]},{"teal":150,"source":"contracts\\Moderator.algo.ts:66","pc":[229,230]},{"teal":151,"source":"contracts\\Moderator.algo.ts:69","pc":[231,232]},{"teal":152,"source":"contracts\\Moderator.algo.ts:69","pc":[233,234]},{"teal":153,"source":"contracts\\Moderator.algo.ts:69","pc":[235]},{"teal":156,"source":"contracts\\Moderator.algo.ts:69","errorMessage":"transaction verification failed: {\"txn\":\"rewardPoolTxn\",\"field\":\"amount\",\"expected\":\"rewardPoolAmount\"}","pc":[236]},{"teal":160,"source":"contracts\\Moderator.algo.ts:71","pc":[237,238,239,240,241,242,243,244,245,246,247,248]},{"teal":161,"source":"contracts\\Moderator.algo.ts:71","pc":[249,250]},{"teal":162,"source":"contracts\\Moderator.algo.ts:71","pc":[251]},{"teal":166,"source":"contracts\\Moderator.algo.ts:72","pc":[252,253]},{"teal":167,"source":"contracts\\Moderator.algo.ts:72","pc":[254]},{"teal":168,"source":"contracts\\Moderator.algo.ts:72","pc":[255,256]},{"teal":169,"source":"contracts\\Moderator.algo.ts:72","pc":[257]},{"teal":170,"source":"contracts\\Moderator.algo.ts:72","pc":[258,259]},{"teal":171,"source":"contracts\\Moderator.algo.ts:72","pc":[260]},{"teal":172,"source":"contracts\\Moderator.algo.ts:72","pc":[261]},{"teal":173,"source":"contracts\\Moderator.algo.ts:72","pc":[262]},{"teal":174,"source":"contracts\\Moderator.algo.ts:72","pc":[263]},{"teal":175,"source":"contracts\\Moderator.algo.ts:72","pc":[264]},{"teal":178,"source":"contracts\\Moderator.algo.ts:72","errorMessage":"wideRatio failed","pc":[265]},{"teal":179,"source":"contracts\\Moderator.algo.ts:72","pc":[266]},{"teal":183,"source":"contracts\\Moderator.algo.ts:73","pc":[267]},{"teal":184,"source":"contracts\\Moderator.algo.ts:65","pc":[268]},{"teal":189,"source":"contracts\\Moderator.algo.ts:77","pc":[269]},{"teal":192,"source":"contracts\\Moderator.algo.ts:77","pc":[270,271]},{"teal":193,"source":"contracts\\Moderator.algo.ts:77","pc":[272]},{"teal":194,"source":"contracts\\Moderator.algo.ts:77","pc":[273]},{"teal":195,"source":"contracts\\Moderator.algo.ts:77","pc":[274]},{"teal":196,"source":"contracts\\Moderator.algo.ts:77","pc":[275,276]},{"teal":197,"source":"contracts\\Moderator.algo.ts:77","pc":[277]},{"teal":198,"source":"contracts\\Moderator.algo.ts:77","pc":[278]},{"teal":201,"source":"contracts\\Moderator.algo.ts:77","errorMessage":"argument 0 (stakeAmountTxn) for commitToListing must be a pay transaction","pc":[279]},{"teal":204,"source":"contracts\\Moderator.algo.ts:77","pc":[280,281,282]},{"teal":205,"source":"contracts\\Moderator.algo.ts:77","pc":[283]},{"teal":206,"source":"contracts\\Moderator.algo.ts:77","pc":[284]},{"teal":207,"source":"contracts\\Moderator.algo.ts:77","pc":[285]},{"teal":208,"source":"contracts\\Moderator.algo.ts:77","pc":[286]},{"teal":209,"source":"contracts\\Moderator.algo.ts:77","pc":[287]},{"teal":213,"source":"contracts\\Moderator.algo.ts:77","pc":[288,289,290]},{"teal":222,"source":"contracts\\Moderator.algo.ts:78","pc":[291,292]},{"teal":223,"source":"contracts\\Moderator.algo.ts:79","pc":[293,294]},{"teal":224,"source":"contracts\\Moderator.algo.ts:79","pc":[295,296]},{"teal":225,"source":"contracts\\Moderator.algo.ts:79","pc":[297]},{"teal":228,"source":"contracts\\Moderator.algo.ts:79","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[298]},{"teal":231,"source":"contracts\\Moderator.algo.ts:78","pc":[299,300]},{"teal":232,"source":"contracts\\Moderator.algo.ts:80","pc":[301,302]},{"teal":233,"source":"contracts\\Moderator.algo.ts:80","pc":[303,304]},{"teal":234,"source":"contracts\\Moderator.algo.ts:80","pc":[305]},{"teal":237,"source":"contracts\\Moderator.algo.ts:80","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[306]},{"teal":240,"source":"contracts\\Moderator.algo.ts:78","pc":[307,308]},{"teal":241,"source":"contracts\\Moderator.algo.ts:81","pc":[309,310]},{"teal":242,"source":"contracts\\Moderator.algo.ts:81","pc":[311,312]},{"teal":243,"source":"contracts\\Moderator.algo.ts:81","pc":[313]},{"teal":244,"source":"contracts\\Moderator.algo.ts:81","pc":[314]},{"teal":247,"source":"contracts\\Moderator.algo.ts:81","errorMessage":"transaction verification failed: {\"txn\":\"stakeAmountTxn\",\"field\":\"amount\",\"expected\":\"this.stakeAmount.value\"}","pc":[315]},{"teal":251,"source":"contracts\\Moderator.algo.ts:84","pc":[316]},{"teal":252,"source":"contracts\\Moderator.algo.ts:77","pc":[317]},{"teal":257,"source":"contracts\\Moderator.algo.ts:88","pc":[318]},{"teal":260,"source":"contracts\\Moderator.algo.ts:88","pc":[319,320,321]},{"teal":261,"source":"contracts\\Moderator.algo.ts:88","pc":[322]},{"teal":262,"source":"contracts\\Moderator.algo.ts:88","pc":[323]},{"teal":263,"source":"contracts\\Moderator.algo.ts:88","pc":[324]},{"teal":264,"source":"contracts\\Moderator.algo.ts:88","pc":[325]},{"teal":265,"source":"contracts\\Moderator.algo.ts:88","pc":[326]},{"teal":269,"source":"contracts\\Moderator.algo.ts:88","pc":[327,328,329]},{"teal":273,"source":"contracts\\Moderator.algo.ts:89","pc":[330,331]},{"teal":274,"source":"contracts\\Moderator.algo.ts:89","pc":[332,333]},{"teal":275,"source":"contracts\\Moderator.algo.ts:89","pc":[334]},{"teal":276,"source":"contracts\\Moderator.algo.ts:88","pc":[335]},{"teal":281,"source":"contracts\\Moderator.algo.ts:93","pc":[336]},{"teal":284,"source":"contracts\\Moderator.algo.ts:93","pc":[337,338,339]},{"teal":285,"source":"contracts\\Moderator.algo.ts:93","pc":[340]},{"teal":288,"source":"contracts\\Moderator.algo.ts:93","pc":[341,342,343]},{"teal":289,"source":"contracts\\Moderator.algo.ts:93","pc":[344]},{"teal":290,"source":"contracts\\Moderator.algo.ts:93","pc":[345]},{"teal":291,"source":"contracts\\Moderator.algo.ts:93","pc":[346]},{"teal":292,"source":"contracts\\Moderator.algo.ts:93","pc":[347]},{"teal":295,"source":"contracts\\Moderator.algo.ts:93","errorMessage":"argument 1 (Address) for payoutRewards must be a address","pc":[348]},{"teal":298,"source":"contracts\\Moderator.algo.ts:93","pc":[349,350,351]},{"teal":299,"source":"contracts\\Moderator.algo.ts:93","pc":[352]},{"teal":300,"source":"contracts\\Moderator.algo.ts:93","pc":[353]},{"teal":301,"source":"contracts\\Moderator.algo.ts:93","pc":[354]},{"teal":302,"source":"contracts\\Moderator.algo.ts:93","pc":[355,356,357]},{"teal":303,"source":"contracts\\Moderator.algo.ts:93","pc":[358]},{"teal":304,"source":"contracts\\Moderator.algo.ts:93","pc":[359]},{"teal":305,"source":"contracts\\Moderator.algo.ts:93","pc":[360]},{"teal":306,"source":"contracts\\Moderator.algo.ts:93","pc":[361]},{"teal":307,"source":"contracts\\Moderator.algo.ts:93","pc":[362]},{"teal":308,"source":"contracts\\Moderator.algo.ts:93","pc":[363]},{"teal":312,"source":"contracts\\Moderator.algo.ts:93","pc":[364,365,366]},{"teal":320,"source":"contracts\\Moderator.algo.ts:94","pc":[367]},{"teal":321,"source":"contracts\\Moderator.algo.ts:94","pc":[368]},{"teal":322,"source":"contracts\\Moderator.algo.ts:94","pc":[369,370]},{"teal":326,"source":"contracts\\Moderator.algo.ts:95","pc":[371,372]},{"teal":327,"source":"contracts\\Moderator.algo.ts:95","pc":[373,374]},{"teal":331,"source":"contracts\\Moderator.algo.ts:96","pc":[375,376]},{"teal":332,"source":"contracts\\Moderator.algo.ts:96","pc":[377,378]},{"teal":336,"source":"contracts\\Moderator.algo.ts:97","pc":[379,380]},{"teal":337,"source":"contracts\\Moderator.algo.ts:97","pc":[381,382]},{"teal":340,"source":"contracts\\Moderator.algo.ts:94","pc":[383]},{"teal":341,"source":"contracts\\Moderator.algo.ts:94","pc":[384,385]},{"teal":344,"source":"contracts\\Moderator.algo.ts:94","pc":[386]},{"teal":348,"source":"contracts\\Moderator.algo.ts:100","pc":[387,388,389,390,391,392,393,394,395]},{"teal":349,"source":"contracts\\Moderator.algo.ts:93","pc":[396]},{"teal":354,"source":"contracts\\Moderator.algo.ts:104","pc":[397]},{"teal":357,"source":"contracts\\Moderator.algo.ts:104","pc":[398,399,400]},{"teal":358,"source":"contracts\\Moderator.algo.ts:104","pc":[401,402,403]},{"teal":361,"source":"contracts\\Moderator.algo.ts:104","pc":[404,405,406]},{"teal":362,"source":"contracts\\Moderator.algo.ts:104","pc":[407,408,409]},{"teal":365,"source":"contracts\\Moderator.algo.ts:104","pc":[410,411,412]},{"teal":366,"source":"contracts\\Moderator.algo.ts:104","pc":[413]},{"teal":367,"source":"contracts\\Moderator.algo.ts:104","pc":[414]},{"teal":368,"source":"contracts\\Moderator.algo.ts:104","pc":[415]},{"teal":369,"source":"contracts\\Moderator.algo.ts:104","pc":[416]},{"teal":370,"source":"contracts\\Moderator.algo.ts:104","pc":[417]},{"teal":374,"source":"contracts\\Moderator.algo.ts:104","pc":[418,419,420]},{"teal":377,"source":"contracts\\Moderator.algo.ts:104","pc":[421]},{"teal":378,"source":"contracts\\Moderator.algo.ts:104","pc":[422,423]},{"teal":382,"source":"contracts\\Moderator.algo.ts:105","pc":[424,425]},{"teal":383,"source":"contracts\\Moderator.algo.ts:105","pc":[426]},{"teal":384,"source":"contracts\\Moderator.algo.ts:105","pc":[427]},{"teal":385,"source":"contracts\\Moderator.algo.ts:105","pc":[428]},{"teal":386,"source":"contracts\\Moderator.algo.ts:105","pc":[429,430]},{"teal":387,"source":"contracts\\Moderator.algo.ts:105","pc":[431]},{"teal":388,"source":"contracts\\Moderator.algo.ts:105","pc":[432]},{"teal":389,"source":"contracts\\Moderator.algo.ts:105","pc":[433]},{"teal":390,"source":"contracts\\Moderator.algo.ts:105","pc":[434]},{"teal":393,"source":"contracts\\Moderator.algo.ts:105","errorMessage":"Arrays must have the same length","pc":[435]},{"teal":397,"source":"contracts\\Moderator.algo.ts:107","pc":[436]},{"teal":398,"source":"contracts\\Moderator.algo.ts:107","pc":[437,438]},{"teal":402,"source":"contracts\\Moderator.algo.ts:108","pc":[439]},{"teal":403,"source":"contracts\\Moderator.algo.ts:108","pc":[440,441]},{"teal":408,"source":"contracts\\Moderator.algo.ts:108","pc":[442,443]},{"teal":409,"source":"contracts\\Moderator.algo.ts:108","pc":[444,445]},{"teal":410,"source":"contracts\\Moderator.algo.ts:108","pc":[446]},{"teal":411,"source":"contracts\\Moderator.algo.ts:108","pc":[447]},{"teal":412,"source":"contracts\\Moderator.algo.ts:108","pc":[448]},{"teal":413,"source":"contracts\\Moderator.algo.ts:108","pc":[449]},{"teal":414,"source":"contracts\\Moderator.algo.ts:108","pc":[450,451,452]},{"teal":418,"source":"contracts\\Moderator.algo.ts:109","pc":[453,454]},{"teal":419,"source":"contracts\\Moderator.algo.ts:109","pc":[455,456]},{"teal":420,"source":"contracts\\Moderator.algo.ts:109","pc":[457,458]},{"teal":421,"source":"contracts\\Moderator.algo.ts:109","pc":[459]},{"teal":422,"source":"contracts\\Moderator.algo.ts:109","pc":[460,461]},{"teal":423,"source":"contracts\\Moderator.algo.ts:109","pc":[462]},{"teal":424,"source":"contracts\\Moderator.algo.ts:109","pc":[463]},{"teal":425,"source":"contracts\\Moderator.algo.ts:109","pc":[464]},{"teal":426,"source":"contracts\\Moderator.algo.ts:109","pc":[465,466]},{"teal":427,"source":"contracts\\Moderator.algo.ts:109","pc":[467]},{"teal":428,"source":"contracts\\Moderator.algo.ts:109","pc":[468]},{"teal":429,"source":"contracts\\Moderator.algo.ts:109","pc":[469]},{"teal":430,"source":"contracts\\Moderator.algo.ts:109","pc":[470]},{"teal":431,"source":"contracts\\Moderator.algo.ts:109","pc":[471]},{"teal":432,"source":"contracts\\Moderator.algo.ts:109","pc":[472,473]},{"teal":437,"source":"contracts\\Moderator.algo.ts:108","pc":[474,475]},{"teal":438,"source":"contracts\\Moderator.algo.ts:108","pc":[476]},{"teal":439,"source":"contracts\\Moderator.algo.ts:108","pc":[477]},{"teal":440,"source":"contracts\\Moderator.algo.ts:108","pc":[478,479]},{"teal":441,"source":"contracts\\Moderator.algo.ts:108","pc":[480,481,482]},{"teal":446,"source":"contracts\\Moderator.algo.ts:112","pc":[483,484]},{"teal":447,"source":"contracts\\Moderator.algo.ts:112","pc":[485]},{"teal":448,"source":"contracts\\Moderator.algo.ts:112","pc":[486]},{"teal":449,"source":"contracts\\Moderator.algo.ts:112","pc":[487]},{"teal":450,"source":"contracts\\Moderator.algo.ts:112","pc":[488,489]},{"teal":451,"source":"contracts\\Moderator.algo.ts:112","pc":[490]},{"teal":452,"source":"contracts\\Moderator.algo.ts:112","pc":[491]},{"teal":453,"source":"contracts\\Moderator.algo.ts:112","pc":[492]},{"teal":454,"source":"contracts\\Moderator.algo.ts:112","pc":[493]},{"teal":455,"source":"contracts\\Moderator.algo.ts:112","pc":[494]},{"teal":456,"source":"contracts\\Moderator.algo.ts:112","pc":[495]},{"teal":457,"source":"contracts\\Moderator.algo.ts:112","pc":[496]},{"teal":458,"source":"contracts\\Moderator.algo.ts:112","pc":[497]},{"teal":459,"source":"contracts\\Moderator.algo.ts:112","pc":[498]},{"teal":462,"source":"contracts\\Moderator.algo.ts:112","errorMessage":"wideRatio failed","pc":[499]},{"teal":463,"source":"contracts\\Moderator.algo.ts:112","pc":[500,501]},{"teal":467,"source":"contracts\\Moderator.algo.ts:114","pc":[502,503]},{"teal":468,"source":"contracts\\Moderator.algo.ts:114","pc":[504,505]},{"teal":469,"source":"contracts\\Moderator.algo.ts:114","pc":[506]},{"teal":470,"source":"contracts\\Moderator.algo.ts:114","pc":[507,508]},{"teal":474,"source":"contracts\\Moderator.algo.ts:116","pc":[509,510]},{"teal":475,"source":"contracts\\Moderator.algo.ts:116","pc":[511,512]},{"teal":476,"source":"contracts\\Moderator.algo.ts:116","pc":[513]},{"teal":477,"source":"contracts\\Moderator.algo.ts:116","pc":[514,515]},{"teal":478,"source":"contracts\\Moderator.algo.ts:116","pc":[516]},{"teal":481,"source":"contracts\\Moderator.algo.ts:116","errorMessage":"Insufficient balance for rewards","pc":[517]},{"teal":485,"source":"contracts\\Moderator.algo.ts:118","pc":[518]},{"teal":486,"source":"contracts\\Moderator.algo.ts:118","pc":[519,520]},{"teal":491,"source":"contracts\\Moderator.algo.ts:118","pc":[521,522]},{"teal":492,"source":"contracts\\Moderator.algo.ts:118","pc":[523,524]},{"teal":493,"source":"contracts\\Moderator.algo.ts:118","pc":[525]},{"teal":494,"source":"contracts\\Moderator.algo.ts:118","pc":[526]},{"teal":495,"source":"contracts\\Moderator.algo.ts:118","pc":[527]},{"teal":496,"source":"contracts\\Moderator.algo.ts:118","pc":[528]},{"teal":497,"source":"contracts\\Moderator.algo.ts:118","pc":[529,530,531]},{"teal":505,"source":"contracts\\Moderator.algo.ts:119","pc":[532]},{"teal":506,"source":"contracts\\Moderator.algo.ts:119","pc":[533]},{"teal":507,"source":"contracts\\Moderator.algo.ts:119","pc":[534,535]},{"teal":511,"source":"contracts\\Moderator.algo.ts:120","pc":[536,537]},{"teal":512,"source":"contracts\\Moderator.algo.ts:120","pc":[538,539]},{"teal":513,"source":"contracts\\Moderator.algo.ts:120","pc":[540]},{"teal":514,"source":"contracts\\Moderator.algo.ts:120","pc":[541,542]},{"teal":515,"source":"contracts\\Moderator.algo.ts:120","pc":[543]},{"teal":516,"source":"contracts\\Moderator.algo.ts:120","pc":[544]},{"teal":517,"source":"contracts\\Moderator.algo.ts:120","pc":[545]},{"teal":518,"source":"contracts\\Moderator.algo.ts:120","pc":[546,547]},{"teal":519,"source":"contracts\\Moderator.algo.ts:120","pc":[548]},{"teal":520,"source":"contracts\\Moderator.algo.ts:120","pc":[549]},{"teal":521,"source":"contracts\\Moderator.algo.ts:120","pc":[550]},{"teal":522,"source":"contracts\\Moderator.algo.ts:120","pc":[551]},{"teal":523,"source":"contracts\\Moderator.algo.ts:120","pc":[552,553]},{"teal":524,"source":"contracts\\Moderator.algo.ts:120","pc":[554]},{"teal":525,"source":"contracts\\Moderator.algo.ts:120","pc":[555]},{"teal":526,"source":"contracts\\Moderator.algo.ts:120","pc":[556,557]},{"teal":530,"source":"contracts\\Moderator.algo.ts:121","pc":[558,559]},{"teal":531,"source":"contracts\\Moderator.algo.ts:121","pc":[560,561]},{"teal":532,"source":"contracts\\Moderator.algo.ts:121","pc":[562]},{"teal":533,"source":"contracts\\Moderator.algo.ts:121","pc":[563,564]},{"teal":534,"source":"contracts\\Moderator.algo.ts:121","pc":[565]},{"teal":535,"source":"contracts\\Moderator.algo.ts:121","pc":[566]},{"teal":536,"source":"contracts\\Moderator.algo.ts:121","pc":[567]},{"teal":537,"source":"contracts\\Moderator.algo.ts:121","pc":[568,569]},{"teal":538,"source":"contracts\\Moderator.algo.ts:121","pc":[570]},{"teal":539,"source":"contracts\\Moderator.algo.ts:121","pc":[571]},{"teal":540,"source":"contracts\\Moderator.algo.ts:121","pc":[572]},{"teal":541,"source":"contracts\\Moderator.algo.ts:121","pc":[573,574]},{"teal":545,"source":"contracts\\Moderator.algo.ts:122","pc":[575,576]},{"teal":546,"source":"contracts\\Moderator.algo.ts:122","pc":[577,578]},{"teal":549,"source":"contracts\\Moderator.algo.ts:119","pc":[579]},{"teal":550,"source":"contracts\\Moderator.algo.ts:119","pc":[580,581]},{"teal":553,"source":"contracts\\Moderator.algo.ts:119","pc":[582]},{"teal":558,"source":"contracts\\Moderator.algo.ts:118","pc":[583,584]},{"teal":559,"source":"contracts\\Moderator.algo.ts:118","pc":[585]},{"teal":560,"source":"contracts\\Moderator.algo.ts:118","pc":[586]},{"teal":561,"source":"contracts\\Moderator.algo.ts:118","pc":[587,588]},{"teal":562,"source":"contracts\\Moderator.algo.ts:118","pc":[589,590,591]},{"teal":567,"source":"contracts\\Moderator.algo.ts:126","pc":[592]},{"teal":570,"source":"contracts\\Moderator.algo.ts:104","pc":[593,594]},{"teal":573,"source":"contracts\\Moderator.algo.ts:104","pc":[595,596]},{"teal":574,"source":"contracts\\Moderator.algo.ts:104","pc":[597]},{"teal":579,"source":"contracts\\Moderator.algo.ts:130","pc":[598,599]},{"teal":580,"source":"contracts\\Moderator.algo.ts:130","pc":[600]},{"teal":581,"source":"contracts\\Moderator.algo.ts:130","pc":[601]},{"teal":582,"source":"contracts\\Moderator.algo.ts:130","pc":[602]},{"teal":583,"source":"contracts\\Moderator.algo.ts:130","pc":[603,604]},{"teal":584,"source":"contracts\\Moderator.algo.ts:130","pc":[605]},{"teal":585,"source":"contracts\\Moderator.algo.ts:130","pc":[606]},{"teal":588,"source":"contracts\\Moderator.algo.ts:130","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[607]},{"teal":591,"source":"contracts\\Moderator.algo.ts:130","pc":[608,609,610]},{"teal":592,"source":"contracts\\Moderator.algo.ts:130","pc":[611]},{"teal":593,"source":"contracts\\Moderator.algo.ts:130","pc":[612]},{"teal":594,"source":"contracts\\Moderator.algo.ts:130","pc":[613]},{"teal":595,"source":"contracts\\Moderator.algo.ts:130","pc":[614]},{"teal":598,"source":"contracts\\Moderator.algo.ts:130","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[615]},{"teal":601,"source":"contracts\\Moderator.algo.ts:130","pc":[616,617,618]},{"teal":602,"source":"contracts\\Moderator.algo.ts:130","pc":[619]},{"teal":603,"source":"contracts\\Moderator.algo.ts:130","pc":[620]},{"teal":607,"source":"contracts\\Moderator.algo.ts:130","pc":[621,622,623]},{"teal":612,"source":"contracts\\Moderator.algo.ts:131","pc":[624,625]},{"teal":613,"source":"contracts\\Moderator.algo.ts:131","pc":[626,627,628]},{"teal":614,"source":"contracts\\Moderator.algo.ts:131","pc":[629,630]},{"teal":615,"source":"contracts\\Moderator.algo.ts:131","pc":[631]},{"teal":616,"source":"contracts\\Moderator.algo.ts:131","pc":[632]},{"teal":619,"source":"contracts\\Moderator.algo.ts:131","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[633]},{"teal":628,"source":"contracts\\Moderator.algo.ts:132","pc":[634,635]},{"teal":629,"source":"contracts\\Moderator.algo.ts:133","pc":[636,637]},{"teal":630,"source":"contracts\\Moderator.algo.ts:133","pc":[638,639]},{"teal":631,"source":"contracts\\Moderator.algo.ts:133","pc":[640]},{"teal":634,"source":"contracts\\Moderator.algo.ts:133","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[641]},{"teal":637,"source":"contracts\\Moderator.algo.ts:132","pc":[642,643]},{"teal":638,"source":"contracts\\Moderator.algo.ts:134","pc":[644,645]},{"teal":639,"source":"contracts\\Moderator.algo.ts:134","pc":[646,647]},{"teal":640,"source":"contracts\\Moderator.algo.ts:134","pc":[648]},{"teal":643,"source":"contracts\\Moderator.algo.ts:134","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[649]},{"teal":646,"source":"contracts\\Moderator.algo.ts:132","pc":[650,651]},{"teal":647,"source":"contracts\\Moderator.algo.ts:135","pc":[652,653]},{"teal":648,"source":"contracts\\Moderator.algo.ts:135","pc":[654,655]},{"teal":649,"source":"contracts\\Moderator.algo.ts:135","pc":[656]},{"teal":652,"source":"contracts\\Moderator.algo.ts:135","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[657]},{"teal":656,"source":"contracts\\Moderator.algo.ts:138","pc":[658]},{"teal":657,"source":"contracts\\Moderator.algo.ts:138","pc":[659]},{"teal":658,"source":"contracts\\Moderator.algo.ts:138","pc":[660]},{"teal":659,"source":"contracts\\Moderator.algo.ts:138","pc":[661]},{"teal":663,"source":"contracts\\Moderator.algo.ts:139","pc":[662]},{"teal":664,"source":"contracts\\Moderator.algo.ts:139","pc":[663,664]},{"teal":665,"source":"contracts\\Moderator.algo.ts:139","pc":[665]},{"teal":666,"source":"contracts\\Moderator.algo.ts:130","pc":[666]},{"teal":671,"source":"contracts\\Moderator.algo.ts:143","pc":[667]},{"teal":674,"source":"contracts\\Moderator.algo.ts:143","pc":[668,669,670]},{"teal":675,"source":"contracts\\Moderator.algo.ts:143","pc":[671]},{"teal":676,"source":"contracts\\Moderator.algo.ts:143","pc":[672]},{"teal":677,"source":"contracts\\Moderator.algo.ts:143","pc":[673]},{"teal":678,"source":"contracts\\Moderator.algo.ts:143","pc":[674]},{"teal":682,"source":"contracts\\Moderator.algo.ts:143","pc":[675,676,677]},{"teal":686,"source":"contracts\\Moderator.algo.ts:144","pc":[678]},{"teal":687,"source":"contracts\\Moderator.algo.ts:144","pc":[679]},{"teal":688,"source":"contracts\\Moderator.algo.ts:144","pc":[680]},{"teal":689,"source":"contracts\\Moderator.algo.ts:144","pc":[681]},{"teal":690,"source":"contracts\\Moderator.algo.ts:144","pc":[682]},{"teal":694,"source":"contracts\\Moderator.algo.ts:145","pc":[683]},{"teal":695,"source":"contracts\\Moderator.algo.ts:145","pc":[684]},{"teal":698,"source":"contracts\\Moderator.algo.ts:145","errorMessage":"box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value","pc":[685]},{"teal":699,"source":"contracts\\Moderator.algo.ts:143","pc":[686]},{"teal":704,"source":"contracts\\Moderator.algo.ts:149","pc":[687]},{"teal":707,"source":"contracts\\Moderator.algo.ts:149","pc":[688,689,690]},{"teal":708,"source":"contracts\\Moderator.algo.ts:149","pc":[691]},{"teal":709,"source":"contracts\\Moderator.algo.ts:149","pc":[692]},{"teal":710,"source":"contracts\\Moderator.algo.ts:149","pc":[693]},{"teal":711,"source":"contracts\\Moderator.algo.ts:149","pc":[694]},{"teal":714,"source":"contracts\\Moderator.algo.ts:149","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[695]},{"teal":717,"source":"contracts\\Moderator.algo.ts:149","pc":[696,697,698]},{"teal":718,"source":"contracts\\Moderator.algo.ts:149","pc":[699]},{"teal":719,"source":"contracts\\Moderator.algo.ts:149","pc":[700]},{"teal":720,"source":"contracts\\Moderator.algo.ts:149","pc":[701]},{"teal":721,"source":"contracts\\Moderator.algo.ts:149","pc":[702]},{"teal":722,"source":"contracts\\Moderator.algo.ts:149","pc":[703]},{"teal":726,"source":"contracts\\Moderator.algo.ts:149","pc":[704,705,706]},{"teal":729,"source":"contracts\\Moderator.algo.ts:149","pc":[707]},{"teal":730,"source":"contracts\\Moderator.algo.ts:149","pc":[708]},{"teal":734,"source":"contracts\\Moderator.algo.ts:150","pc":[709]},{"teal":735,"source":"contracts\\Moderator.algo.ts:150","pc":[710]},{"teal":736,"source":"contracts\\Moderator.algo.ts:150","pc":[711]},{"teal":737,"source":"contracts\\Moderator.algo.ts:150","pc":[712]},{"teal":738,"source":"contracts\\Moderator.algo.ts:150","pc":[713]},{"teal":746,"source":"contracts\\Moderator.algo.ts:151","pc":[714]},{"teal":747,"source":"contracts\\Moderator.algo.ts:151","pc":[715]},{"teal":748,"source":"contracts\\Moderator.algo.ts:151","pc":[716]},{"teal":749,"source":"contracts\\Moderator.algo.ts:151","pc":[717]},{"teal":750,"source":"contracts\\Moderator.algo.ts:154","pc":[718]},{"teal":751,"source":"contracts\\Moderator.algo.ts:151","pc":[719]},{"teal":752,"source":"contracts\\Moderator.algo.ts:151","pc":[720]},{"teal":753,"source":"contracts\\Moderator.algo.ts:151","pc":[721]},{"teal":754,"source":"contracts\\Moderator.algo.ts:151","pc":[722]},{"teal":755,"source":"contracts\\Moderator.algo.ts:155","pc":[723]},{"teal":756,"source":"contracts\\Moderator.algo.ts:154","pc":[724]},{"teal":757,"source":"contracts\\Moderator.algo.ts:151","pc":[725]},{"teal":758,"source":"contracts\\Moderator.algo.ts:151","pc":[726,727]},{"teal":759,"source":"contracts\\Moderator.algo.ts:151","pc":[728]},{"teal":760,"source":"contracts\\Moderator.algo.ts:151","pc":[729]},{"teal":761,"source":"contracts\\Moderator.algo.ts:156","pc":[730]},{"teal":762,"source":"contracts\\Moderator.algo.ts:155","pc":[731]},{"teal":763,"source":"contracts\\Moderator.algo.ts:151","pc":[732]},{"teal":764,"source":"contracts\\Moderator.algo.ts:151","pc":[733,734]},{"teal":765,"source":"contracts\\Moderator.algo.ts:151","pc":[735]},{"teal":766,"source":"contracts\\Moderator.algo.ts:151","pc":[736]},{"teal":767,"source":"contracts\\Moderator.algo.ts:157","pc":[737]},{"teal":768,"source":"contracts\\Moderator.algo.ts:156","pc":[738]},{"teal":769,"source":"contracts\\Moderator.algo.ts:153","pc":[739,740]},{"teal":777,"source":"contracts\\Moderator.algo.ts:160","pc":[741,742]},{"teal":778,"source":"contracts\\Moderator.algo.ts:160","pc":[743,744,745]},{"teal":779,"source":"contracts\\Moderator.algo.ts:160","pc":[746]},{"teal":780,"source":"contracts\\Moderator.algo.ts:161","pc":[747,748]},{"teal":781,"source":"contracts\\Moderator.algo.ts:161","pc":[749,750,751]},{"teal":782,"source":"contracts\\Moderator.algo.ts:161","pc":[752]},{"teal":783,"source":"contracts\\Moderator.algo.ts:160","pc":[753]},{"teal":784,"source":"contracts\\Moderator.algo.ts:162","pc":[754,755]},{"teal":785,"source":"contracts\\Moderator.algo.ts:162","pc":[756,757,758]},{"teal":786,"source":"contracts\\Moderator.algo.ts:162","pc":[759]},{"teal":787,"source":"contracts\\Moderator.algo.ts:161","pc":[760]},{"teal":788,"source":"contracts\\Moderator.algo.ts:163","pc":[761,762]},{"teal":789,"source":"contracts\\Moderator.algo.ts:163","pc":[763,764,765]},{"teal":790,"source":"contracts\\Moderator.algo.ts:163","pc":[766]},{"teal":791,"source":"contracts\\Moderator.algo.ts:162","pc":[767]},{"teal":792,"source":"contracts\\Moderator.algo.ts:159","pc":[768,769]},{"teal":797,"source":"contracts\\Moderator.algo.ts:165","pc":[770,771]},{"teal":798,"source":"contracts\\Moderator.algo.ts:165","pc":[772,773]},{"teal":799,"source":"contracts\\Moderator.algo.ts:165","pc":[774]},{"teal":800,"source":"contracts\\Moderator.algo.ts:165","pc":[775,776,777]},{"teal":805,"source":"contracts\\Moderator.algo.ts:166","pc":[778]},{"teal":806,"source":"contracts\\Moderator.algo.ts:166","pc":[779,780,781]},{"teal":811,"source":"contracts\\Moderator.algo.ts:169","pc":[782,783]},{"teal":812,"source":"contracts\\Moderator.algo.ts:169","pc":[784,785]},{"teal":813,"source":"contracts\\Moderator.algo.ts:169","pc":[786]},{"teal":817,"source":"contracts\\Moderator.algo.ts:149","pc":[787,788]},{"teal":820,"source":"contracts\\Moderator.algo.ts:149","pc":[789,790]},{"teal":821,"source":"contracts\\Moderator.algo.ts:149","pc":[791]},{"teal":826,"source":"contracts\\Moderator.algo.ts:173","pc":[792,793,794]},{"teal":827,"source":"contracts\\Moderator.algo.ts:173","pc":[795]},{"teal":828,"source":"contracts\\Moderator.algo.ts:173","pc":[796]},{"teal":829,"source":"contracts\\Moderator.algo.ts:173","pc":[797]},{"teal":830,"source":"contracts\\Moderator.algo.ts:173","pc":[798]},{"teal":833,"source":"contracts\\Moderator.algo.ts:173","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[799]},{"teal":836,"source":"contracts\\Moderator.algo.ts:173","pc":[800,801,802]},{"teal":837,"source":"contracts\\Moderator.algo.ts:173","pc":[803]},{"teal":838,"source":"contracts\\Moderator.algo.ts:173","pc":[804]},{"teal":842,"source":"contracts\\Moderator.algo.ts:173","pc":[805,806,807]},{"teal":847,"source":"contracts\\Moderator.algo.ts:174","pc":[808,809]},{"teal":848,"source":"contracts\\Moderator.algo.ts:174","pc":[810,811,812]},{"teal":849,"source":"contracts\\Moderator.algo.ts:174","pc":[813,814]},{"teal":850,"source":"contracts\\Moderator.algo.ts:174","pc":[815]},{"teal":851,"source":"contracts\\Moderator.algo.ts:174","pc":[816]},{"teal":854,"source":"contracts\\Moderator.algo.ts:174","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[817]},{"teal":858,"source":"contracts\\Moderator.algo.ts:175","pc":[818]},{"teal":859,"source":"contracts\\Moderator.algo.ts:175","pc":[819,820]},{"teal":860,"source":"contracts\\Moderator.algo.ts:175","pc":[821]},{"teal":861,"source":"contracts\\Moderator.algo.ts:173","pc":[822]},{"teal":866,"source":"contracts\\Moderator.algo.ts:179","pc":[823]},{"teal":869,"source":"contracts\\Moderator.algo.ts:179","pc":[824,825,826]},{"teal":870,"source":"contracts\\Moderator.algo.ts:179","pc":[827]},{"teal":871,"source":"contracts\\Moderator.algo.ts:179","pc":[828]},{"teal":872,"source":"contracts\\Moderator.algo.ts:179","pc":[829]},{"teal":873,"source":"contracts\\Moderator.algo.ts:179","pc":[830]},{"teal":876,"source":"contracts\\Moderator.algo.ts:179","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[831]},{"teal":879,"source":"contracts\\Moderator.algo.ts:179","pc":[832,833,834]},{"teal":880,"source":"contracts\\Moderator.algo.ts:179","pc":[835]},{"teal":881,"source":"contracts\\Moderator.algo.ts:179","pc":[836]},{"teal":882,"source":"contracts\\Moderator.algo.ts:179","pc":[837]},{"teal":883,"source":"contracts\\Moderator.algo.ts:179","pc":[838,839,840]},{"teal":884,"source":"contracts\\Moderator.algo.ts:179","pc":[841]},{"teal":885,"source":"contracts\\Moderator.algo.ts:179","pc":[842]},{"teal":886,"source":"contracts\\Moderator.algo.ts:179","pc":[843]},{"teal":887,"source":"contracts\\Moderator.algo.ts:179","pc":[844]},{"teal":888,"source":"contracts\\Moderator.algo.ts:179","pc":[845]},{"teal":889,"source":"contracts\\Moderator.algo.ts:179","pc":[846]},{"teal":893,"source":"contracts\\Moderator.algo.ts:179","pc":[847,848,849]},{"teal":901,"source":"contracts\\Moderator.algo.ts:182","pc":[850,851]},{"teal":902,"source":"contracts\\Moderator.algo.ts:182","pc":[852,853,854]},{"teal":903,"source":"contracts\\Moderator.algo.ts:182","pc":[855]},{"teal":904,"source":"contracts\\Moderator.algo.ts:180","pc":[856]},{"teal":905,"source":"contracts\\Moderator.algo.ts:180","pc":[857]},{"teal":906,"source":"contracts\\Moderator.algo.ts:180","pc":[858]},{"teal":907,"source":"contracts\\Moderator.algo.ts:180","pc":[859]},{"teal":908,"source":"contracts\\Moderator.algo.ts:182","pc":[860]},{"teal":909,"source":"contracts\\Moderator.algo.ts:182","pc":[861]},{"teal":910,"source":"contracts\\Moderator.algo.ts:182","pc":[862]},{"teal":911,"source":"contracts\\Moderator.algo.ts:182","pc":[863,864,865]},{"teal":912,"source":"contracts\\Moderator.algo.ts:183","pc":[866,867]},{"teal":913,"source":"contracts\\Moderator.algo.ts:183","pc":[868,869,870]},{"teal":914,"source":"contracts\\Moderator.algo.ts:183","pc":[871]},{"teal":915,"source":"contracts\\Moderator.algo.ts:180","pc":[872]},{"teal":916,"source":"contracts\\Moderator.algo.ts:180","pc":[873,874]},{"teal":917,"source":"contracts\\Moderator.algo.ts:180","pc":[875]},{"teal":918,"source":"contracts\\Moderator.algo.ts:180","pc":[876]},{"teal":919,"source":"contracts\\Moderator.algo.ts:183","pc":[877]},{"teal":920,"source":"contracts\\Moderator.algo.ts:183","pc":[878]},{"teal":921,"source":"contracts\\Moderator.algo.ts:182","pc":[879]},{"teal":924,"source":"contracts\\Moderator.algo.ts:183","pc":[880]},{"teal":925,"source":"contracts\\Moderator.algo.ts:183","pc":[881,882,883]},{"teal":926,"source":"contracts\\Moderator.algo.ts:184","pc":[884,885]},{"teal":927,"source":"contracts\\Moderator.algo.ts:184","pc":[886,887,888]},{"teal":928,"source":"contracts\\Moderator.algo.ts:184","pc":[889]},{"teal":929,"source":"contracts\\Moderator.algo.ts:180","pc":[890]},{"teal":930,"source":"contracts\\Moderator.algo.ts:180","pc":[891]},{"teal":931,"source":"contracts\\Moderator.algo.ts:180","pc":[892]},{"teal":932,"source":"contracts\\Moderator.algo.ts:180","pc":[893]},{"teal":933,"source":"contracts\\Moderator.algo.ts:184","pc":[894]},{"teal":934,"source":"contracts\\Moderator.algo.ts:184","pc":[895]},{"teal":935,"source":"contracts\\Moderator.algo.ts:183","pc":[896]},{"teal":938,"source":"contracts\\Moderator.algo.ts:184","pc":[897]},{"teal":939,"source":"contracts\\Moderator.algo.ts:184","pc":[898,899,900]},{"teal":940,"source":"contracts\\Moderator.algo.ts:185","pc":[901,902]},{"teal":941,"source":"contracts\\Moderator.algo.ts:185","pc":[903,904,905]},{"teal":942,"source":"contracts\\Moderator.algo.ts:185","pc":[906]},{"teal":943,"source":"contracts\\Moderator.algo.ts:180","pc":[907]},{"teal":944,"source":"contracts\\Moderator.algo.ts:180","pc":[908,909]},{"teal":945,"source":"contracts\\Moderator.algo.ts:180","pc":[910]},{"teal":946,"source":"contracts\\Moderator.algo.ts:180","pc":[911]},{"teal":947,"source":"contracts\\Moderator.algo.ts:185","pc":[912]},{"teal":948,"source":"contracts\\Moderator.algo.ts:185","pc":[913]},{"teal":949,"source":"contracts\\Moderator.algo.ts:184","pc":[914]},{"teal":952,"source":"contracts\\Moderator.algo.ts:181","pc":[915,916,917]},{"teal":957,"source":"contracts\\Moderator.algo.ts:187","pc":[918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968]},{"teal":958,"source":"contracts\\Moderator.algo.ts:187","pc":[969]},{"teal":963,"source":"contracts\\Moderator.algo.ts:189","pc":[970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002]},{"teal":964,"source":"contracts\\Moderator.algo.ts:179","pc":[1003]},{"teal":969,"source":"contracts\\Moderator.algo.ts:193","pc":[1004,1005,1006]},{"teal":972,"source":"contracts\\Moderator.algo.ts:193","pc":[1007,1008,1009]},{"teal":973,"source":"contracts\\Moderator.algo.ts:193","pc":[1010]},{"teal":974,"source":"contracts\\Moderator.algo.ts:193","pc":[1011]},{"teal":975,"source":"contracts\\Moderator.algo.ts:193","pc":[1012]},{"teal":976,"source":"contracts\\Moderator.algo.ts:193","pc":[1013]},{"teal":979,"source":"contracts\\Moderator.algo.ts:193","errorMessage":"argument 1 (Address) for storeModelParams must be a address","pc":[1014]},{"teal":982,"source":"contracts\\Moderator.algo.ts:193","pc":[1015,1016]},{"teal":983,"source":"contracts\\Moderator.algo.ts:193","pc":[1017]},{"teal":984,"source":"contracts\\Moderator.algo.ts:193","pc":[1018]},{"teal":985,"source":"contracts\\Moderator.algo.ts:193","pc":[1019]},{"teal":986,"source":"contracts\\Moderator.algo.ts:193","pc":[1020,1021]},{"teal":987,"source":"contracts\\Moderator.algo.ts:193","pc":[1022]},{"teal":988,"source":"contracts\\Moderator.algo.ts:193","pc":[1023]},{"teal":991,"source":"contracts\\Moderator.algo.ts:193","errorMessage":"argument 2 (mbrPay) for storeModelParams must be a pay transaction","pc":[1024]},{"teal":994,"source":"contracts\\Moderator.algo.ts:193","pc":[1025,1026,1027]},{"teal":995,"source":"contracts\\Moderator.algo.ts:193","pc":[1028]},{"teal":996,"source":"contracts\\Moderator.algo.ts:193","pc":[1029]},{"teal":1000,"source":"contracts\\Moderator.algo.ts:193","pc":[1030,1031,1032]},{"teal":1005,"source":"contracts\\Moderator.algo.ts:194","pc":[1033,1034]},{"teal":1006,"source":"contracts\\Moderator.algo.ts:194","pc":[1035]},{"teal":1007,"source":"contracts\\Moderator.algo.ts:194","pc":[1036]},{"teal":1008,"source":"contracts\\Moderator.algo.ts:194","pc":[1037]},{"teal":1009,"source":"contracts\\Moderator.algo.ts:194","pc":[1038,1039,1040]},{"teal":1015,"source":"contracts\\Moderator.algo.ts:195","pc":[1041,1042]},{"teal":1016,"source":"contracts\\Moderator.algo.ts:195","pc":[1043,1044]},{"teal":1017,"source":"contracts\\Moderator.algo.ts:195","pc":[1045]},{"teal":1020,"source":"contracts\\Moderator.algo.ts:195","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1046]},{"teal":1029,"source":"contracts\\Moderator.algo.ts:196","pc":[1047,1048]},{"teal":1030,"source":"contracts\\Moderator.algo.ts:197","pc":[1049,1050]},{"teal":1031,"source":"contracts\\Moderator.algo.ts:197","pc":[1051,1052]},{"teal":1032,"source":"contracts\\Moderator.algo.ts:197","pc":[1053]},{"teal":1035,"source":"contracts\\Moderator.algo.ts:197","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1054]},{"teal":1038,"source":"contracts\\Moderator.algo.ts:196","pc":[1055,1056]},{"teal":1039,"source":"contracts\\Moderator.algo.ts:198","pc":[1057,1058]},{"teal":1040,"source":"contracts\\Moderator.algo.ts:198","pc":[1059,1060]},{"teal":1041,"source":"contracts\\Moderator.algo.ts:198","pc":[1061]},{"teal":1044,"source":"contracts\\Moderator.algo.ts:198","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1062]},{"teal":1047,"source":"contracts\\Moderator.algo.ts:196","pc":[1063,1064]},{"teal":1048,"source":"contracts\\Moderator.algo.ts:199","pc":[1065,1066]},{"teal":1049,"source":"contracts\\Moderator.algo.ts:199","pc":[1067,1068]},{"teal":1050,"source":"contracts\\Moderator.algo.ts:199","pc":[1069]},{"teal":1053,"source":"contracts\\Moderator.algo.ts:199","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[1070]},{"teal":1057,"source":"contracts\\Moderator.algo.ts:202","pc":[1071,1072]},{"teal":1058,"source":"contracts\\Moderator.algo.ts:202","pc":[1073]},{"teal":1059,"source":"contracts\\Moderator.algo.ts:202","pc":[1074]},{"teal":1060,"source":"contracts\\Moderator.algo.ts:202","pc":[1075]},{"teal":1061,"source":"contracts\\Moderator.algo.ts:202","pc":[1076,1077]},{"teal":1062,"source":"contracts\\Moderator.algo.ts:202","pc":[1078]},{"teal":1063,"source":"contracts\\Moderator.algo.ts:194","pc":[1079,1080,1081]},{"teal":1069,"source":"contracts\\Moderator.algo.ts:204","pc":[1082,1083]},{"teal":1070,"source":"contracts\\Moderator.algo.ts:204","pc":[1084,1085]},{"teal":1071,"source":"contracts\\Moderator.algo.ts:204","pc":[1086]},{"teal":1074,"source":"contracts\\Moderator.algo.ts:204","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1087]},{"teal":1083,"source":"contracts\\Moderator.algo.ts:205","pc":[1088,1089]},{"teal":1084,"source":"contracts\\Moderator.algo.ts:206","pc":[1090,1091]},{"teal":1085,"source":"contracts\\Moderator.algo.ts:206","pc":[1092,1093]},{"teal":1086,"source":"contracts\\Moderator.algo.ts:206","pc":[1094]},{"teal":1089,"source":"contracts\\Moderator.algo.ts:206","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[1095]},{"teal":1092,"source":"contracts\\Moderator.algo.ts:205","pc":[1096,1097]},{"teal":1093,"source":"contracts\\Moderator.algo.ts:207","pc":[1098,1099]},{"teal":1094,"source":"contracts\\Moderator.algo.ts:207","pc":[1100,1101]},{"teal":1095,"source":"contracts\\Moderator.algo.ts:207","pc":[1102]},{"teal":1098,"source":"contracts\\Moderator.algo.ts:207","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[1103]},{"teal":1101,"source":"contracts\\Moderator.algo.ts:205","pc":[1104,1105]},{"teal":1102,"source":"contracts\\Moderator.algo.ts:208","pc":[1106,1107]},{"teal":1103,"source":"contracts\\Moderator.algo.ts:208","pc":[1108,1109]},{"teal":1104,"source":"contracts\\Moderator.algo.ts:208","pc":[1110]},{"teal":1107,"source":"contracts\\Moderator.algo.ts:208","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[1111]},{"teal":1111,"source":"contracts\\Moderator.algo.ts:211","pc":[1112,1113]},{"teal":1112,"source":"contracts\\Moderator.algo.ts:211","pc":[1114]},{"teal":1113,"source":"contracts\\Moderator.algo.ts:211","pc":[1115]},{"teal":1114,"source":"contracts\\Moderator.algo.ts:211","pc":[1116]},{"teal":1118,"source":"contracts\\Moderator.algo.ts:212","pc":[1117,1118]},{"teal":1119,"source":"contracts\\Moderator.algo.ts:212","pc":[1119]},{"teal":1120,"source":"contracts\\Moderator.algo.ts:212","pc":[1120]},{"teal":1121,"source":"contracts\\Moderator.algo.ts:212","pc":[1121]},{"teal":1122,"source":"contracts\\Moderator.algo.ts:212","pc":[1122,1123]},{"teal":1123,"source":"contracts\\Moderator.algo.ts:212","pc":[1124]},{"teal":1126,"source":"contracts\\Moderator.algo.ts:193","pc":[1125]},{"teal":1131,"source":"contracts\\Moderator.algo.ts:217","pc":[1126]},{"teal":1134,"source":"contracts\\Moderator.algo.ts:217","pc":[1127,1128,1129]},{"teal":1135,"source":"contracts\\Moderator.algo.ts:217","pc":[1130]},{"teal":1136,"source":"contracts\\Moderator.algo.ts:217","pc":[1131]},{"teal":1137,"source":"contracts\\Moderator.algo.ts:217","pc":[1132]},{"teal":1138,"source":"contracts\\Moderator.algo.ts:217","pc":[1133]},{"teal":1141,"source":"contracts\\Moderator.algo.ts:217","errorMessage":"argument 0 (Address) for getBoxValue must be a address","pc":[1134]},{"teal":1144,"source":"contracts\\Moderator.algo.ts:217","pc":[1135,1136,1137]},{"teal":1145,"source":"contracts\\Moderator.algo.ts:217","pc":[1138]},{"teal":1146,"source":"contracts\\Moderator.algo.ts:217","pc":[1139]},{"teal":1147,"source":"contracts\\Moderator.algo.ts:217","pc":[1140]},{"teal":1148,"source":"contracts\\Moderator.algo.ts:217","pc":[1141]},{"teal":1152,"source":"contracts\\Moderator.algo.ts:217","pc":[1142,1143,1144]},{"teal":1157,"source":"contracts\\Moderator.algo.ts:218","pc":[1145,1146]},{"teal":1158,"source":"contracts\\Moderator.algo.ts:218","pc":[1147,1148,1149]},{"teal":1159,"source":"contracts\\Moderator.algo.ts:218","pc":[1150,1151]},{"teal":1160,"source":"contracts\\Moderator.algo.ts:218","pc":[1152]},{"teal":1161,"source":"contracts\\Moderator.algo.ts:218","pc":[1153]},{"teal":1164,"source":"contracts\\Moderator.algo.ts:218","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[1154]},{"teal":1168,"source":"contracts\\Moderator.algo.ts:219","pc":[1155,1156]},{"teal":1169,"source":"contracts\\Moderator.algo.ts:219","pc":[1157]},{"teal":1170,"source":"contracts\\Moderator.algo.ts:219","pc":[1158]},{"teal":1171,"source":"contracts\\Moderator.algo.ts:219","pc":[1159]},{"teal":1172,"source":"contracts\\Moderator.algo.ts:219","pc":[1160]},{"teal":1176,"source":"contracts\\Moderator.algo.ts:220","pc":[1161,1162]},{"teal":1177,"source":"contracts\\Moderator.algo.ts:220","pc":[1163]},{"teal":1180,"source":"contracts\\Moderator.algo.ts:220","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[1164]},{"teal":1181,"source":"contracts\\Moderator.algo.ts:217","pc":[1165]},{"teal":1186,"source":"contracts\\Moderator.algo.ts:224","pc":[1166]},{"teal":1189,"source":"contracts\\Moderator.algo.ts:224","pc":[1167,1168,1169]},{"teal":1190,"source":"contracts\\Moderator.algo.ts:224","pc":[1170]},{"teal":1191,"source":"contracts\\Moderator.algo.ts:224","pc":[1171]},{"teal":1192,"source":"contracts\\Moderator.algo.ts:224","pc":[1172]},{"teal":1193,"source":"contracts\\Moderator.algo.ts:224","pc":[1173]},{"teal":1196,"source":"contracts\\Moderator.algo.ts:224","errorMessage":"argument 0 (contributor) for distributeRewards must be a (uint64)","pc":[1174]},{"teal":1199,"source":"contracts\\Moderator.algo.ts:224","pc":[1175,1176,1177]},{"teal":1200,"source":"contracts\\Moderator.algo.ts:224","pc":[1178]},{"teal":1201,"source":"contracts\\Moderator.algo.ts:224","pc":[1179]},{"teal":1202,"source":"contracts\\Moderator.algo.ts:224","pc":[1180]},{"teal":1203,"source":"contracts\\Moderator.algo.ts:224","pc":[1181]},{"teal":1204,"source":"contracts\\Moderator.algo.ts:224","pc":[1182]},{"teal":1205,"source":"contracts\\Moderator.algo.ts:224","pc":[1183,1184,1185]},{"teal":1206,"source":"contracts\\Moderator.algo.ts:224","pc":[1186]},{"teal":1207,"source":"contracts\\Moderator.algo.ts:224","pc":[1187]},{"teal":1208,"source":"contracts\\Moderator.algo.ts:224","pc":[1188]},{"teal":1209,"source":"contracts\\Moderator.algo.ts:224","pc":[1189]},{"teal":1210,"source":"contracts\\Moderator.algo.ts:224","pc":[1190]},{"teal":1211,"source":"contracts\\Moderator.algo.ts:224","pc":[1191]},{"teal":1215,"source":"contracts\\Moderator.algo.ts:224","pc":[1192,1193,1194]},{"teal":1218,"source":"contracts\\Moderator.algo.ts:224","pc":[1195]},{"teal":1219,"source":"contracts\\Moderator.algo.ts:224","pc":[1196,1197]},{"teal":1223,"source":"contracts\\Moderator.algo.ts:226","pc":[1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223]},{"teal":1224,"source":"contracts\\Moderator.algo.ts:226","pc":[1224,1225]},{"teal":1228,"source":"contracts\\Moderator.algo.ts:228","pc":[1226]},{"teal":1229,"source":"contracts\\Moderator.algo.ts:228","pc":[1227,1228]},{"teal":1233,"source":"contracts\\Moderator.algo.ts:225","pc":[1229]},{"teal":1234,"source":"contracts\\Moderator.algo.ts:225","pc":[1230]},{"teal":1235,"source":"contracts\\Moderator.algo.ts:225","pc":[1231]},{"teal":1236,"source":"contracts\\Moderator.algo.ts:225","pc":[1232]},{"teal":1237,"source":"contracts\\Moderator.algo.ts:230","pc":[1233]},{"teal":1238,"source":"contracts\\Moderator.algo.ts:225","pc":[1234]},{"teal":1239,"source":"contracts\\Moderator.algo.ts:225","pc":[1235]},{"teal":1240,"source":"contracts\\Moderator.algo.ts:225","pc":[1236]},{"teal":1241,"source":"contracts\\Moderator.algo.ts:225","pc":[1237]},{"teal":1242,"source":"contracts\\Moderator.algo.ts:230","pc":[1238]},{"teal":1243,"source":"contracts\\Moderator.algo.ts:230","pc":[1239]},{"teal":1244,"source":"contracts\\Moderator.algo.ts:225","pc":[1240]},{"teal":1245,"source":"contracts\\Moderator.algo.ts:225","pc":[1241,1242]},{"teal":1246,"source":"contracts\\Moderator.algo.ts:225","pc":[1243]},{"teal":1247,"source":"contracts\\Moderator.algo.ts:225","pc":[1244]},{"teal":1248,"source":"contracts\\Moderator.algo.ts:230","pc":[1245]},{"teal":1249,"source":"contracts\\Moderator.algo.ts:230","pc":[1246]},{"teal":1250,"source":"contracts\\Moderator.algo.ts:225","pc":[1247]},{"teal":1251,"source":"contracts\\Moderator.algo.ts:225","pc":[1248,1249]},{"teal":1252,"source":"contracts\\Moderator.algo.ts:225","pc":[1250]},{"teal":1253,"source":"contracts\\Moderator.algo.ts:225","pc":[1251]},{"teal":1254,"source":"contracts\\Moderator.algo.ts:230","pc":[1252]},{"teal":1255,"source":"contracts\\Moderator.algo.ts:230","pc":[1253]},{"teal":1256,"source":"contracts\\Moderator.algo.ts:230","pc":[1254,1255]},{"teal":1260,"source":"contracts\\Moderator.algo.ts:231","pc":[1256]},{"teal":1261,"source":"contracts\\Moderator.algo.ts:231","pc":[1257,1258]},{"teal":1265,"source":"contracts\\Moderator.algo.ts:232","pc":[1259]},{"teal":1266,"source":"contracts\\Moderator.algo.ts:232","pc":[1260,1261]},{"teal":1271,"source":"contracts\\Moderator.algo.ts:234","pc":[1262,1263]},{"teal":1272,"source":"contracts\\Moderator.algo.ts:234","pc":[1264,1265,1266]},{"teal":1273,"source":"contracts\\Moderator.algo.ts:234","pc":[1267]},{"teal":1274,"source":"contracts\\Moderator.algo.ts:234","pc":[1268,1269]},{"teal":1275,"source":"contracts\\Moderator.algo.ts:234","pc":[1270]},{"teal":1276,"source":"contracts\\Moderator.algo.ts:234","pc":[1271,1272,1273]},{"teal":1281,"source":"contracts\\Moderator.algo.ts:235","pc":[1274,1275]},{"teal":1282,"source":"contracts\\Moderator.algo.ts:235","pc":[1276,1277,1278]},{"teal":1283,"source":"contracts\\Moderator.algo.ts:235","pc":[1279]},{"teal":1284,"source":"contracts\\Moderator.algo.ts:235","pc":[1280,1281]},{"teal":1285,"source":"contracts\\Moderator.algo.ts:235","pc":[1282]},{"teal":1286,"source":"contracts\\Moderator.algo.ts:235","pc":[1283,1284]},{"teal":1291,"source":"contracts\\Moderator.algo.ts:238","pc":[1285,1286]},{"teal":1292,"source":"contracts\\Moderator.algo.ts:238","pc":[1287]},{"teal":1293,"source":"contracts\\Moderator.algo.ts:238","pc":[1288,1289]},{"teal":1294,"source":"contracts\\Moderator.algo.ts:238","pc":[1290,1291,1292]},{"teal":1295,"source":"contracts\\Moderator.algo.ts:238","pc":[1293]},{"teal":1296,"source":"contracts\\Moderator.algo.ts:238","pc":[1294,1295]},{"teal":1297,"source":"contracts\\Moderator.algo.ts:238","pc":[1296]},{"teal":1298,"source":"contracts\\Moderator.algo.ts:238","pc":[1297,1298]},{"teal":1303,"source":"contracts\\Moderator.algo.ts:239","pc":[1299]},{"teal":1304,"source":"contracts\\Moderator.algo.ts:239","pc":[1300,1301]},{"teal":1305,"source":"contracts\\Moderator.algo.ts:239","pc":[1302,1303]},{"teal":1306,"source":"contracts\\Moderator.algo.ts:239","pc":[1304]},{"teal":1307,"source":"contracts\\Moderator.algo.ts:239","pc":[1305,1306]},{"teal":1308,"source":"contracts\\Moderator.algo.ts:239","pc":[1307]},{"teal":1309,"source":"contracts\\Moderator.algo.ts:239","pc":[1308]},{"teal":1310,"source":"contracts\\Moderator.algo.ts:239","pc":[1309,1310]},{"teal":1311,"source":"contracts\\Moderator.algo.ts:239","pc":[1311]},{"teal":1312,"source":"contracts\\Moderator.algo.ts:239","pc":[1312]},{"teal":1313,"source":"contracts\\Moderator.algo.ts:239","pc":[1313]},{"teal":1314,"source":"contracts\\Moderator.algo.ts:239","pc":[1314]},{"teal":1315,"source":"contracts\\Moderator.algo.ts:239","pc":[1315]},{"teal":1318,"source":"contracts\\Moderator.algo.ts:239","errorMessage":"wideRatio failed","pc":[1316]},{"teal":1319,"source":"contracts\\Moderator.algo.ts:239","pc":[1317,1318]},{"teal":1323,"source":"contracts\\Moderator.algo.ts:241","pc":[1319,1320]},{"teal":1324,"source":"contracts\\Moderator.algo.ts:241","pc":[1321,1322]},{"teal":1325,"source":"contracts\\Moderator.algo.ts:241","pc":[1323]},{"teal":1326,"source":"contracts\\Moderator.algo.ts:241","pc":[1324,1325]},{"teal":1330,"source":"contracts\\Moderator.algo.ts:243","pc":[1326,1327]},{"teal":1331,"source":"contracts\\Moderator.algo.ts:243","pc":[1328,1329]},{"teal":1332,"source":"contracts\\Moderator.algo.ts:243","pc":[1330]},{"teal":1333,"source":"contracts\\Moderator.algo.ts:243","pc":[1331,1332]},{"teal":1336,"source":"contracts\\Moderator.algo.ts:238","pc":[1333,1334]},{"teal":1337,"source":"contracts\\Moderator.algo.ts:238","pc":[1335]},{"teal":1338,"source":"contracts\\Moderator.algo.ts:238","pc":[1336]},{"teal":1339,"source":"contracts\\Moderator.algo.ts:238","pc":[1337]},{"teal":1340,"source":"contracts\\Moderator.algo.ts:238","pc":[1338,1339]},{"teal":1341,"source":"contracts\\Moderator.algo.ts:238","pc":[1340]},{"teal":1342,"source":"contracts\\Moderator.algo.ts:238","pc":[1341,1342,1343]},{"teal":1343,"source":"contracts\\Moderator.algo.ts:238","pc":[1344,1345]},{"teal":1344,"source":"contracts\\Moderator.algo.ts:238","pc":[1346,1347]},{"teal":1345,"source":"contracts\\Moderator.algo.ts:238","pc":[1348,1349]},{"teal":1346,"source":"contracts\\Moderator.algo.ts:238","pc":[1350]},{"teal":1347,"source":"contracts\\Moderator.algo.ts:238","pc":[1351]},{"teal":1348,"source":"contracts\\Moderator.algo.ts:238","pc":[1352]},{"teal":1349,"source":"contracts\\Moderator.algo.ts:238","pc":[1353,1354]},{"teal":1350,"source":"contracts\\Moderator.algo.ts:238","pc":[1355,1356,1357]},{"teal":1355,"source":"contracts\\Moderator.algo.ts:246","pc":[1358,1359]},{"teal":1356,"source":"contracts\\Moderator.algo.ts:246","pc":[1360]},{"teal":1357,"source":"contracts\\Moderator.algo.ts:246","pc":[1361,1362]},{"teal":1358,"source":"contracts\\Moderator.algo.ts:246","pc":[1363,1364,1365]},{"teal":1359,"source":"contracts\\Moderator.algo.ts:246","pc":[1366]},{"teal":1360,"source":"contracts\\Moderator.algo.ts:246","pc":[1367,1368]},{"teal":1361,"source":"contracts\\Moderator.algo.ts:246","pc":[1369]},{"teal":1362,"source":"contracts\\Moderator.algo.ts:246","pc":[1370,1371]},{"teal":1367,"source":"contracts\\Moderator.algo.ts:247","pc":[1372]},{"teal":1368,"source":"contracts\\Moderator.algo.ts:247","pc":[1373,1374]},{"teal":1369,"source":"contracts\\Moderator.algo.ts:247","pc":[1375,1376]},{"teal":1370,"source":"contracts\\Moderator.algo.ts:247","pc":[1377]},{"teal":1371,"source":"contracts\\Moderator.algo.ts:247","pc":[1378,1379]},{"teal":1372,"source":"contracts\\Moderator.algo.ts:247","pc":[1380]},{"teal":1373,"source":"contracts\\Moderator.algo.ts:247","pc":[1381]},{"teal":1374,"source":"contracts\\Moderator.algo.ts:247","pc":[1382,1383]},{"teal":1375,"source":"contracts\\Moderator.algo.ts:247","pc":[1384]},{"teal":1376,"source":"contracts\\Moderator.algo.ts:247","pc":[1385]},{"teal":1377,"source":"contracts\\Moderator.algo.ts:247","pc":[1386]},{"teal":1378,"source":"contracts\\Moderator.algo.ts:247","pc":[1387]},{"teal":1379,"source":"contracts\\Moderator.algo.ts:247","pc":[1388]},{"teal":1382,"source":"contracts\\Moderator.algo.ts:247","errorMessage":"wideRatio failed","pc":[1389]},{"teal":1383,"source":"contracts\\Moderator.algo.ts:247","pc":[1390,1391]},{"teal":1387,"source":"contracts\\Moderator.algo.ts:249","pc":[1392,1393]},{"teal":1388,"source":"contracts\\Moderator.algo.ts:249","pc":[1394,1395]},{"teal":1389,"source":"contracts\\Moderator.algo.ts:249","pc":[1396]},{"teal":1390,"source":"contracts\\Moderator.algo.ts:249","pc":[1397,1398]},{"teal":1394,"source":"contracts\\Moderator.algo.ts:251","pc":[1399]},{"teal":1395,"source":"contracts\\Moderator.algo.ts:251","pc":[1400,1401]},{"teal":1396,"source":"contracts\\Moderator.algo.ts:251","pc":[1402,1403,1404,1405,1406]},{"teal":1397,"source":"contracts\\Moderator.algo.ts:251","pc":[1407]},{"teal":1398,"source":"contracts\\Moderator.algo.ts:251","pc":[1408]},{"teal":1399,"source":"contracts\\Moderator.algo.ts:251","pc":[1409,1410]},{"teal":1400,"source":"contracts\\Moderator.algo.ts:251","pc":[1411]},{"teal":1401,"source":"contracts\\Moderator.algo.ts:251","pc":[1412]},{"teal":1402,"source":"contracts\\Moderator.algo.ts:251","pc":[1413]},{"teal":1403,"source":"contracts\\Moderator.algo.ts:251","pc":[1414]},{"teal":1404,"source":"contracts\\Moderator.algo.ts:251","pc":[1415]},{"teal":1407,"source":"contracts\\Moderator.algo.ts:251","errorMessage":"wideRatio failed","pc":[1416]},{"teal":1408,"source":"contracts\\Moderator.algo.ts:251","pc":[1417,1418]},{"teal":1412,"source":"contracts\\Moderator.algo.ts:253","pc":[1419,1420]},{"teal":1413,"source":"contracts\\Moderator.algo.ts:253","pc":[1421,1422]},{"teal":1414,"source":"contracts\\Moderator.algo.ts:253","pc":[1423]},{"teal":1415,"source":"contracts\\Moderator.algo.ts:253","pc":[1424]},{"teal":1416,"source":"contracts\\Moderator.algo.ts:253","pc":[1425,1426]},{"teal":1419,"source":"contracts\\Moderator.algo.ts:246","pc":[1427,1428]},{"teal":1420,"source":"contracts\\Moderator.algo.ts:246","pc":[1429]},{"teal":1421,"source":"contracts\\Moderator.algo.ts:246","pc":[1430]},{"teal":1422,"source":"contracts\\Moderator.algo.ts:246","pc":[1431]},{"teal":1423,"source":"contracts\\Moderator.algo.ts:246","pc":[1432,1433]},{"teal":1424,"source":"contracts\\Moderator.algo.ts:246","pc":[1434]},{"teal":1425,"source":"contracts\\Moderator.algo.ts:246","pc":[1435,1436,1437]},{"teal":1426,"source":"contracts\\Moderator.algo.ts:246","pc":[1438,1439]},{"teal":1427,"source":"contracts\\Moderator.algo.ts:246","pc":[1440,1441]},{"teal":1428,"source":"contracts\\Moderator.algo.ts:246","pc":[1442,1443]},{"teal":1429,"source":"contracts\\Moderator.algo.ts:246","pc":[1444]},{"teal":1430,"source":"contracts\\Moderator.algo.ts:246","pc":[1445]},{"teal":1431,"source":"contracts\\Moderator.algo.ts:246","pc":[1446]},{"teal":1432,"source":"contracts\\Moderator.algo.ts:246","pc":[1447,1448]},{"teal":1433,"source":"contracts\\Moderator.algo.ts:246","pc":[1449,1450,1451]},{"teal":1438,"source":"contracts\\Moderator.algo.ts:256","pc":[1452,1453]},{"teal":1441,"source":"contracts\\Moderator.algo.ts:224","pc":[1454,1455]},{"teal":1444,"source":"contracts\\Moderator.algo.ts:224","pc":[1456,1457]},{"teal":1445,"source":"contracts\\Moderator.algo.ts:224","pc":[1458]},{"teal":1450,"source":"contracts\\Moderator.algo.ts:260","pc":[1459,1460,1461]},{"teal":1451,"source":"contracts\\Moderator.algo.ts:260","pc":[1462]},{"teal":1452,"source":"contracts\\Moderator.algo.ts:260","pc":[1463]},{"teal":1456,"source":"contracts\\Moderator.algo.ts:260","pc":[1464,1465,1466]},{"teal":1460,"source":"contracts\\Moderator.algo.ts:261","pc":[1467,1468]},{"teal":1461,"source":"contracts\\Moderator.algo.ts:261","pc":[1469,1470,1471]},{"teal":1462,"source":"contracts\\Moderator.algo.ts:261","pc":[1472,1473]},{"teal":1463,"source":"contracts\\Moderator.algo.ts:261","pc":[1474]},{"teal":1464,"source":"contracts\\Moderator.algo.ts:261","pc":[1475]},{"teal":1465,"source":"contracts\\Moderator.algo.ts:261","pc":[1476]},{"teal":1471,"source":"contracts\\Moderator.algo.ts:262","pc":[1477]},{"teal":1472,"source":"contracts\\Moderator.algo.ts:262","pc":[1478]},{"teal":1473,"source":"contracts\\Moderator.algo.ts:262","pc":[1479,1480]},{"teal":1477,"source":"contracts\\Moderator.algo.ts:263","pc":[1481,1482]},{"teal":1478,"source":"contracts\\Moderator.algo.ts:263","pc":[1483,1484]},{"teal":1481,"source":"contracts\\Moderator.algo.ts:262","pc":[1485]},{"teal":1482,"source":"contracts\\Moderator.algo.ts:262","pc":[1486,1487]},{"teal":1485,"source":"contracts\\Moderator.algo.ts:262","pc":[1488]},{"teal":1486,"source":"contracts\\Moderator.algo.ts:260","pc":[1489]},{"teal":1489,"source":"contracts\\Moderator.algo.ts:35","pc":[1490,1491,1492,1493,1494,1495]},{"teal":1490,"source":"contracts\\Moderator.algo.ts:35","pc":[1496,1497,1498]},{"teal":1491,"source":"contracts\\Moderator.algo.ts:35","pc":[1499,1500,1501,1502]},{"teal":1494,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1503]},{"teal":1497,"source":"contracts\\Moderator.algo.ts:35","pc":[1504,1505,1506,1507,1508,1509]},{"teal":1498,"source":"contracts\\Moderator.algo.ts:35","pc":[1510,1511,1512,1513,1514,1515]},{"teal":1499,"source":"contracts\\Moderator.algo.ts:35","pc":[1516,1517,1518,1519,1520,1521]},{"teal":1500,"source":"contracts\\Moderator.algo.ts:35","pc":[1522,1523,1524,1525,1526,1527]},{"teal":1501,"source":"contracts\\Moderator.algo.ts:35","pc":[1528,1529,1530,1531,1532,1533]},{"teal":1502,"source":"contracts\\Moderator.algo.ts:35","pc":[1534,1535,1536,1537,1538,1539]},{"teal":1503,"source":"contracts\\Moderator.algo.ts:35","pc":[1540,1541,1542,1543,1544,1545]},{"teal":1504,"source":"contracts\\Moderator.algo.ts:35","pc":[1546,1547,1548,1549,1550,1551]},{"teal":1505,"source":"contracts\\Moderator.algo.ts:35","pc":[1552,1553,1554,1555,1556,1557]},{"teal":1506,"source":"contracts\\Moderator.algo.ts:35","pc":[1558,1559,1560,1561,1562,1563]},{"teal":1507,"source":"contracts\\Moderator.algo.ts:35","pc":[1564,1565,1566,1567,1568,1569]},{"teal":1508,"source":"contracts\\Moderator.algo.ts:35","pc":[1570,1571,1572,1573,1574,1575]},{"teal":1509,"source":"contracts\\Moderator.algo.ts:35","pc":[1576,1577,1578,1579,1580,1581]},{"teal":1510,"source":"contracts\\Moderator.algo.ts:35","pc":[1582,1583,1584]},{"teal":1511,"source":"contracts\\Moderator.algo.ts:35","pc":[1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612]},{"teal":1514,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1613]},{"teal":1517,"source":"contracts\\Moderator.algo.ts:35","pc":[1614,1615,1616,1617,1618,1619]},{"teal":1518,"source":"contracts\\Moderator.algo.ts:35","pc":[1620,1621,1622]},{"teal":1519,"source":"contracts\\Moderator.algo.ts:35","pc":[1623,1624,1625,1626]},{"teal":1522,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1627]},{"teal":1525,"source":"contracts\\Moderator.algo.ts:35","pc":[1628,1629,1630,1631,1632,1633]},{"teal":1526,"source":"contracts\\Moderator.algo.ts:35","pc":[1634,1635,1636]},{"teal":1527,"source":"contracts\\Moderator.algo.ts:35","pc":[1637,1638,1639,1640]},{"teal":1530,"source":"contracts\\Moderator.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1641]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDggMCAzMiAyNCAxMDAwMDAwIDE2IDEwMDAgMTAwMDAKYnl0ZWNibG9jayAweCAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MyAweDE1MWY3Yzc1IDB4MDAwODcyNjU2NzRkNmY2NDY1NmMgMHg3Mzc0NjE2YjY1NDE2ZDZmNzU2ZTc0IDB4Njk3MDY2NzM0ODYxNzM2OCAweDcyNjU3NzYxNzI2NAoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDYuMgovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uICpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIG1vZGVsSGFzaDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKG1vZGVsSGFzaDogc3RyaW5nKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo1NQoJLy8gdGhpcy5pcGZzSGFzaC52YWx1ZSA9IG1vZGVsSGFzaAoJYnl0ZWMgNSAvLyAgImlwZnNIYXNoIgoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsSGFzaDogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gdXBkYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQKKmFiaV9yb3V0ZV91cGRhdGVBcHBsaWNhdGlvbjoKCS8vIG1vZGVsSGFzaDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgdXBkYXRlQXBwbGljYXRpb24oc3RyaW5nKXZvaWQKCWNhbGxzdWIgdXBkYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHVwZGF0ZUFwcGxpY2F0aW9uKG1vZGVsSGFzaDogc3RyaW5nKTogdm9pZAp1cGRhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo2MAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvcikKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo2MQoJLy8gdGhpcy5pcGZzSGFzaC52YWx1ZSA9IG1vZGVsSGFzaAoJYnl0ZWMgNSAvLyAgImlwZnNIYXNoIgoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsSGFzaDogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYXNzaWduUmV3YXJkUG9vbCh1aW50NjQscGF5KXVpbnQ2NAoqYWJpX3JvdXRlX2Fzc2lnblJld2FyZFBvb2w6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIHJld2FyZFBvb2xUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAwIChyZXdhcmRQb29sVHhuKSBmb3IgYXNzaWduUmV3YXJkUG9vbCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyByZXdhcmRQb29sQW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFzc2lnblJld2FyZFBvb2wodWludDY0LHBheSl1aW50NjQKCWNhbGxzdWIgYXNzaWduUmV3YXJkUG9vbAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFzc2lnblJld2FyZFBvb2wocmV3YXJkUG9vbEFtb3VudDogdWludDY0LCByZXdhcmRQb29sVHhuOiBQYXlUeG4pOiB1aW50NjQKYXNzaWduUmV3YXJkUG9vbDoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo2NgoJLy8gdmVyaWZ5UGF5VHhuKHJld2FyZFBvb2xUeG4sIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IHJld2FyZFBvb2xBbW91bnQsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyByZXdhcmRQb29sVHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFBvb2xUeG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy50eG4uc2VuZGVyIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0yIC8vIHJld2FyZFBvb2xUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmV3YXJkUG9vbFR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIHJld2FyZFBvb2xUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkUG9vbEFtb3VudDogdWludDY0Cgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicmV3YXJkUG9vbFR4biIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJyZXdhcmRQb29sQW1vdW50In0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo3MQoJLy8gdGhpcy5yZXdhcmRQb29sLnZhbHVlID0gcmV3YXJkUG9vbEFtb3VudAoJcHVzaGJ5dGVzIDB4NzI2NTc3NjE3MjY0NTA2ZjZmNmMgLy8gInJld2FyZFBvb2wiCglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkUG9vbEFtb3VudDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo3MgoJLy8gdGhpcy5zdGFrZUFtb3VudC52YWx1ZSA9IHdpZGVSYXRpbyhbcmV3YXJkUG9vbEFtb3VudF0sIFsyXSkKCWJ5dGVjIDQgLy8gICJzdGFrZUFtb3VudCIKCWludGMgMiAvLyAwCglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkUG9vbEFtb3VudDogdWludDY0CglpbnRjIDIgLy8gMAoJcHVzaGludCAyCglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NzMKCS8vIHJldHVybiAxOwoJaW50YyAwIC8vIDEKCXJldHN1YgoKLy8gY29tbWl0VG9MaXN0aW5nKHBheSl1aW50NjQKKmFiaV9yb3V0ZV9jb21taXRUb0xpc3Rpbmc6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIHN0YWtlQW1vdW50VHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMCAoc3Rha2VBbW91bnRUeG4pIGZvciBjb21taXRUb0xpc3RpbmcgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjb21taXRUb0xpc3RpbmcocGF5KXVpbnQ2NAoJY2FsbHN1YiBjb21taXRUb0xpc3RpbmcKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjb21taXRUb0xpc3Rpbmcoc3Rha2VBbW91bnRUeG46IFBheVR4bik6IHVpbnQ2NApjb21taXRUb0xpc3Rpbmc6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6NzgKCS8vIHZlcmlmeVBheVR4bihzdGFrZUFtb3VudFR4biwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogdGhpcy5zdGFrZUFtb3VudC52YWx1ZSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHN0YWtlQW1vdW50VHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InN0YWtlQW1vdW50VHhuIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBzdGFrZUFtb3VudFR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZUFtb3VudFR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHN0YWtlQW1vdW50VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJYnl0ZWMgNCAvLyAgInN0YWtlQW1vdW50IgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZUFtb3VudFR4biIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJ0aGlzLnN0YWtlQW1vdW50LnZhbHVlIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo4NAoJLy8gcmV0dXJuIDE7CglpbnRjIDAgLy8gMQoJcmV0c3ViCgovLyBjaGVja0JhbGFuY2UoKXVpbnQ2NAoqYWJpX3JvdXRlX2NoZWNrQmFsYW5jZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBjaGVja0JhbGFuY2UoKXVpbnQ2NAoJY2FsbHN1YiBjaGVja0JhbGFuY2UKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjaGVja0JhbGFuY2UoKTogdWludDY0CmNoZWNrQmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo4OQoJLy8gcmV0dXJuIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZTsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCXBvcAoJcmV0c3ViCgovLyBwYXlvdXRSZXdhcmRzKGFkZHJlc3MsdWludDY0KXN0cmluZwoqYWJpX3JvdXRlX3BheW91dFJld2FyZHM6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIHJld2FyZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxIChBZGRyZXNzKSBmb3IgcGF5b3V0UmV3YXJkcyBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBwYXlvdXRSZXdhcmRzKGFkZHJlc3MsdWludDY0KXN0cmluZwoJY2FsbHN1YiBwYXlvdXRSZXdhcmRzCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHBheW91dFJld2FyZHMoQWRkcmVzczogQWRkcmVzcywgcmV3YXJkOiB1aW50NjQpOiBzdHJpbmcKcGF5b3V0UmV3YXJkczoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5NAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiByZXdhcmQsCgkvLyAgICAgICByZWNlaXZlcjogQWRkcmVzcywKCS8vICAgICAgIG5vdGU6ICdyZXdhcmQnLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5NQoJLy8gYW1vdW50OiByZXdhcmQKCWZyYW1lX2RpZyAtMiAvLyByZXdhcmQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6OTYKCS8vIHJlY2VpdmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czo5NwoJLy8gbm90ZTogJ3Jld2FyZCcKCWJ5dGVjIDYgLy8gICJyZXdhcmQiCglpdHhuX2ZpZWxkIE5vdGUKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDIgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEwMAoJLy8gcmV0dXJuICdzdWNjZXNzJzsKCXB1c2hieXRlcyAweDczNzU2MzYzNjU3MzczIC8vICJzdWNjZXNzIgoJcmV0c3ViCgovLyBidWxrUGF5b3V0UmV3YXJkcyhhZGRyZXNzW10sdWludDY0W10pdWludDY0CiphYmlfcm91dGVfYnVsa1BheW91dFJld2FyZHM6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIHJld2FyZHM6IHVpbnQ2NFtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFkZHJlc3NlczogYWRkcmVzc1tdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgYnVsa1BheW91dFJld2FyZHMoYWRkcmVzc1tdLHVpbnQ2NFtdKXVpbnQ2NAoJY2FsbHN1YiBidWxrUGF5b3V0UmV3YXJkcwoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGJ1bGtQYXlvdXRSZXdhcmRzKGFkZHJlc3NlczogQWRkcmVzc1tdLCByZXdhcmRzOiB1aW50NjRbXSk6IHVpbnQ2NApidWxrUGF5b3V0UmV3YXJkczoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTA1CgkvLyBhc3NlcnQoYWRkcmVzc2VzLmxlbmd0aCA9PT0gcmV3YXJkcy5sZW5ndGgsICdBcnJheXMgbXVzdCBoYXZlIHRoZSBzYW1lIGxlbmd0aCcpCglmcmFtZV9kaWcgLTEgLy8gYWRkcmVzc2VzOiBBZGRyZXNzW10KCWxlbgoJaW50YyAzIC8vIDMyCgkvCglmcmFtZV9kaWcgLTIgLy8gcmV3YXJkczogdWludDY0W10KCWxlbgoJaW50YyAxIC8vIDgKCS8KCT09CgoJLy8gQXJyYXlzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGgKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMDcKCS8vIHRvdGFsUmV3YXJkID0gMAoJaW50YyAyIC8vIDAKCWZyYW1lX2J1cnkgMCAvLyB0b3RhbFJld2FyZDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEwOAoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCByZXdhcmRzLmxlbmd0aDsgaSArPSAxKQoJaW50YyAyIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCipmb3JfMDoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMDgKCS8vIGkgPCByZXdhcmRzLmxlbmd0aAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gcmV3YXJkczogdWludDY0W10KCWxlbgoJaW50YyAxIC8vIDgKCS8KCTwKCWJ6ICpmb3JfMF9lbmQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTA5CgkvLyB0b3RhbFJld2FyZCArPSByZXdhcmRzW2ldCglmcmFtZV9kaWcgMCAvLyB0b3RhbFJld2FyZDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gcmV3YXJkczogdWludDY0W10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDIgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMSAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMSAvLyA4CglleHRyYWN0MwoJYnRvaQoJKwoJZnJhbWVfYnVyeSAwIC8vIHRvdGFsUmV3YXJkOiB1aW50NjQKCipmb3JfMF9jb250aW51ZToKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMDgKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDAgLy8gMQoJKwoJZnJhbWVfYnVyeSAxIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTEyCgkvLyB0b3RhbFN0YWtlQW1vdW50ID0gd2lkZVJhdGlvKFthZGRyZXNzZXMubGVuZ3RoLCB0aGlzLnN0YWtlQW1vdW50LnZhbHVlXSwgWzFdKQoJZnJhbWVfZGlnIC0xIC8vIGFkZHJlc3NlczogQWRkcmVzc1tdCglsZW4KCWludGMgMyAvLyAzMgoJLwoJYnl0ZWMgNCAvLyAgInN0YWtlQW1vdW50IgoJYXBwX2dsb2JhbF9nZXQKCW11bHcKCWludGMgMiAvLyAwCglpbnRjIDAgLy8gMQoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWZyYW1lX2J1cnkgMiAvLyB0b3RhbFN0YWtlQW1vdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTE0CgkvLyB0b3RhbFBheW91dCA9IHRvdGFsUmV3YXJkICsgdG90YWxTdGFrZUFtb3VudAoJZnJhbWVfZGlnIDAgLy8gdG90YWxSZXdhcmQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDIgLy8gdG90YWxTdGFrZUFtb3VudDogdWludDY0CgkrCglmcmFtZV9idXJ5IDMgLy8gdG90YWxQYXlvdXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMTYKCS8vIGFzc2VydCh0aGlzLmFwcC5hZGRyZXNzLmJhbGFuY2UgPj0gdG90YWxQYXlvdXQsICdJbnN1ZmZpY2llbnQgYmFsYW5jZSBmb3IgcmV3YXJkcycpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCglwb3AKCWZyYW1lX2RpZyAzIC8vIHRvdGFsUGF5b3V0OiB1aW50NjQKCT49CgoJLy8gSW5zdWZmaWNpZW50IGJhbGFuY2UgZm9yIHJld2FyZHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMTgKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSArPSAxKQoJaW50YyAyIC8vIDAKCWZyYW1lX2J1cnkgNCAvLyBpOiB1aW50NjQKCipmb3JfMToKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMTgKCS8vIGkgPCBhZGRyZXNzZXMubGVuZ3RoCglmcmFtZV9kaWcgNCAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhZGRyZXNzZXM6IEFkZHJlc3NbXQoJbGVuCglpbnRjIDMgLy8gMzIKCS8KCTwKCWJ6ICpmb3JfMV9lbmQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTE5CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgIGFtb3VudDogcmV3YXJkc1tpXSArIHRoaXMuc3Rha2VBbW91bnQudmFsdWUsCgkvLyAgICAgICAgIHJlY2VpdmVyOiBhZGRyZXNzZXNbaV0sCgkvLyAgICAgICAgIG5vdGU6ICdyZXdhcmQnLAoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEyMAoJLy8gYW1vdW50OiByZXdhcmRzW2ldICsgdGhpcy5zdGFrZUFtb3VudC52YWx1ZQoJZnJhbWVfZGlnIC0yIC8vIHJld2FyZHM6IHVpbnQ2NFtdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAyIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDEgLy8gOAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDEgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWJ5dGVjIDQgLy8gICJzdGFrZUFtb3VudCIKCWFwcF9nbG9iYWxfZ2V0CgkrCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMjEKCS8vIHJlY2VpdmVyOiBhZGRyZXNzZXNbaV0KCWZyYW1lX2RpZyAtMSAvLyBhZGRyZXNzZXM6IEFkZHJlc3NbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMiAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyA0IC8vIGk6IHVpbnQ2NAoJaW50YyAzIC8vIDMyCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMyAvLyAzMgoJZXh0cmFjdDMKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTIyCgkvLyBub3RlOiAncmV3YXJkJwoJYnl0ZWMgNiAvLyAgInJld2FyZCIKCWl0eG5fZmllbGQgTm90ZQoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMiAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCipmb3JfMV9jb250aW51ZToKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMTgKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDQgLy8gaTogdWludDY0CglpbnRjIDAgLy8gMQoJKwoJZnJhbWVfYnVyeSA0IC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzEKCipmb3JfMV9lbmQ6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTI2CgkvLyByZXR1cm4gMTsKCWludGMgMCAvLyAxCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gNAoJcmV0c3ViCgovLyBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkscGF5KXZvaWQKKmFiaV9yb3V0ZV9zdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWE6CgkvLyBtYnJQYXk6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAwIChtYnJQYXkpIGZvciBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXZhbHVhdGlvbk1ldHJpY3M6ICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAzIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGV2YWx1YXRpb25NZXRyaWNzKSBmb3Igc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhIG11c3QgYmUgYSAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkscGF5KXZvaWQKCWNhbGxzdWIgc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoZXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uLCBtYnJQYXk6IFBheVR4bik6IHZvaWQKc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjEzMQoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hcHAuY3JlYXRvciB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTMyCgkvLyB2ZXJpZnlQYXlUeG4obWJyUGF5LCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBib3hNYnIsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMiAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50YyA1IC8vIDEwMDAwMDAKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiYm94TWJyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMzgKCS8vIHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS5jcmVhdGUoMzIpCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglpbnRjIDMgLy8gMzIKCWJveF9jcmVhdGUKCXBvcAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxMzkKCS8vIHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS52YWx1ZSA9IGV2YWx1YXRpb25NZXRyaWNzCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglmcmFtZV9kaWcgLTEgLy8gZXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglib3hfcHV0CglyZXRzdWIKCi8vIGdldENsYXNzaWZpY2F0aW9uQ3JpdGVyaWEoKSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCiphYmlfcm91dGVfZ2V0Q2xhc3NpZmljYXRpb25Dcml0ZXJpYToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBnZXRDbGFzc2lmaWNhdGlvbkNyaXRlcmlhKCkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJY2FsbHN1YiBnZXRDbGFzc2lmaWNhdGlvbkNyaXRlcmlhCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZ2V0Q2xhc3NpZmljYXRpb25Dcml0ZXJpYSgpOiBDbGFzc2lmaWNhdGlvbgpnZXRDbGFzc2lmaWNhdGlvbkNyaXRlcmlhOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE0NAoJLy8gYXNzZXJ0KHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS5leGlzdHMpCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNDUKCS8vIHJldHVybiB0aGlzLmNsYXNzaWZpY2F0aW9uUGVyZm9ybWFuY2VNZXRyaWNzKCdJbml0aWFsTW9kZWxNZXRyaWNzJykudmFsdWU7CglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmNsYXNzaWZpY2F0aW9uUGVyZm9ybWFuY2VNZXRyaWNzKCdJbml0aWFsTW9kZWxNZXRyaWNzJykudmFsdWUKCWFzc2VydAoJcmV0c3ViCgovLyBjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdWludDY0CiphYmlfcm91dGVfY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChtb2RlbEV2YWx1YXRpb25NZXRyaWNzKSBmb3IgY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhIG11c3QgYmUgYSAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdWludDY0CgljYWxsc3ViIGNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYQoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYShtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbik6IHVpbnQ2NApjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWE6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE1MAoJLy8gYXNzZXJ0KHRoaXMuY2xhc3NpZmljYXRpb25QZXJmb3JtYW5jZU1ldHJpY3MoJ0luaXRpYWxNb2RlbE1ldHJpY3MnKS5leGlzdHMpCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNTMKCS8vIGJhc2VsaW5lU2NvcmUgPQoJLy8gICAgICAgYmFzZWxpbmVDbGFzc01ldHJpY3MuYWNjdXJhY3kgKwoJLy8gICAgICAgYmFzZWxpbmVDbGFzc01ldHJpY3MucHJlY2lzaW9uICsKCS8vICAgICAgIGJhc2VsaW5lQ2xhc3NNZXRyaWNzLnJlY2FsbCArCgkvLyAgICAgICBiYXNlbGluZUNsYXNzTWV0cmljcy5mMXNjb3JlCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglpbnRjIDIgLy8gMAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglpbnRjIDEgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJKwoJYnl0ZWMgMSAvLyAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MwoJaW50YyA2IC8vICBoZWFkT2Zmc2V0CglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCSsKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgNCAvLyAgaGVhZE9mZnNldAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgkrCglmcmFtZV9idXJ5IDAgLy8gYmFzZWxpbmVTY29yZTogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE1OQoJLy8gbW9kZWxTY29yZSA9CgkvLyAgICAgICBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLmFjY3VyYWN5ICsKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MucHJlY2lzaW9uICsKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MucmVjYWxsICsKCS8vICAgICAgIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3MuZjFzY29yZQoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglleHRyYWN0IDggOAoJYnRvaQoJKwoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IENsYXNzaWZpY2F0aW9uCglleHRyYWN0IDE2IDgKCWJ0b2kKCSsKCWZyYW1lX2RpZyAtMSAvLyBtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBDbGFzc2lmaWNhdGlvbgoJZXh0cmFjdCAyNCA4CglidG9pCgkrCglmcmFtZV9idXJ5IDEgLy8gbW9kZWxTY29yZTogdWludDY0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNjUKCS8vIG1vZGVsU2NvcmUgPD0gYmFzZWxpbmVTY29yZQoJZnJhbWVfZGlnIDEgLy8gbW9kZWxTY29yZTogdWludDY0CglmcmFtZV9kaWcgMCAvLyBiYXNlbGluZVNjb3JlOiB1aW50NjQKCTw9CglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE2NgoJLy8gcmV0dXJuIDA7CglpbnRjIDIgLy8gMAoJYiAqY2xhc3NNb2RlbFNlbGVjdGlvbkNyaXRlcmlhKnJldHVybgoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTY5CgkvLyByZXR1cm4gbW9kZWxTY29yZSAtIGJhc2VsaW5lU2NvcmU7CglmcmFtZV9kaWcgMSAvLyBtb2RlbFNjb3JlOiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIGJhc2VsaW5lU2NvcmU6IHVpbnQ2NAoJLQoKKmNsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSpyZXR1cm46CgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIHN0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoqYWJpX3JvdXRlX3N0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWE6CgkvLyBldmFsdWF0aW9uTWV0cmljczogKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDMgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoZXZhbHVhdGlvbk1ldHJpY3MpIGZvciBzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhIG11c3QgYmUgYSAodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXZvaWQKCWNhbGxzdWIgc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYShldmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbik6IHZvaWQKc3RvcmVNb2RlbFJlZ3Jlc3Npb25TZWxlY3Rpb25Dcml0ZXJpYToKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxNzQKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgeyBzZW5kZXI6IHRoaXMuYXBwLmNyZWF0b3IgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InRoaXMudHhuIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmNyZWF0b3IifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE3NQoJLy8gdGhpcy5yZWdyZXNzaW9uUGVyZm9ybWFuY2VNZXRyaWNzKCdyZWdNb2RlbCcpLnZhbHVlID0gZXZhbHVhdGlvbk1ldHJpY3MKCWJ5dGVjIDMgLy8gMHgwMDA4NzI2NTY3NGQ2ZjY0NjU2YwoJZnJhbWVfZGlnIC0xIC8vIGV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uCglib3hfcHV0CglyZXRzdWIKCi8vIHJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpc3RyaW5nCiphYmlfcm91dGVfcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljczogKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDMgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAobW9kZWxFdmFsdWF0aW9uTWV0cmljcykgZm9yIHJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEgbXVzdCBiZSBhICh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBleGVjdXRlIHJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpc3RyaW5nCgljYWxsc3ViIHJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gcmVnTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYShtb2RlbEV2YWx1YXRpb25NZXRyaWNzOiBSZWdyZXNzaW9uKTogc3RyaW5nCnJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWE6Cglwcm90byAxIDEKCgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjE4MgoJLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljcy5NU0UgPD0gYmFzZWxpbmVSZWdNZXRyaWNzLk1TRSAmJgoJLy8gICAgICAgbW9kZWxFdmFsdWF0aW9uTWV0cmljcy5NQUUgPD0gYmFzZWxpbmVSZWdNZXRyaWNzLk1BRSAmJgoJLy8gICAgICAgbW9kZWxFdmFsdWF0aW9uTWV0cmljcy5STVNFIDw9IGJhc2VsaW5lUmVnTWV0cmljcy5STVNFICYmCgkvLyAgICAgICBtb2RlbEV2YWx1YXRpb25NZXRyaWNzLkNPRCA+PSBiYXNlbGluZVJlZ01ldHJpY3MuQ09ECglmcmFtZV9kaWcgLTEgLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbgoJZXh0cmFjdCAwIDgKCWJ0b2kKCWJ5dGVjIDMgLy8gMHgwMDA4NzI2NTY3NGQ2ZjY0NjU2YwoJaW50YyAyIC8vIDAKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPD0KCWR1cAoJYnogKnNraXBfYW5kMAoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IFJlZ3Jlc3Npb24KCWV4dHJhY3QgMTYgOAoJYnRvaQoJYnl0ZWMgMyAvLyAweDAwMDg3MjY1Njc0ZDZmNjQ2NTZjCglpbnRjIDYgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPD0KCSYmCgoqc2tpcF9hbmQwOgoJZHVwCglieiAqc2tpcF9hbmQxCglmcmFtZV9kaWcgLTEgLy8gbW9kZWxFdmFsdWF0aW9uTWV0cmljczogUmVncmVzc2lvbgoJZXh0cmFjdCA4IDgKCWJ0b2kKCWJ5dGVjIDMgLy8gMHgwMDA4NzI2NTY3NGQ2ZjY0NjU2YwoJaW50YyAxIC8vICBoZWFkT2Zmc2V0CglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCTw9CgkmJgoKKnNraXBfYW5kMToKCWR1cAoJYnogKnNraXBfYW5kMgoJZnJhbWVfZGlnIC0xIC8vIG1vZGVsRXZhbHVhdGlvbk1ldHJpY3M6IFJlZ3Jlc3Npb24KCWV4dHJhY3QgMjQgOAoJYnRvaQoJYnl0ZWMgMyAvLyAweDAwMDg3MjY1Njc0ZDZmNjQ2NTZjCglpbnRjIDQgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJPj0KCSYmCgoqc2tpcF9hbmQyOgoJYnogKmlmMV9lbmQKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxODcKCS8vIHJldHVybiAnTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbic7CglwdXNoYnl0ZXMgMHg0ZDZmNjQ2NTZjMjA2ODYxNzMyMDYyNjU2NTZlMjA2MTYzNjM2NTcwNzQ2NTY0MjA2NjZmNzIyMDY2NzU3Mjc0Njg2NTcyMjA2MzZmNmU3MzY5NjQ2NTcyNjE3NDY5NmY2ZSAvLyAiTW9kZWwgaGFzIGJlZW4gYWNjZXB0ZWQgZm9yIGZ1cnRoZXIgY29uc2lkZXJhdGlvbiIKCXJldHN1YgoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTg5CgkvLyByZXR1cm4gJ2ZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHMnOwoJcHVzaGJ5dGVzIDB4NjY2MTY5NmM2NTY0MjA3NDY4NjUyMDZkNjk2ZTY5NmQ3NTZkMjA3MjY1NzE3NTY5NzI2NTZkNjU2ZTc0NzMgLy8gImZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHMiCglyZXRzdWIKCi8vIHN0b3JlTW9kZWxQYXJhbXMocGF5LGFkZHJlc3MsKHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCkpdm9pZAoqYWJpX3JvdXRlX3N0b3JlTW9kZWxQYXJhbXM6CgkvLyBwYXJhbXNEYXRhOiAoc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoKCS8vIEFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDMgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoQWRkcmVzcykgZm9yIHN0b3JlTW9kZWxQYXJhbXMgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIG1iclBheTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDIgKG1iclBheSkgZm9yIHN0b3JlTW9kZWxQYXJhbXMgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzdG9yZU1vZGVsUGFyYW1zKHBheSxhZGRyZXNzLChzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQpKXZvaWQKCWNhbGxzdWIgc3RvcmVNb2RlbFBhcmFtcwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gc3RvcmVNb2RlbFBhcmFtcyhtYnJQYXk6IFBheVR4biwgQWRkcmVzczogQWRkcmVzcywgcGFyYW1zRGF0YTogUGFyYW1zRGF0YSk6IHZvaWQKc3RvcmVNb2RlbFBhcmFtczoKCXByb3RvIDMgMAoKCS8vICppZjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTk0CgkvLyB0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykuZXhpc3RzCglmcmFtZV9kaWcgLTIgLy8gQWRkcmVzczogQWRkcmVzcwoJYm94X2xlbgoJc3dhcAoJcG9wCglieiAqaWYyX2Vsc2UKCgkvLyAqaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoxOTUKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgeyBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InRoaXMudHhuIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MTk2CgkvLyB2ZXJpZnlQYXlUeG4obWJyUGF5LCB7CgkvLyAgICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgYW1vdW50OiBib3hNYnIsCgkvLyAgICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy50eG4uc2VuZGVyIn0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnRjIDUgLy8gMTAwMDAwMAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJib3hNYnIifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIwMgoJLy8gdGhpcy5wYXJhbXNEYXRhKEFkZHJlc3MpLnZhbHVlID0gcGFyYW1zRGF0YQoJZnJhbWVfZGlnIC0yIC8vIEFkZHJlc3M6IEFkZHJlc3MKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTMgLy8gcGFyYW1zRGF0YTogUGFyYW1zRGF0YQoJYm94X3B1dAoJYiAqaWYyX2VuZAoKKmlmMl9lbHNlOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIwNAoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy50eG4uc2VuZGVyIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy50eG4uc2VuZGVyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyMDUKCS8vIHZlcmlmeVBheVR4bihtYnJQYXksIHsKCS8vICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICBhbW91bnQ6IGJveE1iciwKCS8vICAgICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLnR4bi5zZW5kZXIifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBBbW91bnQKCWludGMgNSAvLyAxMDAwMDAwCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoibWJyUGF5IiwiZmllbGQiOiJhbW91bnQiLCJleHBlY3RlZCI6ImJveE1iciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjExCgkvLyB0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykuY3JlYXRlKDMyKQoJZnJhbWVfZGlnIC0yIC8vIEFkZHJlc3M6IEFkZHJlc3MKCWludGMgMyAvLyAzMgoJYm94X2NyZWF0ZQoJcG9wCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIxMgoJLy8gdGhpcy5wYXJhbXNEYXRhKEFkZHJlc3MpLnZhbHVlID0gcGFyYW1zRGF0YQoJZnJhbWVfZGlnIC0yIC8vIEFkZHJlc3M6IEFkZHJlc3MKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTMgLy8gcGFyYW1zRGF0YTogUGFyYW1zRGF0YQoJYm94X3B1dAoKKmlmMl9lbmQ6CglyZXRzdWIKCi8vIGdldEJveFZhbHVlKGFkZHJlc3MpKHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCkKKmFiaV9yb3V0ZV9nZXRCb3hWYWx1ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChBZGRyZXNzKSBmb3IgZ2V0Qm94VmFsdWUgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ2V0Qm94VmFsdWUoYWRkcmVzcykoc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0KQoJY2FsbHN1YiBnZXRCb3hWYWx1ZQoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGdldEJveFZhbHVlKEFkZHJlc3M6IEFkZHJlc3MpOiBQYXJhbXNEYXRhCmdldEJveFZhbHVlOgoJcHJvdG8gMSAxCgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIxOAoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hcHAuY3JlYXRvciB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoidGhpcy50eG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjE5CgkvLyBhc3NlcnQodGhpcy5wYXJhbXNEYXRhKEFkZHJlc3MpLmV4aXN0cykKCWZyYW1lX2RpZyAtMSAvLyBBZGRyZXNzOiBBZGRyZXNzCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyMjAKCS8vIHJldHVybiB0aGlzLnBhcmFtc0RhdGEoQWRkcmVzcykudmFsdWU7CglmcmFtZV9kaWcgLTEgLy8gQWRkcmVzczogQWRkcmVzcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5wYXJhbXNEYXRhKEFkZHJlc3MpLnZhbHVlCglhc3NlcnQKCXJldHN1YgoKLy8gZGlzdHJpYnV0ZVJld2FyZHMoKHVpbnQ2NCkpdWludDY0W10KKmFiaV9yb3V0ZV9kaXN0cmlidXRlUmV3YXJkczoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gY29udHJpYnV0b3I6ICh1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAxIC8vIDgKCT09CgoJLy8gYXJndW1lbnQgMCAoY29udHJpYnV0b3IpIGZvciBkaXN0cmlidXRlUmV3YXJkcyBtdXN0IGJlIGEgKHVpbnQ2NCkKCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGlzdHJpYnV0ZVJld2FyZHMoKHVpbnQ2NCkpdWludDY0W10KCWNhbGxzdWIgZGlzdHJpYnV0ZVJld2FyZHMKCWR1cAoJbGVuCglpbnRjIDEgLy8gOAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRpc3RyaWJ1dGVSZXdhcmRzKGNvbnRyaWJ1dG9yOiByZXdhcmRDYWxjdWxhdGlvbik6IHVpbnQ2NFtdCmRpc3RyaWJ1dGVSZXdhcmRzOgoJcHJvdG8gMSAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gMTUKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjI2CgkvLyBob25lc3R5U2NvcmVzOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzUwLCA1MCwgNTBdCglwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDMyMDAwMDAwMDAwMDAwMDAzMjAwMDAwMDAwMDAwMDAwMzIKCWZyYW1lX2J1cnkgMCAvLyBob25lc3R5U2NvcmVzOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIyOAoJLy8gcG9vbFdlaWdodCA9IDAKCWludGMgMiAvLyAwCglmcmFtZV9idXJ5IDEgLy8gcG9vbFdlaWdodDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIzMAoJLy8gdG90YWwgPSBiYXNlQ2FzZS5hY2N1cmFjeSArIGJhc2VDYXNlLnByZWNpc2lvbiArIGJhc2VDYXNlLnJlY2FsbCArIGJhc2VDYXNlLmYxc2NvcmUKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgMiAvLyAwCglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCWJ5dGVjIDEgLy8gMHgwMDEzNDk2ZTY5NzQ2OTYxNmM0ZDZmNjQ2NTZjNGQ2NTc0NzI2OTYzNzMKCWludGMgMSAvLyAgaGVhZE9mZnNldAoJaW50YyAxIC8vIDgKCWJveF9leHRyYWN0CglidG9pCgkrCglieXRlYyAxIC8vIDB4MDAxMzQ5NmU2OTc0Njk2MTZjNGQ2ZjY0NjU2YzRkNjU3NDcyNjk2MzczCglpbnRjIDYgLy8gIGhlYWRPZmZzZXQKCWludGMgMSAvLyA4Cglib3hfZXh0cmFjdAoJYnRvaQoJKwoJYnl0ZWMgMSAvLyAweDAwMTM0OTZlNjk3NDY5NjE2YzRkNmY2NDY1NmM0ZDY1NzQ3MjY5NjM3MwoJaW50YyA0IC8vICBoZWFkT2Zmc2V0CglpbnRjIDEgLy8gOAoJYm94X2V4dHJhY3QKCWJ0b2kKCSsKCWZyYW1lX2J1cnkgMiAvLyB0b3RhbDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIzMQoJLy8gZXhjZXNzID0gMAoJaW50YyAyIC8vIDAKCWZyYW1lX2J1cnkgMyAvLyBleGNlc3M6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyMzIKCS8vIHJld2FyZEFtb3VudDogdWludDY0W10gPSBbXQoJYnl0ZWMgMCAvLyAweAoJZnJhbWVfYnVyeSA0IC8vIHJld2FyZEFtb3VudDogdWludDY0W10KCgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIzNAoJLy8gY29udHJpYnV0b3Iuc2NvcmUgPiB0b3RhbAoJZnJhbWVfZGlnIC0xIC8vIGNvbnRyaWJ1dG9yOiByZXdhcmRDYWxjdWxhdGlvbgoJZXh0cmFjdCAwIDgKCWJ0b2kKCWZyYW1lX2RpZyAyIC8vIHRvdGFsOiB1aW50NjQKCT4KCWJ6ICppZjNfZW5kCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjM1CgkvLyBleGNlc3MgPSBjb250cmlidXRvci5zY29yZSAtIHRvdGFsCglmcmFtZV9kaWcgLTEgLy8gY29udHJpYnV0b3I6IHJld2FyZENhbGN1bGF0aW9uCglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfZGlnIDIgLy8gdG90YWw6IHVpbnQ2NAoJLQoJZnJhbWVfYnVyeSAzIC8vIGV4Y2VzczogdWludDY0CgoqaWYzX2VuZDoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyMzgKCS8vIGhvbmVzdHlTY29yZXMuZm9yRWFjaAoJZnJhbWVfZGlnIDAgLy8gaG9uZXN0eVNjb3JlczogU3RhdGljQXJyYXk8dWludDY0LCAzPgoJZHVwCglmcmFtZV9idXJ5IDUgLy8gY29weSBvZiB0aGUgYXJyYXkgd2UgYXJlIGl0ZXJhdGluZyBvdmVyCglleHRyYWN0IDAgOAoJYnRvaQoJZnJhbWVfYnVyeSA2IC8vIGhvbmVzdHlTY29yZTogdWludDY0CglpbnRjIDIgLy8gMAoJZnJhbWVfYnVyeSA3IC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCgoqZm9yRWFjaF8wOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjIzOQoJLy8gcmVwV2VpZ2h0ID0gd2lkZVJhdGlvKFtob25lc3R5U2NvcmUgKiBob25lc3R5U2NvcmUgKiAxMDAwXSwgWzEwMCAqIDEwMF0pCglpbnRjIDIgLy8gMAoJZnJhbWVfZGlnIDYgLy8gaG9uZXN0eVNjb3JlOiB1aW50NjQKCWZyYW1lX2RpZyA2IC8vIGhvbmVzdHlTY29yZTogdWludDY0CgkqCglpbnRjIDcgLy8gMTAwMAoJKgoJaW50YyAyIC8vIDAKCWludGMgOCAvLyAxMDAwMAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCgkvLyB3aWRlUmF0aW8gZmFpbGVkCglhc3NlcnQKCWZyYW1lX2J1cnkgOCAvLyByZXBXZWlnaHQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyNDEKCS8vIHBhcnRpY2lwYW50V2VpZ2h0ID0gcmVwV2VpZ2h0ICogZXhjZXNzCglmcmFtZV9kaWcgOCAvLyByZXBXZWlnaHQ6IHVpbnQ2NAoJZnJhbWVfZGlnIDMgLy8gZXhjZXNzOiB1aW50NjQKCSoKCWZyYW1lX2J1cnkgOSAvLyBwYXJ0aWNpcGFudFdlaWdodDogdWludDY0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjI0MwoJLy8gcG9vbFdlaWdodCArPSBwYXJ0aWNpcGFudFdlaWdodAoJZnJhbWVfZGlnIDEgLy8gcG9vbFdlaWdodDogdWludDY0CglmcmFtZV9kaWcgOSAvLyBwYXJ0aWNpcGFudFdlaWdodDogdWludDY0CgkrCglmcmFtZV9idXJ5IDEgLy8gcG9vbFdlaWdodDogdWludDY0CgoJLy8gaW5jcmVtZW50IG9mZnNldCBhbmQgbG9vcCBpZiBub3Qgb3V0IG9mIGJvdW5kcwoJZnJhbWVfZGlnIDcgLy8gdGhlIG9mZnNldCB3ZSBhcmUgZXh0cmFjdGluZyB0aGUgbmV4dCBlbGVtZW50IGZyb20KCWludGMgMSAvLyA4CgkrCglkdXAKCWludGMgNCAvLyAgb2Zmc2V0IG9mIGxhc3QgZWxlbWVudAoJPAoJYnogKmZvckVhY2hfMF9lbmQKCWZyYW1lX2J1cnkgNyAvLyB0aGUgb2Zmc2V0IHdlIGFyZSBleHRyYWN0aW5nIHRoZSBuZXh0IGVsZW1lbnQgZnJvbQoJZnJhbWVfZGlnIDUgLy8gY29weSBvZiB0aGUgYXJyYXkgd2UgYXJlIGl0ZXJhdGluZyBvdmVyCglmcmFtZV9kaWcgNyAvLyB0aGUgb2Zmc2V0IHdlIGFyZSBleHRyYWN0aW5nIHRoZSBuZXh0IGVsZW1lbnQgZnJvbQoJaW50YyAxIC8vIDgKCWV4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgNiAvLyBob25lc3R5U2NvcmU6IHVpbnQ2NAoJYiAqZm9yRWFjaF8wCgoqZm9yRWFjaF8wX2VuZDoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyNDYKCS8vIGhvbmVzdHlTY29yZXMuZm9yRWFjaAoJZnJhbWVfZGlnIDAgLy8gaG9uZXN0eVNjb3JlczogU3RhdGljQXJyYXk8dWludDY0LCAzPgoJZHVwCglmcmFtZV9idXJ5IDEwIC8vIGNvcHkgb2YgdGhlIGFycmF5IHdlIGFyZSBpdGVyYXRpbmcgb3ZlcgoJZXh0cmFjdCAwIDgKCWJ0b2kKCWZyYW1lX2J1cnkgMTEgLy8gaG9uZXN0eVNjb3JlOiB1aW50NjQKCWludGMgMiAvLyAwCglmcmFtZV9idXJ5IDEyIC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCgoqZm9yRWFjaF8xOgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjI0NwoJLy8gcmVwV2VpZ2h0ID0gd2lkZVJhdGlvKFtob25lc3R5U2NvcmUgKiBob25lc3R5U2NvcmUgKiAxMDAwXSwgWzEwMCAqIDEwMF0pCglpbnRjIDIgLy8gMAoJZnJhbWVfZGlnIDExIC8vIGhvbmVzdHlTY29yZTogdWludDY0CglmcmFtZV9kaWcgMTEgLy8gaG9uZXN0eVNjb3JlOiB1aW50NjQKCSoKCWludGMgNyAvLyAxMDAwCgkqCglpbnRjIDIgLy8gMAoJaW50YyA4IC8vIDEwMDAwCglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSAxMyAvLyByZXBXZWlnaHQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyNDkKCS8vIHBhcnRpY2lwYW50V2VpZ2h0ID0gcmVwV2VpZ2h0ICogZXhjZXNzCglmcmFtZV9kaWcgMTMgLy8gcmVwV2VpZ2h0OiB1aW50NjQKCWZyYW1lX2RpZyAzIC8vIGV4Y2VzczogdWludDY0CgkqCglmcmFtZV9idXJ5IDE0IC8vIHBhcnRpY2lwYW50V2VpZ2h0OiB1aW50NjQKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjUxCgkvLyByZXdhcmQgPSB3aWRlUmF0aW8oW3BhcnRpY2lwYW50V2VpZ2h0ICogcHJpY2VQb29sXSwgW3Bvb2xXZWlnaHRdKQoJaW50YyAyIC8vIDAKCWZyYW1lX2RpZyAxNCAvLyBwYXJ0aWNpcGFudFdlaWdodDogdWludDY0CglwdXNoaW50IDEwMDAwMDAwCgkqCglpbnRjIDIgLy8gMAoJZnJhbWVfZGlnIDEgLy8gcG9vbFdlaWdodDogdWludDY0CglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoKCS8vIHdpZGVSYXRpbyBmYWlsZWQKCWFzc2VydAoJZnJhbWVfYnVyeSAxNSAvLyByZXdhcmQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyNTMKCS8vIHJld2FyZEFtb3VudC5wdXNoKHJld2FyZCkKCWZyYW1lX2RpZyA0IC8vIHJld2FyZEFtb3VudDogdWludDY0W10KCWZyYW1lX2RpZyAxNSAvLyByZXdhcmQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDQgLy8gcmV3YXJkQW1vdW50OiB1aW50NjRbXQoKCS8vIGluY3JlbWVudCBvZmZzZXQgYW5kIGxvb3AgaWYgbm90IG91dCBvZiBib3VuZHMKCWZyYW1lX2RpZyAxMiAvLyB0aGUgb2Zmc2V0IHdlIGFyZSBleHRyYWN0aW5nIHRoZSBuZXh0IGVsZW1lbnQgZnJvbQoJaW50YyAxIC8vIDgKCSsKCWR1cAoJaW50YyA0IC8vICBvZmZzZXQgb2YgbGFzdCBlbGVtZW50Cgk8CglieiAqZm9yRWFjaF8xX2VuZAoJZnJhbWVfYnVyeSAxMiAvLyB0aGUgb2Zmc2V0IHdlIGFyZSBleHRyYWN0aW5nIHRoZSBuZXh0IGVsZW1lbnQgZnJvbQoJZnJhbWVfZGlnIDEwIC8vIGNvcHkgb2YgdGhlIGFycmF5IHdlIGFyZSBpdGVyYXRpbmcgb3ZlcgoJZnJhbWVfZGlnIDEyIC8vIHRoZSBvZmZzZXQgd2UgYXJlIGV4dHJhY3RpbmcgdGhlIG5leHQgZWxlbWVudCBmcm9tCglpbnRjIDEgLy8gOAoJZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSAxMSAvLyBob25lc3R5U2NvcmU6IHVpbnQ2NAoJYiAqZm9yRWFjaF8xCgoqZm9yRWFjaF8xX2VuZDoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyNTYKCS8vIHJldHVybiByZXdhcmRBbW91bnQ7CglmcmFtZV9kaWcgNCAvLyByZXdhcmRBbW91bnQ6IHVpbnQ2NFtdCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMTUKCXJldHN1YgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9kZWxldGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgZGVsZXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgZGVsZXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRlbGV0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKZGVsZXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHNcTW9kZXJhdG9yLmFsZ28udHM6MjYxCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXE1vZGVyYXRvci5hbGdvLnRzOjI2MgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xNb2RlcmF0b3IuYWxnby50czoyNjMKCS8vIGNsb3NlUmVtYWluZGVyVG86IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAyIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHgxMTU3NTZkYiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4NjZlODE1OGMgLy8gbWV0aG9kICJhc3NpZ25SZXdhcmRQb29sKHVpbnQ2NCxwYXkpdWludDY0IgoJcHVzaGJ5dGVzIDB4MGZkMzY4MzYgLy8gbWV0aG9kICJjb21taXRUb0xpc3RpbmcocGF5KXVpbnQ2NCIKCXB1c2hieXRlcyAweDI4NmJlNjM2IC8vIG1ldGhvZCAiY2hlY2tCYWxhbmNlKCl1aW50NjQiCglwdXNoYnl0ZXMgMHgxMWE3NzlhYiAvLyBtZXRob2QgInBheW91dFJld2FyZHMoYWRkcmVzcyx1aW50NjQpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4ODM0NWRjODMgLy8gbWV0aG9kICJidWxrUGF5b3V0UmV3YXJkcyhhZGRyZXNzW10sdWludDY0W10pdWludDY0IgoJcHVzaGJ5dGVzIDB4Yjc4OTE4ZjUgLy8gbWV0aG9kICJzdG9yZUNsYXNzaWZpY2F0aW9uU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkscGF5KXZvaWQiCglwdXNoYnl0ZXMgMHg2ZGRjZGZkYyAvLyBtZXRob2QgImdldENsYXNzaWZpY2F0aW9uQ3JpdGVyaWEoKSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpIgoJcHVzaGJ5dGVzIDB4NDM2YTAyOTUgLy8gbWV0aG9kICJjbGFzc01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdWludDY0IgoJcHVzaGJ5dGVzIDB4N2RlMmRmY2QgLy8gbWV0aG9kICJzdG9yZU1vZGVsUmVncmVzc2lvblNlbGVjdGlvbkNyaXRlcmlhKCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXZvaWQiCglwdXNoYnl0ZXMgMHhiZjhhZGVkZiAvLyBtZXRob2QgInJlZ01vZGVsU2VsZWN0aW9uQ3JpdGVyaWEoKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4NTRkMjUwYmYgLy8gbWV0aG9kICJzdG9yZU1vZGVsUGFyYW1zKHBheSxhZGRyZXNzLChzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQpKXZvaWQiCglwdXNoYnl0ZXMgMHg3MDVjYjMxMCAvLyBtZXRob2QgImdldEJveFZhbHVlKGFkZHJlc3MpKHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCkiCglwdXNoYnl0ZXMgMHhkMTg4NTM2MSAvLyBtZXRob2QgImRpc3RyaWJ1dGVSZXdhcmRzKCh1aW50NjQpKXVpbnQ2NFtdIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9hc3NpZ25SZXdhcmRQb29sICphYmlfcm91dGVfY29tbWl0VG9MaXN0aW5nICphYmlfcm91dGVfY2hlY2tCYWxhbmNlICphYmlfcm91dGVfcGF5b3V0UmV3YXJkcyAqYWJpX3JvdXRlX2J1bGtQYXlvdXRSZXdhcmRzICphYmlfcm91dGVfc3RvcmVDbGFzc2lmaWNhdGlvblNlbGVjdGlvbkNyaXRlcmlhICphYmlfcm91dGVfZ2V0Q2xhc3NpZmljYXRpb25Dcml0ZXJpYSAqYWJpX3JvdXRlX2NsYXNzTW9kZWxTZWxlY3Rpb25Dcml0ZXJpYSAqYWJpX3JvdXRlX3N0b3JlTW9kZWxSZWdyZXNzaW9uU2VsZWN0aW9uQ3JpdGVyaWEgKmFiaV9yb3V0ZV9yZWdNb2RlbFNlbGVjdGlvbkNyaXRlcmlhICphYmlfcm91dGVfc3RvcmVNb2RlbFBhcmFtcyAqYWJpX3JvdXRlX2dldEJveFZhbHVlICphYmlfcm91dGVfZGlzdHJpYnV0ZVJld2FyZHMKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnIKCipjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uOgoJcHVzaGJ5dGVzIDB4MTc0NzQwNWIgLy8gbWV0aG9kICJ1cGRhdGVBcHBsaWNhdGlvbihzdHJpbmcpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBVcGRhdGVBcHBsaWNhdGlvbgoJZXJyCgoqY2FsbF9EZWxldGVBcHBsaWNhdGlvbjoKCXB1c2hieXRlcyAweDI0ODdjMzJjIC8vIG1ldGhvZCAiZGVsZXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgRGVsZXRlQXBwbGljYXRpb24KCWVycg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAQgAIBjAhD0Q6AeQTiYHABUAE0luaXRpYWxNb2RlbE1ldHJpY3MEFR98dQoACHJlZ01vZGVsC3N0YWtlQW1vdW50CGlwZnNIYXNoBnJld2FyZDEYFIEGCzEZCI0MBWgAAAAAAAAF1gXkBVoAAAAAAAAAAAAAADYaAVcCAIgAAiJDigEAJwWL/0kVFlcGAkxQZ4k2GgFXAgCIAAIiQ4oBADEANjIAcgdIEkQnBYv/SRUWVwYCTFBniSoxFiIJSTgQIhJENhoBF4gABRZQsCJDigIBi/44ADEAEkSL/jgHMgoSRIv+OAiL/xJEgApyZXdhcmRQb29si/9nJwQki/8kgQIfSEhMFERnIokqMRYiCUk4ECISRIgABRZQsCJDigEBi/84ADEAEkSL/zgHMgoSRIv/OAgnBGQSRCKJKogABRZQsCJDigABMgpzAEiJKjYaAhc2GgFJFSUSRIgADEkVFlcGAkxQULAiQ4oCAbEishCL/rIIi/+yBycGsgUksgGzgAdzdWNjZXNziSo2GgJXAgA2GgFXAgCIAAUWULAiQ4oCAShHBIv/FSUKi/4VIwoSRCSMACSMAYsBi/4VIwoMQQAeiwCL/jX/JIsBIwsINP9MI1gXCIwAiwEiCIwBQv/Xi/8VJQonBGQdJCIfSEhMFESMAosAiwIIjAMyCnMASIsDD0QkjASLBIv/FSUKDEEAPLEishCL/jX/JIsEIwsINP9MI1gXJwRkCLIIi/81/ySLBCULCDT/TCVYsgcnBrIFJLIBs4sEIgiMBEL/uSKMAEYEiTEWIglJOBAiEkQ2GgFJFSUSRIgAAiJDigIAMQA2MgByB0gSRIv+OAAxABJEi/44BzIKEkSL/jgIIQUSRCkluUgpi/+/iSqIAARQsCJDigABKb1MSEQpvkSJKjYaAUkVJRJEiAAFFlCwIkOKAQEoSSm9TEhEKSQjuhcpIyO6FwgpIQYjuhcIKSEEI7oXCIwAi/9XAAgXi/9XCAgXCIv/VxAIFwiL/1cYCBcIjAGLAYsADkEABCRCAAWLAYsACYwARgGJNhoBSRUlEkSIAAIiQ4oBADEANjIAcgdIEkQri/+/iSo2GgFJFSUSRIgADEkVFlcGAkxQULAiQ4oBAYv/VwAIFyskI7oXDklBAA6L/1cQCBcrIQYjuhcOEElBAA2L/1cICBcrIyO6Fw4QSUEADov/VxgIFyshBCO6Fw8QQQA0gDFNb2RlbCBoYXMgYmVlbiBhY2NlcHRlZCBmb3IgZnVydGhlciBjb25zaWRlcmF0aW9uiYAfZmFpbGVkIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50c4k2GgI2GgFJFSUSRDEWIglJOBAiEkSIAAIiQ4oDAIv+vUxIQQApMQAxABJEi/84ADEAEkSL/zgHMgoSRIv/OAghBRJEi/5JvEiL/b9CACsxADEAEkSL/zgAMQASRIv/OAcyChJEi/84CCEFEkSL/iW5SIv+SbxIi/2/iSo2GgFJFSUSRIgABFCwIkOKAQExADYyAHIHSBJEi/+9TEhEi/++RIkqNhoBSRUjEkSIAA5JFSMKFlcGAkxQULAiQ4oBAShHD4AYAAAAAAAAADIAAAAAAAAAMgAAAAAAAAAyjAAkjAEpJCO6FykjI7oXCCkhBiO6FwgpIQQjuhcIjAIkjAMojASL/1cACBeLAg1BAAuL/1cACBeLAgmMA4sASYwFVwAIF4wGJIwHJIsGiwYLIQcLJCEIH0hITBREjAiLCIsDC4wJiwGLCQiMAYsHIwhJIQQMQQAOjAeLBYsHI1gXjAZC/8WLAEmMClcACBeMCySMDCSLC4sLCyEHCyQhCB9ISEwURIwNiw2LAwuMDiSLDoGAreIECySLAR9ISEwURIwPiwSLDxZQjASLDCMISSEEDEEADowMiwqLDCNYF4wLQv+wiwSMAEYPiYgAAiJDigAAMQA2MgByB0gSRLEishAxALIJJLIBs4mABBFXVts2GgCOAfqaAIAEZugVjIAED9NoNoAEKGvmNoAEEad5q4AEg0Xcg4AEt4kY9YAEbdzf3IAEQ2oClYAEfeLfzYAEv4re34AEVNJQv4AEcFyzEIAE0YhTYTYaAI4N+m76wPrx+wP7QPwJ/E78YvzL/Or9n/4Z/kEAgAQXR0BbNhoAjgH6OgCABCSHwyw2GgCOAf9KAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ParamsData = {
  paramHash: string,
  paramKey: string,
  score: bigint,
  reputation: bigint
}


/**
 * Converts the ABI tuple representation of a ParamsData to the struct representation
 */
export function ParamsDataFromTuple(abiTuple: [string, string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ParamsData, APP_SPEC.structs) as ParamsData
}

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

export type RewardCalculation = {
  score: bigint
}


/**
 * Converts the ABI tuple representation of a rewardCalculation to the struct representation
 */
export function RewardCalculationFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.rewardCalculation, APP_SPEC.structs) as RewardCalculation
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'assignRewardPool(uint64,pay)uint64': {
      rewardPoolAmount: bigint | number
      rewardPoolTxn: AppMethodCallTransactionArgument
    }
    'commitToListing(pay)uint64': {
      stakeAmountTxn: AppMethodCallTransactionArgument
    }
    'checkBalance()uint64': Record<string, never>
    'payoutRewards(address,uint64)string': {
      address: string
      reward: bigint | number
    }
    'bulkPayoutRewards(address[],uint64[])uint64': {
      addresses: string[]
      rewards: bigint[] | number[]
    }
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Record<string, never>
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': {
      modelEvaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': {
      mbrPay: AppMethodCallTransactionArgument
      address: string
      paramsData: ParamsData
    }
    'getBoxValue(address)(string,string,uint64,uint64)': {
      address: string
    }
    'distributeRewards((uint64))uint64[]': {
      contributor: RewardCalculation
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'assignRewardPool(uint64,pay)uint64': [rewardPoolAmount: bigint | number, rewardPoolTxn: AppMethodCallTransactionArgument]
    'commitToListing(pay)uint64': [stakeAmountTxn: AppMethodCallTransactionArgument]
    'checkBalance()uint64': []
    'payoutRewards(address,uint64)string': [address: string, reward: bigint | number]
    'bulkPayoutRewards(address[],uint64[])uint64': [addresses: string[], rewards: bigint[] | number[]]
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': []
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': [modelEvaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'storeModelParams(pay,address,(string,string,uint64,uint64))void': [mbrPay: AppMethodCallTransactionArgument, address: string, paramsData: ParamsData]
    'getBoxValue(address)(string,string,uint64,uint64)': [address: string]
    'distributeRewards((uint64))uint64[]': [contributor: RewardCalculation]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'assignRewardPool(uint64,pay)uint64': bigint
  'commitToListing(pay)uint64': bigint
  'checkBalance()uint64': bigint
  'payoutRewards(address,uint64)string': string
  'bulkPayoutRewards(address[],uint64[])uint64': bigint
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Classification
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64': bigint
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'storeModelParams(pay,address,(string,string,uint64,uint64))void': void
  'getBoxValue(address)(string,string,uint64,uint64)': ParamsData
  'distributeRewards((uint64))uint64[]': bigint[]
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'assignRewardPool(uint64,pay)uint64' | 'assignRewardPool', {
      argsObj: DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64']
      argsTuple: DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']
      returns: DmlChainReturns['assignRewardPool(uint64,pay)uint64']
    }>
    & Record<'commitToListing(pay)uint64' | 'commitToListing', {
      argsObj: DmlChainArgs['obj']['commitToListing(pay)uint64']
      argsTuple: DmlChainArgs['tuple']['commitToListing(pay)uint64']
      returns: DmlChainReturns['commitToListing(pay)uint64']
    }>
    & Record<'checkBalance()uint64' | 'checkBalance', {
      argsObj: DmlChainArgs['obj']['checkBalance()uint64']
      argsTuple: DmlChainArgs['tuple']['checkBalance()uint64']
      returns: DmlChainReturns['checkBalance()uint64']
    }>
    & Record<'payoutRewards(address,uint64)string' | 'payoutRewards', {
      argsObj: DmlChainArgs['obj']['payoutRewards(address,uint64)string']
      argsTuple: DmlChainArgs['tuple']['payoutRewards(address,uint64)string']
      returns: DmlChainReturns['payoutRewards(address,uint64)string']
    }>
    & Record<'bulkPayoutRewards(address[],uint64[])uint64' | 'bulkPayoutRewards', {
      argsObj: DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64']
      argsTuple: DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']
      returns: DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'getClassificationCriteria()(uint64,uint64,uint64,uint64)' | 'getClassificationCriteria', {
      argsObj: DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      returns: DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'storeModelParams(pay,address,(string,string,uint64,uint64))void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']
      returns: DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void']
    }>
    & Record<'getBoxValue(address)(string,string,uint64,uint64)' | 'getBoxValue', {
      argsObj: DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']
      returns: DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)']
    }>
    & Record<'distributeRewards((uint64))uint64[]' | 'distributeRewards', {
      argsObj: DmlChainArgs['obj']['distributeRewards((uint64))uint64[]']
      argsTuple: DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']
      returns: DmlChainReturns['distributeRewards((uint64))uint64[]']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
        rewardPool: bigint
        stakeAmount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        paramsData: Map<string, ParamsData>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the assignRewardPool(uint64,pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignRewardPool(uint64,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.rewardPoolAmount, params.args.rewardPoolTxn],
    }
  }
  /**
   * Constructs a no op call for the commitToListing(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static commitToListing(params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'commitToListing(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeAmountTxn],
    }
  }
  /**
   * Constructs a no op call for the checkBalance()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkBalance()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the payoutRewards(address,uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutRewards(params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payoutRewards(address,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address, params.args.reward],
    }
  }
  /**
   * Constructs a no op call for the bulkPayoutRewards(address[],uint64[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bulkPayoutRewards(params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bulkPayoutRewards(address[],uint64[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses, params.args.rewards],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClassificationCriteria()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(pay,address,(string,string,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.address, params.args.paramsData],
    }
  }
  /**
   * Constructs a no op call for the getBoxValue(address)(string,string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxValue(address)(string,string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the distributeRewards((uint64))uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRewards(params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeRewards((uint64))uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contributor],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DmlChainCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (DmlChainUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (DmlChainDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DmlChainReturns['createApplication(string)void']) }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    commitToListing: (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.commitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `payoutRewards(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutRewards: (params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.payoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.bulkPayoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRewards: (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignRewardPool: (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.assignRewardPool(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    commitToListing: (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.commitToListing(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkBalance: (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.checkBalance(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `payoutRewards(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutRewards: (params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.payoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bulkPayoutRewards: (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.bulkPayoutRewards(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getBoxValue(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRewards: (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.distributeRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['updateApplication(string)void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | DmlChainReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `assignRewardPool(uint64,pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignRewardPool: async (params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.assignRewardPool(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['assignRewardPool(uint64,pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `commitToListing(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    commitToListing: async (params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.commitToListing(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['commitToListing(pay)uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `checkBalance()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkBalance: async (params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.checkBalance(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['checkBalance()uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `payoutRewards(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutRewards: async (params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.payoutRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['payoutRewards(address,uint64)string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `bulkPayoutRewards(address[],uint64[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bulkPayoutRewards: async (params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.bulkPayoutRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClassificationCriteria: async (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getClassificationCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxValue: async (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getBoxValue(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `distributeRewards((uint64))uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRewards: async (params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.distributeRewards(params))
      return {...result, return: result.return as unknown as (undefined | DmlChainReturns['distributeRewards((uint64))uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
          rewardPool: result.rewardPool,
          stakeAmount: result.stakeAmount,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
      /**
       * Get the current value of the rewardPool key in global state
       */
      rewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPool")) as bigint | undefined },
      /**
       * Get the current value of the stakeAmount key in global state
       */
      stakeAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakeAmount")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the paramsData map in box state
       */
      paramsData: {
        /**
         * Get all current values of the paramsData map in box state
         */
        getMap: async (): Promise<Map<string, ParamsData>> => { return (await this.appClient.state.box.getMap("paramsData")) as Map<string, ParamsData> },
        /**
         * Get a current value of the paramsData map by key from box state
         */
        value: async (key: string): Promise<ParamsData | undefined> => { return await this.appClient.state.box.getMapValue("paramsData", key) as ParamsData | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a assignRewardPool(uint64,pay)uint64 method call against the DMLChain contract
       */
      assignRewardPool(params: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignRewardPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('assignRewardPool(uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a commitToListing(pay)uint64 method call against the DMLChain contract
       */
      commitToListing(params: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.commitToListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('commitToListing(pay)uint64', v))
        return this
      },
      /**
       * Add a checkBalance()uint64 method call against the DMLChain contract
       */
      checkBalance(params: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkBalance()uint64', v))
        return this
      },
      /**
       * Add a payoutRewards(address,uint64)string method call against the DMLChain contract
       */
      payoutRewards(params: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('payoutRewards(address,uint64)string', v))
        return this
      },
      /**
       * Add a bulkPayoutRewards(address[],uint64[])uint64 method call against the DMLChain contract
       */
      bulkPayoutRewards(params: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bulkPayoutRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('bulkPayoutRewards(address[],uint64[])uint64', v))
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClassificationCriteria()(uint64,uint64,uint64,uint64) method call against the DMLChain contract
       */
      getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClassificationCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClassificationCriteria()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64', v))
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a storeModelParams(pay,address,(string,string,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxValue(address)(string,string,uint64,uint64) method call against the DMLChain contract
       */
      getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxValue(address)(string,string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a distributeRewards((uint64))uint64[] method call against the DMLChain contract
       */
      distributeRewards(params: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('distributeRewards((uint64))uint64[]', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the assignRewardPool(uint64,pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignRewardPool(params?: CallParams<DmlChainArgs['obj']['assignRewardPool(uint64,pay)uint64'] | DmlChainArgs['tuple']['assignRewardPool(uint64,pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['assignRewardPool(uint64,pay)uint64'] | undefined]>

  /**
   * Calls the commitToListing(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  commitToListing(params?: CallParams<DmlChainArgs['obj']['commitToListing(pay)uint64'] | DmlChainArgs['tuple']['commitToListing(pay)uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['commitToListing(pay)uint64'] | undefined]>

  /**
   * Calls the checkBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkBalance(params?: CallParams<DmlChainArgs['obj']['checkBalance()uint64'] | DmlChainArgs['tuple']['checkBalance()uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['checkBalance()uint64'] | undefined]>

  /**
   * Calls the payoutRewards(address,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutRewards(params?: CallParams<DmlChainArgs['obj']['payoutRewards(address,uint64)string'] | DmlChainArgs['tuple']['payoutRewards(address,uint64)string']>): DmlChainComposer<[...TReturns, DmlChainReturns['payoutRewards(address,uint64)string'] | undefined]>

  /**
   * Calls the bulkPayoutRewards(address[],uint64[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bulkPayoutRewards(params?: CallParams<DmlChainArgs['obj']['bulkPayoutRewards(address[],uint64[])uint64'] | DmlChainArgs['tuple']['bulkPayoutRewards(address[],uint64[])uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['bulkPayoutRewards(address[],uint64[])uint64'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClassificationCriteria(params?: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))uint64'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the storeModelParams(pay,address,(string,string,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(pay,address,(string,string,uint64,uint64))void'] | undefined]>

  /**
   * Calls the getBoxValue(address)(string,string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxValue(params?: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string,uint64,uint64)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getBoxValue(address)(string,string,uint64,uint64)'] | undefined]>

  /**
   * Calls the distributeRewards((uint64))uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRewards(params?: CallParams<DmlChainArgs['obj']['distributeRewards((uint64))uint64[]'] | DmlChainArgs['tuple']['distributeRewards((uint64))uint64[]']>): DmlChainComposer<[...TReturns, DmlChainReturns['distributeRewards((uint64))uint64[]'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

