/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"printHash","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"paramkeys","type":"string[]"},{"name":"paramValues","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"submitLocalUpdate","args":[{"name":"paramKeys","type":"string[]"},{"name":"paramValues","type":"uint64[]"},{"name":"dataSize","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"finalizeFedAvg","args":[{"name":"paramKeys","type":"string[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"specificity","type":"uint64"},{"name":"f1Score","type":"uint64"},{"name":"roc","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"parameterKeys":{"keyType":"string","valueType":"string","prefix":"parameterKeys"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression","prefix":"regressionPerformanceMetrics"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification","prefix":"classificationPerformanceMetrics"},"aggregatorParameterSums":{"keyType":"string","valueType":"uint64","prefix":"aggrSums"},"totalDataSize":{"keyType":"string","valueType":"uint64","prefix":"totalDataSize"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:23","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:23","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts\\Moderator.algo.ts:23","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240]},{"teal":15,"source":"contracts\\Moderator.algo.ts:23","pc":[241,242]},{"teal":16,"source":"contracts\\Moderator.algo.ts:23","pc":[243]},{"teal":17,"source":"contracts\\Moderator.algo.ts:23","pc":[244,245]},{"teal":18,"source":"contracts\\Moderator.algo.ts:23","pc":[246]},{"teal":19,"source":"contracts\\Moderator.algo.ts:23","pc":[247,248]},{"teal":20,"source":"contracts\\Moderator.algo.ts:23","pc":[249]},{"teal":21,"source":"contracts\\Moderator.algo.ts:23","pc":[250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275]},{"teal":25,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[276]},{"teal":30,"source":"contracts\\Moderator.algo.ts:53","pc":[277,278,279,280,281,282]},{"teal":33,"source":"contracts\\Moderator.algo.ts:53","pc":[283,284,285]},{"teal":34,"source":"contracts\\Moderator.algo.ts:53","pc":[286,287,288]},{"teal":37,"source":"contracts\\Moderator.algo.ts:53","pc":[289,290,291]},{"teal":38,"source":"contracts\\Moderator.algo.ts:53","pc":[292]},{"teal":39,"source":"contracts\\Moderator.algo.ts:53","pc":[293]},{"teal":40,"source":"contracts\\Moderator.algo.ts:53","pc":[294]},{"teal":41,"source":"contracts\\Moderator.algo.ts:53","pc":[295,296,297]},{"teal":42,"source":"contracts\\Moderator.algo.ts:53","pc":[298]},{"teal":43,"source":"contracts\\Moderator.algo.ts:53","pc":[299]},{"teal":44,"source":"contracts\\Moderator.algo.ts:53","pc":[300]},{"teal":45,"source":"contracts\\Moderator.algo.ts:53","pc":[301]},{"teal":46,"source":"contracts\\Moderator.algo.ts:53","pc":[302]},{"teal":47,"source":"contracts\\Moderator.algo.ts:53","pc":[303]},{"teal":51,"source":"contracts\\Moderator.algo.ts:53","pc":[304,305,306]},{"teal":55,"source":"contracts\\Moderator.algo.ts:54","pc":[307,308]},{"teal":56,"source":"contracts\\Moderator.algo.ts:54","pc":[309,310]},{"teal":57,"source":"contracts\\Moderator.algo.ts:54","pc":[311]},{"teal":58,"source":"contracts\\Moderator.algo.ts:54","pc":[312]},{"teal":59,"source":"contracts\\Moderator.algo.ts:54","pc":[313]},{"teal":60,"source":"contracts\\Moderator.algo.ts:54","pc":[314,315,316]},{"teal":61,"source":"contracts\\Moderator.algo.ts:54","pc":[317]},{"teal":62,"source":"contracts\\Moderator.algo.ts:54","pc":[318]},{"teal":63,"source":"contracts\\Moderator.algo.ts:54","pc":[319]},{"teal":67,"source":"contracts\\Moderator.algo.ts:55","pc":[320,321]},{"teal":68,"source":"contracts\\Moderator.algo.ts:55","pc":[322]},{"teal":69,"source":"contracts\\Moderator.algo.ts:55","pc":[323,324,325]},{"teal":70,"source":"contracts\\Moderator.algo.ts:53","pc":[326]},{"teal":75,"source":"contracts\\Moderator.algo.ts:59","pc":[327,328,329]},{"teal":78,"source":"contracts\\Moderator.algo.ts:59","pc":[330,331,332]},{"teal":81,"source":"contracts\\Moderator.algo.ts:59","pc":[333,334,335]},{"teal":82,"source":"contracts\\Moderator.algo.ts:59","pc":[336]},{"teal":83,"source":"contracts\\Moderator.algo.ts:59","pc":[337]},{"teal":87,"source":"contracts\\Moderator.algo.ts:59","pc":[338,339,340]},{"teal":90,"source":"contracts\\Moderator.algo.ts:59","pc":[341]},{"teal":91,"source":"contracts\\Moderator.algo.ts:59","pc":[342,343]},{"teal":95,"source":"contracts\\Moderator.algo.ts:60","pc":[344,345]},{"teal":96,"source":"contracts\\Moderator.algo.ts:60","pc":[346,347,348]},{"teal":97,"source":"contracts\\Moderator.algo.ts:60","pc":[349,350]},{"teal":98,"source":"contracts\\Moderator.algo.ts:60","pc":[351]},{"teal":99,"source":"contracts\\Moderator.algo.ts:60","pc":[352]},{"teal":100,"source":"contracts\\Moderator.algo.ts:60","pc":[353]},{"teal":104,"source":"contracts\\Moderator.algo.ts:61","pc":[354,355]},{"teal":105,"source":"contracts\\Moderator.algo.ts:61","pc":[356]},{"teal":106,"source":"contracts\\Moderator.algo.ts:61","pc":[357]},{"teal":107,"source":"contracts\\Moderator.algo.ts:61","pc":[358,359]},{"teal":108,"source":"contracts\\Moderator.algo.ts:61","pc":[360]},{"teal":109,"source":"contracts\\Moderator.algo.ts:61","pc":[361]},{"teal":110,"source":"contracts\\Moderator.algo.ts:61","pc":[362]},{"teal":111,"source":"contracts\\Moderator.algo.ts:61","pc":[363]},{"teal":115,"source":"contracts\\Moderator.algo.ts:63","pc":[364]},{"teal":116,"source":"contracts\\Moderator.algo.ts:63","pc":[365,366]},{"teal":123,"source":"contracts\\Moderator.algo.ts:64","pc":[367,368]},{"teal":124,"source":"contracts\\Moderator.algo.ts:64","pc":[369,370]},{"teal":125,"source":"contracts\\Moderator.algo.ts:64","pc":[371]},{"teal":126,"source":"contracts\\Moderator.algo.ts:64","pc":[372]},{"teal":127,"source":"contracts\\Moderator.algo.ts:64","pc":[373]},{"teal":128,"source":"contracts\\Moderator.algo.ts:64","pc":[374,375,376]},{"teal":132,"source":"contracts\\Moderator.algo.ts:65","pc":[377,378]},{"teal":133,"source":"contracts\\Moderator.algo.ts:65","pc":[379,380]},{"teal":134,"source":"contracts\\Moderator.algo.ts:65","pc":[381]},{"teal":135,"source":"contracts\\Moderator.algo.ts:65","pc":[382,383]},{"teal":136,"source":"contracts\\Moderator.algo.ts:65","pc":[384]},{"teal":137,"source":"contracts\\Moderator.algo.ts:65","pc":[385]},{"teal":138,"source":"contracts\\Moderator.algo.ts:65","pc":[386]},{"teal":139,"source":"contracts\\Moderator.algo.ts:65","pc":[387]},{"teal":140,"source":"contracts\\Moderator.algo.ts:65","pc":[388]},{"teal":141,"source":"contracts\\Moderator.algo.ts:65","pc":[389,390]},{"teal":142,"source":"contracts\\Moderator.algo.ts:65","pc":[391,392]},{"teal":143,"source":"contracts\\Moderator.algo.ts:65","pc":[393,394]},{"teal":144,"source":"contracts\\Moderator.algo.ts:65","pc":[395]},{"teal":145,"source":"contracts\\Moderator.algo.ts:65","pc":[396]},{"teal":146,"source":"contracts\\Moderator.algo.ts:65","pc":[397]},{"teal":147,"source":"contracts\\Moderator.algo.ts:65","pc":[398]},{"teal":148,"source":"contracts\\Moderator.algo.ts:65","pc":[399,400]},{"teal":149,"source":"contracts\\Moderator.algo.ts:65","pc":[401]},{"teal":150,"source":"contracts\\Moderator.algo.ts:65","pc":[402]},{"teal":151,"source":"contracts\\Moderator.algo.ts:65","pc":[403]},{"teal":152,"source":"contracts\\Moderator.algo.ts:65","pc":[404]},{"teal":153,"source":"contracts\\Moderator.algo.ts:65","pc":[405]},{"teal":154,"source":"contracts\\Moderator.algo.ts:65","pc":[406]},{"teal":155,"source":"contracts\\Moderator.algo.ts:65","pc":[407]},{"teal":156,"source":"contracts\\Moderator.algo.ts:65","pc":[408,409,410]},{"teal":157,"source":"contracts\\Moderator.algo.ts:65","pc":[411,412]},{"teal":161,"source":"contracts\\Moderator.algo.ts:66","pc":[413,414]},{"teal":162,"source":"contracts\\Moderator.algo.ts:66","pc":[415,416]},{"teal":163,"source":"contracts\\Moderator.algo.ts:66","pc":[417]},{"teal":164,"source":"contracts\\Moderator.algo.ts:66","pc":[418,419]},{"teal":165,"source":"contracts\\Moderator.algo.ts:66","pc":[420]},{"teal":166,"source":"contracts\\Moderator.algo.ts:66","pc":[421]},{"teal":167,"source":"contracts\\Moderator.algo.ts:66","pc":[422]},{"teal":168,"source":"contracts\\Moderator.algo.ts:66","pc":[423]},{"teal":169,"source":"contracts\\Moderator.algo.ts:66","pc":[424]},{"teal":170,"source":"contracts\\Moderator.algo.ts:66","pc":[425,426]},{"teal":171,"source":"contracts\\Moderator.algo.ts:66","pc":[427,428]},{"teal":172,"source":"contracts\\Moderator.algo.ts:66","pc":[429,430]},{"teal":173,"source":"contracts\\Moderator.algo.ts:66","pc":[431]},{"teal":174,"source":"contracts\\Moderator.algo.ts:66","pc":[432]},{"teal":175,"source":"contracts\\Moderator.algo.ts:66","pc":[433]},{"teal":176,"source":"contracts\\Moderator.algo.ts:66","pc":[434]},{"teal":177,"source":"contracts\\Moderator.algo.ts:66","pc":[435,436]},{"teal":178,"source":"contracts\\Moderator.algo.ts:66","pc":[437]},{"teal":179,"source":"contracts\\Moderator.algo.ts:66","pc":[438]},{"teal":180,"source":"contracts\\Moderator.algo.ts:66","pc":[439]},{"teal":181,"source":"contracts\\Moderator.algo.ts:66","pc":[440]},{"teal":182,"source":"contracts\\Moderator.algo.ts:66","pc":[441]},{"teal":183,"source":"contracts\\Moderator.algo.ts:66","pc":[442]},{"teal":184,"source":"contracts\\Moderator.algo.ts:66","pc":[443]},{"teal":185,"source":"contracts\\Moderator.algo.ts:66","pc":[444,445,446]},{"teal":186,"source":"contracts\\Moderator.algo.ts:66","pc":[447,448]},{"teal":190,"source":"contracts\\Moderator.algo.ts:68","pc":[449,450]},{"teal":191,"source":"contracts\\Moderator.algo.ts:68","pc":[451,452]},{"teal":192,"source":"contracts\\Moderator.algo.ts:68","pc":[453]},{"teal":193,"source":"contracts\\Moderator.algo.ts:68","pc":[454]},{"teal":194,"source":"contracts\\Moderator.algo.ts:68","pc":[455]},{"teal":195,"source":"contracts\\Moderator.algo.ts:68","pc":[456,457,458]},{"teal":196,"source":"contracts\\Moderator.algo.ts:68","pc":[459]},{"teal":197,"source":"contracts\\Moderator.algo.ts:68","pc":[460]},{"teal":198,"source":"contracts\\Moderator.algo.ts:68","pc":[461]},{"teal":199,"source":"contracts\\Moderator.algo.ts:68","pc":[462]},{"teal":200,"source":"contracts\\Moderator.algo.ts:68","pc":[463]},{"teal":201,"source":"contracts\\Moderator.algo.ts:68","pc":[464]},{"teal":202,"source":"contracts\\Moderator.algo.ts:68","pc":[465,466]},{"teal":203,"source":"contracts\\Moderator.algo.ts:68","pc":[467]},{"teal":204,"source":"contracts\\Moderator.algo.ts:68","pc":[468]},{"teal":205,"source":"contracts\\Moderator.algo.ts:68","pc":[469]},{"teal":206,"source":"contracts\\Moderator.algo.ts:68","pc":[470,471,472]},{"teal":207,"source":"contracts\\Moderator.algo.ts:68","pc":[473]},{"teal":208,"source":"contracts\\Moderator.algo.ts:68","pc":[474]},{"teal":209,"source":"contracts\\Moderator.algo.ts:68","pc":[475]},{"teal":213,"source":"contracts\\Moderator.algo.ts:70","pc":[476,477]},{"teal":214,"source":"contracts\\Moderator.algo.ts:70","pc":[478]},{"teal":215,"source":"contracts\\Moderator.algo.ts:70","pc":[479]},{"teal":216,"source":"contracts\\Moderator.algo.ts:70","pc":[480,481]},{"teal":217,"source":"contracts\\Moderator.algo.ts:64","pc":[482,483,484]},{"teal":220,"source":"contracts\\Moderator.algo.ts:59","pc":[485]},{"teal":224,"source":"contracts\\Moderator.algo.ts:87","pc":[486,487,488]},{"teal":228,"source":"contracts\\Moderator.algo.ts:88","pc":[489]},{"teal":229,"source":"contracts\\Moderator.algo.ts:88","pc":[490,491]},{"teal":230,"source":"contracts\\Moderator.algo.ts:88","pc":[492]},{"teal":231,"source":"contracts\\Moderator.algo.ts:87","pc":[493]},{"teal":235,"source":"contracts\\Moderator.algo.ts:92","pc":[494,495,496]},{"teal":239,"source":"contracts\\Moderator.algo.ts:93","pc":[497]},{"teal":240,"source":"contracts\\Moderator.algo.ts:93","pc":[498,499]},{"teal":241,"source":"contracts\\Moderator.algo.ts:93","pc":[500]},{"teal":242,"source":"contracts\\Moderator.algo.ts:92","pc":[501]},{"teal":246,"source":"contracts\\Moderator.algo.ts:97","pc":[502,503,504]},{"teal":254,"source":"contracts\\Moderator.algo.ts:100","pc":[505,506]},{"teal":255,"source":"contracts\\Moderator.algo.ts:100","pc":[507,508,509]},{"teal":256,"source":"contracts\\Moderator.algo.ts:100","pc":[510]},{"teal":257,"source":"contracts\\Moderator.algo.ts:98","pc":[511]},{"teal":258,"source":"contracts\\Moderator.algo.ts:98","pc":[512]},{"teal":259,"source":"contracts\\Moderator.algo.ts:98","pc":[513]},{"teal":260,"source":"contracts\\Moderator.algo.ts:98","pc":[514]},{"teal":261,"source":"contracts\\Moderator.algo.ts:100","pc":[515]},{"teal":262,"source":"contracts\\Moderator.algo.ts:100","pc":[516]},{"teal":263,"source":"contracts\\Moderator.algo.ts:100","pc":[517]},{"teal":264,"source":"contracts\\Moderator.algo.ts:100","pc":[518,519,520]},{"teal":265,"source":"contracts\\Moderator.algo.ts:101","pc":[521,522]},{"teal":266,"source":"contracts\\Moderator.algo.ts:101","pc":[523,524,525]},{"teal":267,"source":"contracts\\Moderator.algo.ts:101","pc":[526]},{"teal":268,"source":"contracts\\Moderator.algo.ts:98","pc":[527]},{"teal":269,"source":"contracts\\Moderator.algo.ts:98","pc":[528,529]},{"teal":270,"source":"contracts\\Moderator.algo.ts:98","pc":[530]},{"teal":271,"source":"contracts\\Moderator.algo.ts:98","pc":[531]},{"teal":272,"source":"contracts\\Moderator.algo.ts:101","pc":[532]},{"teal":273,"source":"contracts\\Moderator.algo.ts:101","pc":[533]},{"teal":274,"source":"contracts\\Moderator.algo.ts:100","pc":[534]},{"teal":277,"source":"contracts\\Moderator.algo.ts:101","pc":[535]},{"teal":278,"source":"contracts\\Moderator.algo.ts:101","pc":[536,537,538]},{"teal":279,"source":"contracts\\Moderator.algo.ts:102","pc":[539,540]},{"teal":280,"source":"contracts\\Moderator.algo.ts:102","pc":[541,542,543]},{"teal":281,"source":"contracts\\Moderator.algo.ts:102","pc":[544]},{"teal":282,"source":"contracts\\Moderator.algo.ts:98","pc":[545]},{"teal":283,"source":"contracts\\Moderator.algo.ts:98","pc":[546]},{"teal":284,"source":"contracts\\Moderator.algo.ts:98","pc":[547]},{"teal":285,"source":"contracts\\Moderator.algo.ts:98","pc":[548]},{"teal":286,"source":"contracts\\Moderator.algo.ts:102","pc":[549]},{"teal":287,"source":"contracts\\Moderator.algo.ts:102","pc":[550]},{"teal":288,"source":"contracts\\Moderator.algo.ts:101","pc":[551]},{"teal":291,"source":"contracts\\Moderator.algo.ts:102","pc":[552]},{"teal":292,"source":"contracts\\Moderator.algo.ts:102","pc":[553,554,555]},{"teal":293,"source":"contracts\\Moderator.algo.ts:103","pc":[556,557]},{"teal":294,"source":"contracts\\Moderator.algo.ts:103","pc":[558,559,560]},{"teal":295,"source":"contracts\\Moderator.algo.ts:103","pc":[561]},{"teal":296,"source":"contracts\\Moderator.algo.ts:98","pc":[562]},{"teal":297,"source":"contracts\\Moderator.algo.ts:98","pc":[563,564]},{"teal":298,"source":"contracts\\Moderator.algo.ts:98","pc":[565]},{"teal":299,"source":"contracts\\Moderator.algo.ts:98","pc":[566]},{"teal":300,"source":"contracts\\Moderator.algo.ts:103","pc":[567]},{"teal":301,"source":"contracts\\Moderator.algo.ts:103","pc":[568]},{"teal":302,"source":"contracts\\Moderator.algo.ts:102","pc":[569]},{"teal":305,"source":"contracts\\Moderator.algo.ts:99","pc":[570,571,572]},{"teal":310,"source":"contracts\\Moderator.algo.ts:105","pc":[573,574]},{"teal":311,"source":"contracts\\Moderator.algo.ts:105","pc":[575]},{"teal":316,"source":"contracts\\Moderator.algo.ts:107","pc":[576,577]},{"teal":317,"source":"contracts\\Moderator.algo.ts:97","pc":[578]},{"teal":321,"source":"contracts\\Moderator.algo.ts:111","pc":[579,580,581]},{"teal":331,"source":"contracts\\Moderator.algo.ts:114","pc":[582,583]},{"teal":332,"source":"contracts\\Moderator.algo.ts:114","pc":[584,585,586]},{"teal":333,"source":"contracts\\Moderator.algo.ts:114","pc":[587]},{"teal":334,"source":"contracts\\Moderator.algo.ts:112","pc":[588]},{"teal":335,"source":"contracts\\Moderator.algo.ts:112","pc":[589]},{"teal":336,"source":"contracts\\Moderator.algo.ts:112","pc":[590]},{"teal":337,"source":"contracts\\Moderator.algo.ts:112","pc":[591]},{"teal":338,"source":"contracts\\Moderator.algo.ts:114","pc":[592]},{"teal":339,"source":"contracts\\Moderator.algo.ts:114","pc":[593]},{"teal":340,"source":"contracts\\Moderator.algo.ts:114","pc":[594]},{"teal":341,"source":"contracts\\Moderator.algo.ts:114","pc":[595,596,597]},{"teal":342,"source":"contracts\\Moderator.algo.ts:115","pc":[598,599]},{"teal":343,"source":"contracts\\Moderator.algo.ts:115","pc":[600,601,602]},{"teal":344,"source":"contracts\\Moderator.algo.ts:115","pc":[603]},{"teal":345,"source":"contracts\\Moderator.algo.ts:112","pc":[604]},{"teal":346,"source":"contracts\\Moderator.algo.ts:112","pc":[605]},{"teal":347,"source":"contracts\\Moderator.algo.ts:112","pc":[606]},{"teal":348,"source":"contracts\\Moderator.algo.ts:112","pc":[607]},{"teal":349,"source":"contracts\\Moderator.algo.ts:115","pc":[608]},{"teal":350,"source":"contracts\\Moderator.algo.ts:115","pc":[609]},{"teal":351,"source":"contracts\\Moderator.algo.ts:114","pc":[610]},{"teal":354,"source":"contracts\\Moderator.algo.ts:115","pc":[611]},{"teal":355,"source":"contracts\\Moderator.algo.ts:115","pc":[612,613,614]},{"teal":356,"source":"contracts\\Moderator.algo.ts:116","pc":[615,616]},{"teal":357,"source":"contracts\\Moderator.algo.ts:116","pc":[617,618,619]},{"teal":358,"source":"contracts\\Moderator.algo.ts:116","pc":[620]},{"teal":359,"source":"contracts\\Moderator.algo.ts:112","pc":[621]},{"teal":360,"source":"contracts\\Moderator.algo.ts:112","pc":[622,623]},{"teal":361,"source":"contracts\\Moderator.algo.ts:112","pc":[624]},{"teal":362,"source":"contracts\\Moderator.algo.ts:112","pc":[625]},{"teal":363,"source":"contracts\\Moderator.algo.ts:116","pc":[626]},{"teal":364,"source":"contracts\\Moderator.algo.ts:116","pc":[627]},{"teal":365,"source":"contracts\\Moderator.algo.ts:115","pc":[628]},{"teal":368,"source":"contracts\\Moderator.algo.ts:116","pc":[629]},{"teal":369,"source":"contracts\\Moderator.algo.ts:116","pc":[630,631,632]},{"teal":370,"source":"contracts\\Moderator.algo.ts:117","pc":[633,634]},{"teal":371,"source":"contracts\\Moderator.algo.ts:117","pc":[635,636,637]},{"teal":372,"source":"contracts\\Moderator.algo.ts:117","pc":[638]},{"teal":373,"source":"contracts\\Moderator.algo.ts:112","pc":[639]},{"teal":374,"source":"contracts\\Moderator.algo.ts:112","pc":[640,641]},{"teal":375,"source":"contracts\\Moderator.algo.ts:112","pc":[642]},{"teal":376,"source":"contracts\\Moderator.algo.ts:112","pc":[643]},{"teal":377,"source":"contracts\\Moderator.algo.ts:117","pc":[644]},{"teal":378,"source":"contracts\\Moderator.algo.ts:117","pc":[645]},{"teal":379,"source":"contracts\\Moderator.algo.ts:116","pc":[646]},{"teal":382,"source":"contracts\\Moderator.algo.ts:117","pc":[647]},{"teal":383,"source":"contracts\\Moderator.algo.ts:117","pc":[648,649,650]},{"teal":384,"source":"contracts\\Moderator.algo.ts:118","pc":[651,652]},{"teal":385,"source":"contracts\\Moderator.algo.ts:118","pc":[653,654,655]},{"teal":386,"source":"contracts\\Moderator.algo.ts:118","pc":[656]},{"teal":387,"source":"contracts\\Moderator.algo.ts:112","pc":[657]},{"teal":388,"source":"contracts\\Moderator.algo.ts:112","pc":[658,659]},{"teal":389,"source":"contracts\\Moderator.algo.ts:112","pc":[660]},{"teal":390,"source":"contracts\\Moderator.algo.ts:112","pc":[661]},{"teal":391,"source":"contracts\\Moderator.algo.ts:118","pc":[662]},{"teal":392,"source":"contracts\\Moderator.algo.ts:118","pc":[663]},{"teal":393,"source":"contracts\\Moderator.algo.ts:117","pc":[664]},{"teal":396,"source":"contracts\\Moderator.algo.ts:118","pc":[665]},{"teal":397,"source":"contracts\\Moderator.algo.ts:118","pc":[666,667,668]},{"teal":398,"source":"contracts\\Moderator.algo.ts:119","pc":[669,670]},{"teal":399,"source":"contracts\\Moderator.algo.ts:119","pc":[671,672,673]},{"teal":400,"source":"contracts\\Moderator.algo.ts:119","pc":[674]},{"teal":401,"source":"contracts\\Moderator.algo.ts:112","pc":[675]},{"teal":402,"source":"contracts\\Moderator.algo.ts:112","pc":[676,677]},{"teal":403,"source":"contracts\\Moderator.algo.ts:112","pc":[678]},{"teal":404,"source":"contracts\\Moderator.algo.ts:112","pc":[679]},{"teal":405,"source":"contracts\\Moderator.algo.ts:119","pc":[680]},{"teal":406,"source":"contracts\\Moderator.algo.ts:119","pc":[681]},{"teal":407,"source":"contracts\\Moderator.algo.ts:118","pc":[682]},{"teal":410,"source":"contracts\\Moderator.algo.ts:113","pc":[683,684,685]},{"teal":415,"source":"contracts\\Moderator.algo.ts:121","pc":[686,687]},{"teal":416,"source":"contracts\\Moderator.algo.ts:121","pc":[688]},{"teal":421,"source":"contracts\\Moderator.algo.ts:123","pc":[689,690]},{"teal":422,"source":"contracts\\Moderator.algo.ts:111","pc":[691]},{"teal":427,"source":"contracts\\Moderator.algo.ts:127","pc":[692,693,694]},{"teal":428,"source":"contracts\\Moderator.algo.ts:127","pc":[695]},{"teal":431,"source":"contracts\\Moderator.algo.ts:127","pc":[696,697,698]},{"teal":432,"source":"contracts\\Moderator.algo.ts:127","pc":[699,700,701]},{"teal":435,"source":"contracts\\Moderator.algo.ts:127","pc":[702,703,704]},{"teal":438,"source":"contracts\\Moderator.algo.ts:127","pc":[705,706,707]},{"teal":439,"source":"contracts\\Moderator.algo.ts:127","pc":[708]},{"teal":440,"source":"contracts\\Moderator.algo.ts:127","pc":[709]},{"teal":444,"source":"contracts\\Moderator.algo.ts:127","pc":[710,711,712]},{"teal":447,"source":"contracts\\Moderator.algo.ts:127","pc":[713]},{"teal":448,"source":"contracts\\Moderator.algo.ts:127","pc":[714,715]},{"teal":452,"source":"contracts\\Moderator.algo.ts:128","pc":[716]},{"teal":453,"source":"contracts\\Moderator.algo.ts:128","pc":[717]},{"teal":456,"source":"contracts\\Moderator.algo.ts:128","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[718]},{"teal":457,"source":"contracts\\Moderator.algo.ts:128","pc":[719]},{"teal":458,"source":"contracts\\Moderator.algo.ts:128","pc":[720,721]},{"teal":462,"source":"contracts\\Moderator.algo.ts:129","pc":[722]},{"teal":463,"source":"contracts\\Moderator.algo.ts:129","pc":[723,724]},{"teal":464,"source":"contracts\\Moderator.algo.ts:129","pc":[725,726]},{"teal":465,"source":"contracts\\Moderator.algo.ts:129","pc":[727]},{"teal":466,"source":"contracts\\Moderator.algo.ts:129","pc":[728]},{"teal":467,"source":"contracts\\Moderator.algo.ts:129","pc":[729]},{"teal":471,"source":"contracts\\Moderator.algo.ts:131","pc":[730,731]},{"teal":472,"source":"contracts\\Moderator.algo.ts:131","pc":[732]},{"teal":473,"source":"contracts\\Moderator.algo.ts:131","pc":[733]},{"teal":474,"source":"contracts\\Moderator.algo.ts:131","pc":[734,735]},{"teal":475,"source":"contracts\\Moderator.algo.ts:131","pc":[736]},{"teal":476,"source":"contracts\\Moderator.algo.ts:131","pc":[737]},{"teal":477,"source":"contracts\\Moderator.algo.ts:131","pc":[738]},{"teal":478,"source":"contracts\\Moderator.algo.ts:131","pc":[739]},{"teal":479,"source":"contracts\\Moderator.algo.ts:131","pc":[740]},{"teal":483,"source":"contracts\\Moderator.algo.ts:133","pc":[741]},{"teal":484,"source":"contracts\\Moderator.algo.ts:133","pc":[742,743]},{"teal":491,"source":"contracts\\Moderator.algo.ts:134","pc":[744,745]},{"teal":492,"source":"contracts\\Moderator.algo.ts:134","pc":[746,747]},{"teal":493,"source":"contracts\\Moderator.algo.ts:134","pc":[748]},{"teal":494,"source":"contracts\\Moderator.algo.ts:134","pc":[749]},{"teal":495,"source":"contracts\\Moderator.algo.ts:134","pc":[750]},{"teal":496,"source":"contracts\\Moderator.algo.ts:134","pc":[751,752,753]},{"teal":500,"source":"contracts\\Moderator.algo.ts:135","pc":[754,755]},{"teal":501,"source":"contracts\\Moderator.algo.ts:135","pc":[756,757]},{"teal":502,"source":"contracts\\Moderator.algo.ts:135","pc":[758]},{"teal":503,"source":"contracts\\Moderator.algo.ts:135","pc":[759,760]},{"teal":504,"source":"contracts\\Moderator.algo.ts:135","pc":[761]},{"teal":505,"source":"contracts\\Moderator.algo.ts:135","pc":[762]},{"teal":506,"source":"contracts\\Moderator.algo.ts:135","pc":[763]},{"teal":507,"source":"contracts\\Moderator.algo.ts:135","pc":[764]},{"teal":508,"source":"contracts\\Moderator.algo.ts:135","pc":[765]},{"teal":509,"source":"contracts\\Moderator.algo.ts:135","pc":[766,767]},{"teal":510,"source":"contracts\\Moderator.algo.ts:135","pc":[768,769]},{"teal":511,"source":"contracts\\Moderator.algo.ts:135","pc":[770,771]},{"teal":512,"source":"contracts\\Moderator.algo.ts:135","pc":[772]},{"teal":513,"source":"contracts\\Moderator.algo.ts:135","pc":[773]},{"teal":514,"source":"contracts\\Moderator.algo.ts:135","pc":[774]},{"teal":515,"source":"contracts\\Moderator.algo.ts:135","pc":[775]},{"teal":516,"source":"contracts\\Moderator.algo.ts:135","pc":[776,777]},{"teal":517,"source":"contracts\\Moderator.algo.ts:135","pc":[778]},{"teal":518,"source":"contracts\\Moderator.algo.ts:135","pc":[779]},{"teal":519,"source":"contracts\\Moderator.algo.ts:135","pc":[780]},{"teal":520,"source":"contracts\\Moderator.algo.ts:135","pc":[781]},{"teal":521,"source":"contracts\\Moderator.algo.ts:135","pc":[782]},{"teal":522,"source":"contracts\\Moderator.algo.ts:135","pc":[783]},{"teal":523,"source":"contracts\\Moderator.algo.ts:135","pc":[784]},{"teal":524,"source":"contracts\\Moderator.algo.ts:135","pc":[785,786,787]},{"teal":525,"source":"contracts\\Moderator.algo.ts:135","pc":[788,789]},{"teal":529,"source":"contracts\\Moderator.algo.ts:136","pc":[790,791]},{"teal":530,"source":"contracts\\Moderator.algo.ts:136","pc":[792,793]},{"teal":531,"source":"contracts\\Moderator.algo.ts:136","pc":[794]},{"teal":532,"source":"contracts\\Moderator.algo.ts:136","pc":[795,796]},{"teal":533,"source":"contracts\\Moderator.algo.ts:136","pc":[797]},{"teal":534,"source":"contracts\\Moderator.algo.ts:136","pc":[798]},{"teal":535,"source":"contracts\\Moderator.algo.ts:136","pc":[799]},{"teal":536,"source":"contracts\\Moderator.algo.ts:136","pc":[800,801]},{"teal":537,"source":"contracts\\Moderator.algo.ts:136","pc":[802]},{"teal":538,"source":"contracts\\Moderator.algo.ts:136","pc":[803]},{"teal":539,"source":"contracts\\Moderator.algo.ts:136","pc":[804]},{"teal":540,"source":"contracts\\Moderator.algo.ts:136","pc":[805]},{"teal":541,"source":"contracts\\Moderator.algo.ts:136","pc":[806,807]},{"teal":545,"source":"contracts\\Moderator.algo.ts:138","pc":[808,809]},{"teal":546,"source":"contracts\\Moderator.algo.ts:138","pc":[810,811]},{"teal":547,"source":"contracts\\Moderator.algo.ts:138","pc":[812]},{"teal":548,"source":"contracts\\Moderator.algo.ts:138","pc":[813]},{"teal":549,"source":"contracts\\Moderator.algo.ts:138","pc":[814]},{"teal":550,"source":"contracts\\Moderator.algo.ts:138","pc":[815,816,817]},{"teal":551,"source":"contracts\\Moderator.algo.ts:138","pc":[818]},{"teal":552,"source":"contracts\\Moderator.algo.ts:138","pc":[819]},{"teal":553,"source":"contracts\\Moderator.algo.ts:138","pc":[820]},{"teal":554,"source":"contracts\\Moderator.algo.ts:138","pc":[821]},{"teal":557,"source":"contracts\\Moderator.algo.ts:138","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[822]},{"teal":558,"source":"contracts\\Moderator.algo.ts:138","pc":[823]},{"teal":559,"source":"contracts\\Moderator.algo.ts:138","pc":[824,825]},{"teal":563,"source":"contracts\\Moderator.algo.ts:139","pc":[826,827]},{"teal":564,"source":"contracts\\Moderator.algo.ts:139","pc":[828,829]},{"teal":565,"source":"contracts\\Moderator.algo.ts:139","pc":[830,831]},{"teal":566,"source":"contracts\\Moderator.algo.ts:139","pc":[832]},{"teal":567,"source":"contracts\\Moderator.algo.ts:139","pc":[833]},{"teal":568,"source":"contracts\\Moderator.algo.ts:139","pc":[834,835]},{"teal":572,"source":"contracts\\Moderator.algo.ts:141","pc":[836,837]},{"teal":573,"source":"contracts\\Moderator.algo.ts:141","pc":[838,839]},{"teal":574,"source":"contracts\\Moderator.algo.ts:141","pc":[840]},{"teal":575,"source":"contracts\\Moderator.algo.ts:141","pc":[841]},{"teal":576,"source":"contracts\\Moderator.algo.ts:141","pc":[842]},{"teal":577,"source":"contracts\\Moderator.algo.ts:141","pc":[843,844,845]},{"teal":578,"source":"contracts\\Moderator.algo.ts:141","pc":[846]},{"teal":579,"source":"contracts\\Moderator.algo.ts:141","pc":[847]},{"teal":580,"source":"contracts\\Moderator.algo.ts:141","pc":[848]},{"teal":581,"source":"contracts\\Moderator.algo.ts:141","pc":[849,850]},{"teal":582,"source":"contracts\\Moderator.algo.ts:141","pc":[851]},{"teal":583,"source":"contracts\\Moderator.algo.ts:141","pc":[852]},{"teal":587,"source":"contracts\\Moderator.algo.ts:142","pc":[853,854]},{"teal":588,"source":"contracts\\Moderator.algo.ts:142","pc":[855]},{"teal":589,"source":"contracts\\Moderator.algo.ts:142","pc":[856]},{"teal":590,"source":"contracts\\Moderator.algo.ts:142","pc":[857,858]},{"teal":591,"source":"contracts\\Moderator.algo.ts:134","pc":[859,860,861]},{"teal":594,"source":"contracts\\Moderator.algo.ts:127","pc":[862]},{"teal":599,"source":"contracts\\Moderator.algo.ts:147","pc":[863,864,865]},{"teal":602,"source":"contracts\\Moderator.algo.ts:147","pc":[866,867,868]},{"teal":603,"source":"contracts\\Moderator.algo.ts:147","pc":[869]},{"teal":604,"source":"contracts\\Moderator.algo.ts:147","pc":[870]},{"teal":608,"source":"contracts\\Moderator.algo.ts:147","pc":[871,872,873]},{"teal":611,"source":"contracts\\Moderator.algo.ts:147","pc":[874]},{"teal":612,"source":"contracts\\Moderator.algo.ts:147","pc":[875,876]},{"teal":616,"source":"contracts\\Moderator.algo.ts:148","pc":[877,878]},{"teal":617,"source":"contracts\\Moderator.algo.ts:148","pc":[879,880,881]},{"teal":618,"source":"contracts\\Moderator.algo.ts:148","pc":[882,883]},{"teal":619,"source":"contracts\\Moderator.algo.ts:148","pc":[884]},{"teal":620,"source":"contracts\\Moderator.algo.ts:148","pc":[885]},{"teal":621,"source":"contracts\\Moderator.algo.ts:148","pc":[886]},{"teal":625,"source":"contracts\\Moderator.algo.ts:150","pc":[887]},{"teal":626,"source":"contracts\\Moderator.algo.ts:150","pc":[888]},{"teal":629,"source":"contracts\\Moderator.algo.ts:150","errorMessage":"box value does not exist: this.totalDataSize('totalDataSize').value","pc":[889]},{"teal":630,"source":"contracts\\Moderator.algo.ts:150","pc":[890]},{"teal":631,"source":"contracts\\Moderator.algo.ts:150","pc":[891,892]},{"teal":635,"source":"contracts\\Moderator.algo.ts:151","pc":[893,894]},{"teal":636,"source":"contracts\\Moderator.algo.ts:151","pc":[895]},{"teal":637,"source":"contracts\\Moderator.algo.ts:151","pc":[896]},{"teal":640,"source":"contracts\\Moderator.algo.ts:151","errorMessage":"No data has been aggregated yet.","pc":[897]},{"teal":644,"source":"contracts\\Moderator.algo.ts:153","pc":[898]},{"teal":645,"source":"contracts\\Moderator.algo.ts:153","pc":[899,900]},{"teal":652,"source":"contracts\\Moderator.algo.ts:154","pc":[901,902]},{"teal":653,"source":"contracts\\Moderator.algo.ts:154","pc":[903,904]},{"teal":654,"source":"contracts\\Moderator.algo.ts:154","pc":[905]},{"teal":655,"source":"contracts\\Moderator.algo.ts:154","pc":[906]},{"teal":656,"source":"contracts\\Moderator.algo.ts:154","pc":[907]},{"teal":657,"source":"contracts\\Moderator.algo.ts:154","pc":[908,909,910]},{"teal":661,"source":"contracts\\Moderator.algo.ts:155","pc":[911,912]},{"teal":662,"source":"contracts\\Moderator.algo.ts:155","pc":[913,914]},{"teal":663,"source":"contracts\\Moderator.algo.ts:155","pc":[915]},{"teal":664,"source":"contracts\\Moderator.algo.ts:155","pc":[916,917]},{"teal":665,"source":"contracts\\Moderator.algo.ts:155","pc":[918]},{"teal":666,"source":"contracts\\Moderator.algo.ts:155","pc":[919]},{"teal":667,"source":"contracts\\Moderator.algo.ts:155","pc":[920]},{"teal":668,"source":"contracts\\Moderator.algo.ts:155","pc":[921]},{"teal":669,"source":"contracts\\Moderator.algo.ts:155","pc":[922]},{"teal":670,"source":"contracts\\Moderator.algo.ts:155","pc":[923,924]},{"teal":671,"source":"contracts\\Moderator.algo.ts:155","pc":[925,926]},{"teal":672,"source":"contracts\\Moderator.algo.ts:155","pc":[927,928]},{"teal":673,"source":"contracts\\Moderator.algo.ts:155","pc":[929]},{"teal":674,"source":"contracts\\Moderator.algo.ts:155","pc":[930]},{"teal":675,"source":"contracts\\Moderator.algo.ts:155","pc":[931]},{"teal":676,"source":"contracts\\Moderator.algo.ts:155","pc":[932]},{"teal":677,"source":"contracts\\Moderator.algo.ts:155","pc":[933,934]},{"teal":678,"source":"contracts\\Moderator.algo.ts:155","pc":[935]},{"teal":679,"source":"contracts\\Moderator.algo.ts:155","pc":[936]},{"teal":680,"source":"contracts\\Moderator.algo.ts:155","pc":[937]},{"teal":681,"source":"contracts\\Moderator.algo.ts:155","pc":[938]},{"teal":682,"source":"contracts\\Moderator.algo.ts:155","pc":[939]},{"teal":683,"source":"contracts\\Moderator.algo.ts:155","pc":[940]},{"teal":684,"source":"contracts\\Moderator.algo.ts:155","pc":[941]},{"teal":685,"source":"contracts\\Moderator.algo.ts:155","pc":[942,943,944]},{"teal":686,"source":"contracts\\Moderator.algo.ts:155","pc":[945,946]},{"teal":690,"source":"contracts\\Moderator.algo.ts:156","pc":[947,948]},{"teal":691,"source":"contracts\\Moderator.algo.ts:156","pc":[949,950]},{"teal":692,"source":"contracts\\Moderator.algo.ts:156","pc":[951]},{"teal":693,"source":"contracts\\Moderator.algo.ts:156","pc":[952]},{"teal":694,"source":"contracts\\Moderator.algo.ts:156","pc":[953]},{"teal":695,"source":"contracts\\Moderator.algo.ts:156","pc":[954,955,956]},{"teal":696,"source":"contracts\\Moderator.algo.ts:156","pc":[957]},{"teal":697,"source":"contracts\\Moderator.algo.ts:156","pc":[958]},{"teal":698,"source":"contracts\\Moderator.algo.ts:156","pc":[959]},{"teal":699,"source":"contracts\\Moderator.algo.ts:156","pc":[960]},{"teal":702,"source":"contracts\\Moderator.algo.ts:156","errorMessage":"box value does not exist: this.aggregatorParameterSums(pKey).value","pc":[961]},{"teal":703,"source":"contracts\\Moderator.algo.ts:156","pc":[962]},{"teal":704,"source":"contracts\\Moderator.algo.ts:156","pc":[963,964]},{"teal":708,"source":"contracts\\Moderator.algo.ts:158","pc":[965,966]},{"teal":709,"source":"contracts\\Moderator.algo.ts:158","pc":[967,968]},{"teal":710,"source":"contracts\\Moderator.algo.ts:158","pc":[969]},{"teal":711,"source":"contracts\\Moderator.algo.ts:158","pc":[970,971]},{"teal":715,"source":"contracts\\Moderator.algo.ts:160","pc":[972,973]},{"teal":716,"source":"contracts\\Moderator.algo.ts:160","pc":[974,975]},{"teal":717,"source":"contracts\\Moderator.algo.ts:160","pc":[976]},{"teal":718,"source":"contracts\\Moderator.algo.ts:160","pc":[977]},{"teal":719,"source":"contracts\\Moderator.algo.ts:160","pc":[978]},{"teal":720,"source":"contracts\\Moderator.algo.ts:160","pc":[979,980,981]},{"teal":721,"source":"contracts\\Moderator.algo.ts:160","pc":[982]},{"teal":722,"source":"contracts\\Moderator.algo.ts:160","pc":[983]},{"teal":723,"source":"contracts\\Moderator.algo.ts:160","pc":[984]},{"teal":724,"source":"contracts\\Moderator.algo.ts:160","pc":[985]},{"teal":725,"source":"contracts\\Moderator.algo.ts:160","pc":[986]},{"teal":726,"source":"contracts\\Moderator.algo.ts:160","pc":[987]},{"teal":727,"source":"contracts\\Moderator.algo.ts:160","pc":[988,989]},{"teal":728,"source":"contracts\\Moderator.algo.ts:160","pc":[990,991,992]},{"teal":729,"source":"contracts\\Moderator.algo.ts:160","pc":[993]},{"teal":730,"source":"contracts\\Moderator.algo.ts:160","pc":[994]},{"teal":731,"source":"contracts\\Moderator.algo.ts:160","pc":[995]},{"teal":732,"source":"contracts\\Moderator.algo.ts:160","pc":[996,997,998]},{"teal":733,"source":"contracts\\Moderator.algo.ts:160","pc":[999]},{"teal":734,"source":"contracts\\Moderator.algo.ts:160","pc":[1000]},{"teal":735,"source":"contracts\\Moderator.algo.ts:160","pc":[1001]},{"teal":739,"source":"contracts\\Moderator.algo.ts:162","pc":[1002,1003]},{"teal":740,"source":"contracts\\Moderator.algo.ts:162","pc":[1004]},{"teal":741,"source":"contracts\\Moderator.algo.ts:162","pc":[1005]},{"teal":742,"source":"contracts\\Moderator.algo.ts:162","pc":[1006,1007]},{"teal":743,"source":"contracts\\Moderator.algo.ts:154","pc":[1008,1009,1010]},{"teal":746,"source":"contracts\\Moderator.algo.ts:147","pc":[1011]},{"teal":751,"source":"contracts\\Moderator.algo.ts:167","pc":[1012,1013,1014]},{"teal":752,"source":"contracts\\Moderator.algo.ts:167","pc":[1015]},{"teal":753,"source":"contracts\\Moderator.algo.ts:167","pc":[1016]},{"teal":757,"source":"contracts\\Moderator.algo.ts:167","pc":[1017,1018,1019]},{"teal":761,"source":"contracts\\Moderator.algo.ts:168","pc":[1020,1021]},{"teal":762,"source":"contracts\\Moderator.algo.ts:168","pc":[1022,1023,1024]},{"teal":763,"source":"contracts\\Moderator.algo.ts:168","pc":[1025,1026]},{"teal":764,"source":"contracts\\Moderator.algo.ts:168","pc":[1027]},{"teal":765,"source":"contracts\\Moderator.algo.ts:168","pc":[1028]},{"teal":766,"source":"contracts\\Moderator.algo.ts:168","pc":[1029]},{"teal":767,"source":"contracts\\Moderator.algo.ts:167","pc":[1030]},{"teal":770,"source":"contracts\\Moderator.algo.ts:23","pc":[1031]},{"teal":771,"source":"contracts\\Moderator.algo.ts:23","pc":[1032]},{"teal":774,"source":"contracts\\Moderator.algo.ts:23","pc":[1033,1034,1035,1036,1037,1038]},{"teal":775,"source":"contracts\\Moderator.algo.ts:23","pc":[1039,1040,1041]},{"teal":776,"source":"contracts\\Moderator.algo.ts:23","pc":[1042,1043,1044,1045]},{"teal":779,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1046]},{"teal":782,"source":"contracts\\Moderator.algo.ts:23","pc":[1047,1048,1049,1050,1051,1052]},{"teal":783,"source":"contracts\\Moderator.algo.ts:23","pc":[1053,1054,1055,1056,1057,1058]},{"teal":784,"source":"contracts\\Moderator.algo.ts:23","pc":[1059,1060,1061,1062,1063,1064]},{"teal":785,"source":"contracts\\Moderator.algo.ts:23","pc":[1065,1066,1067,1068,1069,1070]},{"teal":786,"source":"contracts\\Moderator.algo.ts:23","pc":[1071,1072,1073]},{"teal":787,"source":"contracts\\Moderator.algo.ts:23","pc":[1074,1075,1076,1077,1078,1079,1080,1081,1082,1083]},{"teal":790,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1084]},{"teal":793,"source":"contracts\\Moderator.algo.ts:23","pc":[1085,1086,1087,1088,1089,1090]},{"teal":794,"source":"contracts\\Moderator.algo.ts:23","pc":[1091,1092,1093]},{"teal":795,"source":"contracts\\Moderator.algo.ts:23","pc":[1094,1095,1096,1097]},{"teal":798,"source":"contracts\\Moderator.algo.ts:23","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1098]},{"teal":801,"source":"contracts\\Moderator.algo.ts:23","pc":[1099,1100,1101]},{"teal":802,"source":"contracts\\Moderator.algo.ts:23","pc":[1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113]},{"teal":803,"source":"contracts\\Moderator.algo.ts:23","pc":[1114,1115]},{"teal":804,"source":"contracts\\Moderator.algo.ts:23","pc":[1116]},{"teal":805,"source":"contracts\\Moderator.algo.ts:23","pc":[1117]},{"teal":806,"source":"contracts\\Moderator.algo.ts:23","pc":[1118]},{"teal":810,"source":"contracts\\Moderator.algo.ts:23","pc":[1119,1120,1121]},{"teal":811,"source":"contracts\\Moderator.algo.ts:23","pc":[1122,1123]},{"teal":812,"source":"contracts\\Moderator.algo.ts:23","pc":[1124]},{"teal":813,"source":"contracts\\Moderator.algo.ts:23","pc":[1125]},{"teal":814,"source":"contracts\\Moderator.algo.ts:23","pc":[1126,1127,1128]},{"teal":815,"source":"contracts\\Moderator.algo.ts:23","pc":[1129,1130,1131]},{"teal":816,"source":"contracts\\Moderator.algo.ts:23","pc":[1132]},{"teal":819,"source":"contracts\\Moderator.algo.ts:23","pc":[1133,1134]},{"teal":820,"source":"contracts\\Moderator.algo.ts:23","pc":[1135,1136]},{"teal":821,"source":"contracts\\Moderator.algo.ts:23","pc":[1137]},{"teal":822,"source":"contracts\\Moderator.algo.ts:23","pc":[1138]},{"teal":823,"source":"contracts\\Moderator.algo.ts:23","pc":[1139]},{"teal":824,"source":"contracts\\Moderator.algo.ts:23","pc":[1140,1141,1142]},{"teal":825,"source":"contracts\\Moderator.algo.ts:23","pc":[1143,1144]},{"teal":826,"source":"contracts\\Moderator.algo.ts:23","pc":[1145,1146]},{"teal":827,"source":"contracts\\Moderator.algo.ts:23","pc":[1147]},{"teal":828,"source":"contracts\\Moderator.algo.ts:23","pc":[1148,1149,1150]},{"teal":829,"source":"contracts\\Moderator.algo.ts:23","pc":[1151,1152,1153]},{"teal":832,"source":"contracts\\Moderator.algo.ts:23","pc":[1154]},{"teal":835,"source":"contracts\\Moderator.algo.ts:23","pc":[1155,1156]},{"teal":836,"source":"contracts\\Moderator.algo.ts:23","pc":[1157,1158]},{"teal":837,"source":"contracts\\Moderator.algo.ts:23","pc":[1159]},{"teal":838,"source":"contracts\\Moderator.algo.ts:23","pc":[1160,1161,1162]},{"teal":839,"source":"contracts\\Moderator.algo.ts:23","pc":[1163]},{"teal":840,"source":"contracts\\Moderator.algo.ts:23","pc":[1164]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAAIIAQoQGCYJAC1jbGFzc2lmaWNhdGlvblBlcmZvcm1hbmNlTWV0cmljcwALcmNsYXNzTW9kZWwmcmVncmVzc2lvblBlcmZvcm1hbmNlTWV0cmljcwAIcmVnTW9kZWwcdG90YWxEYXRhU2l6ZQANdG90YWxEYXRhU2l6ZQhhZ2dyU3VtczFNb2RlbCBoYXMgYmVlbiBhY2NlcHRlZCBmb3IgZnVydGhlciBjb25zaWRlcmF0aW9uH2ZhaWxlZCB0aGUgbWluaW11bSByZXF1aXJlbWVudHMNcGFyYW1ldGVyS2V5cwhpcGZzSGFzaDEYFIEGCzEZCI0MAwMAAAAAAAAAAAMpAvUAAAAAAAAAAAAAAIAEFR98dTYaAVcCAIgADEkVFlcGAkxQULAlQ4oBAScIi/9JFRZXBgJMUGcnCGRXAgCJNhoCNhoBiAACJUOKAgAoRwIxADYyAHIHSBJEi/8iWYv+IlkSRCKMAIsAi/8iWQxBAGyL/zX/IosAIwsIIwg0/zT/TwJZIwhJNP9MWSULIwhYVwIAjAGL/jX/IosAIwsIIwg0/zT/TwJZIwhJNP9MWSULIwhYVwIAjAInB4sBSRUWVwYCTFBQSbxIiwJJFRZXBgJMUL+LACUIjABC/4qJigEAKYv/v4mKAQAqi/+/iYoBAYv/VwAIFyoiJLoXDklBAA6L/1cQCBcqIQUkuhcOEElBAA2L/1cICBcqJCS6Fw4QSUEADov/VxgIFyohBiS6Fw8QQQADJwWJJwaJigEBi/9XAAgXKSIkuhcPSUEADYv/VwgIFykkJLoXDxBJQQAOi/9XEAgXKSEFJLoXDxBJQQAOi/9XGAgXKSEGJLoXDxBJQQAOi/9XIAgXKYEgJLoXDxBJQQAOi/9XKAgXKYEoJLoXDxBBAAMnBYknBok2GgMXNhoCVwIANhoBiAACJUOKAwAoRwUrvkQXjAAriwCL/QgWv4v/IlmL/hUkChJEIowBiwGL/yJZDEEAbIv/Nf8iiwEjCwgjCDT/NP9PAlkjCEk0/0xZJQsjCFhXAgCMAov+Nf8iiwEkCwg0/0wkWBeMAycEiwJJFRZXBgJMUFC+RBeMBIsEiwOL/QsIjAUnBIsCSRUWVwYCTFBQiwUWv4sBJQiMAUL/iok2GgGIAAIlQ4oBAChHBDEANjIAcgdIEkQrvkQXjACLACINRCKMAYsBi/8iWQxBAGSL/zX/IosBIwsIIwg0/zT/TwJZIwhJNP9MWSULIwhYVwIAjAInBIsCSRUWVwYCTFBQvkQXjAOLA4sACowEJweLAkkVFlcGAkxQUEm8SIsEiAB+SRUWVwYCTFC/iwElCIwBQv+SiYgAAiVDigAAMQA2MgByB0gSRIklQ4AEuER7NjYaAI4B//EAgASWamC3gAROQo+GgATt5+h4gASnBmt9NhoAjgT82f0L/nj/IwCABCSHwyw2GgCOAf+qAIoBAYAKMDEyMzQ1Njc4OYv/JViJigEBi/8iEkEABIABMImL/yEECiINQQALi/8hBAqI/+BCAAEoi/8hBBiI/8BQiQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  specificity: bigint,
  f1Score: bigint,
  roc: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'printHash(string)string': {
      modelHash: string
    }
    'storeModelParams(string[],string[])void': {
      paramkeys: string[]
      paramValues: string[]
    }
    'submitLocalUpdate(string[],uint64[],uint64)void': {
      paramKeys: string[]
      paramValues: bigint[] | number[]
      dataSize: bigint | number
    }
    'finalizeFedAvg(string[])void': {
      paramKeys: string[]
    }
    'deleteApplication()void': Record<string, never>
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'printHash(string)string': [modelHash: string]
    'storeModelParams(string[],string[])void': [paramkeys: string[], paramValues: string[]]
    'submitLocalUpdate(string[],uint64[],uint64)void': [paramKeys: string[], paramValues: bigint[] | number[], dataSize: bigint | number]
    'finalizeFedAvg(string[])void': [paramKeys: string[]]
    'deleteApplication()void': []
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'printHash(string)string': string
  'storeModelParams(string[],string[])void': void
  'submitLocalUpdate(string[],uint64[],uint64)void': void
  'finalizeFedAvg(string[])void': void
  'deleteApplication()void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'printHash(string)string' | 'printHash', {
      argsObj: DmlChainArgs['obj']['printHash(string)string']
      argsTuple: DmlChainArgs['tuple']['printHash(string)string']
      returns: DmlChainReturns['printHash(string)string']
    }>
    & Record<'storeModelParams(string[],string[])void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(string[],string[])void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(string[],string[])void']
      returns: DmlChainReturns['storeModelParams(string[],string[])void']
    }>
    & Record<'submitLocalUpdate(string[],uint64[],uint64)void' | 'submitLocalUpdate', {
      argsObj: DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void']
      argsTuple: DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']
      returns: DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void']
    }>
    & Record<'finalizeFedAvg(string[])void' | 'finalizeFedAvg', {
      argsObj: DmlChainArgs['obj']['finalizeFedAvg(string[])void']
      argsTuple: DmlChainArgs['tuple']['finalizeFedAvg(string[])void']
      returns: DmlChainReturns['finalizeFedAvg(string[])void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication()void']
      argsTuple: DmlChainArgs['tuple']['createApplication()void']
      returns: DmlChainReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        parameterKeys: Map<string, string>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
        aggregatorParameterSums: Map<string, bigint>
        totalDataSize: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication()void'] | DmlChainArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication()void'] | DmlChainArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication()void'] | DmlChainArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the printHash(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printHash(params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printHash(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(string[],string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(string[],string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramkeys, params.args.paramValues],
    }
  }
  /**
   * Constructs a no op call for the submitLocalUpdate(string[],uint64[],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submitLocalUpdate(string[],uint64[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys, params.args.paramValues, params.args.dataSize],
    }
  }
  /**
   * Constructs a no op call for the finalizeFedAvg(string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeFedAvg(string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paramKeys],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication()void'] | DmlChainArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication()void'] | DmlChainArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication()void'] | DmlChainArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | DmlChainReturns['createApplication()void'] }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitLocalUpdate: (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.submitLocalUpdate(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalizeFedAvg: (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.finalizeFedAvg(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as undefined | DmlChainReturns['deleteApplication()void']}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printHash: async (params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printHash(params))
      return {...result, return: result.return as undefined | DmlChainReturns['printHash(string)string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(string[],string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeModelParams(string[],string[])void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `submitLocalUpdate(string[],uint64[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitLocalUpdate: async (params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.submitLocalUpdate(params))
      return {...result, return: result.return as undefined | DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `finalizeFedAvg(string[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalizeFedAvg: async (params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.finalizeFedAvg(params))
      return {...result, return: result.return as undefined | DmlChainReturns['finalizeFedAvg(string[])void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the parameterKeys map in box state
       */
      parameterKeys: {
        /**
         * Get all current values of the parameterKeys map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("parameterKeys")) as Map<string, string> },
        /**
         * Get a current value of the parameterKeys map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("parameterKeys", key) as string | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
      /**
       * Get values from the aggregatorParameterSums map in box state
       */
      aggregatorParameterSums: {
        /**
         * Get all current values of the aggregatorParameterSums map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("aggregatorParameterSums")) as Map<string, bigint> },
        /**
         * Get a current value of the aggregatorParameterSums map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("aggregatorParameterSums", key) as bigint | undefined },
      },
      /**
       * Get values from the totalDataSize map in box state
       */
      totalDataSize: {
        /**
         * Get all current values of the totalDataSize map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("totalDataSize")) as Map<string, bigint> },
        /**
         * Get a current value of the totalDataSize map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("totalDataSize", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a printHash(string)string method call against the DMLChain contract
       */
      printHash(params: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('printHash(string)string', v))
        return this
      },
      /**
       * Add a storeModelParams(string[],string[])void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submitLocalUpdate(string[],uint64[],uint64)void method call against the DMLChain contract
       */
      submitLocalUpdate(params: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitLocalUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeFedAvg(string[])void method call against the DMLChain contract
       */
      finalizeFedAvg(params: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeFedAvg(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the printHash(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printHash(params?: CallParams<DmlChainArgs['obj']['printHash(string)string'] | DmlChainArgs['tuple']['printHash(string)string']>): DmlChainComposer<[...TReturns, DmlChainReturns['printHash(string)string'] | undefined]>

  /**
   * Calls the storeModelParams(string[],string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(string[],string[])void'] | DmlChainArgs['tuple']['storeModelParams(string[],string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(string[],string[])void'] | undefined]>

  /**
   * Calls the submitLocalUpdate(string[],uint64[],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitLocalUpdate(params?: CallParams<DmlChainArgs['obj']['submitLocalUpdate(string[],uint64[],uint64)void'] | DmlChainArgs['tuple']['submitLocalUpdate(string[],uint64[],uint64)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['submitLocalUpdate(string[],uint64[],uint64)void'] | undefined]>

  /**
   * Calls the finalizeFedAvg(string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeFedAvg(params?: CallParams<DmlChainArgs['obj']['finalizeFedAvg(string[])void'] | DmlChainArgs['tuple']['finalizeFedAvg(string[])void']>): DmlChainComposer<[...TReturns, DmlChainReturns['finalizeFedAvg(string[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

