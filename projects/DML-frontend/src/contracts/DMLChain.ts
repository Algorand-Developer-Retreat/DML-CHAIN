/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DMLChain","desc":"","methods":[{"name":"createApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[{"name":"modelHash","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"printHash","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeClassificationSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getClassificationCriteria","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"Classification"},"actions":{"create":[],"call":["NoOp"]}},{"name":"classModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Classification"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelRegressionSelectionCriteria","args":[{"name":"evaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"regModelSelectionCriteria","args":[{"name":"modelEvaluationMetrics","type":"(uint64,uint64,uint64,uint64)","struct":"Regression"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"storeModelParams","args":[{"name":"mbrPay","type":"pay"},{"name":"Address","type":"address"},{"name":"paramsData","type":"(string,string)","struct":"ParamsData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getBoxValue","args":[{"name":"Address","type":"address"}],"returns":{"type":"(string,string)","struct":"ParamsData"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{"ParamsData":[{"name":"paramHash","type":"string"},{"name":"paramKey","type":"string"}],"Regression":[{"name":"mse","type":"uint64"},{"name":"rmse","type":"uint64"},{"name":"mae","type":"uint64"},{"name":"cod","type":"uint64"}],"Classification":[{"name":"accuracy","type":"uint64"},{"name":"precision","type":"uint64"},{"name":"recall","type":"uint64"},{"name":"f1score","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ipfsHash":{"key":"aXBmc0hhc2g=","keyType":"AVMBytes","valueType":"string"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"paramsData":{"keyType":"address","valueType":"ParamsData"},"regressionPerformanceMetrics":{"keyType":"string","valueType":"Regression"},"classificationPerformanceMetrics":{"keyType":"string","valueType":"Classification"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Moderator.algo.ts:28","pc":[0]},{"teal":2,"source":"contracts\\Moderator.algo.ts:28","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts\\Moderator.algo.ts:28","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141]},{"teal":15,"source":"contracts\\Moderator.algo.ts:28","pc":[142,143]},{"teal":16,"source":"contracts\\Moderator.algo.ts:28","pc":[144]},{"teal":17,"source":"contracts\\Moderator.algo.ts:28","pc":[145,146]},{"teal":18,"source":"contracts\\Moderator.algo.ts:28","pc":[147]},{"teal":19,"source":"contracts\\Moderator.algo.ts:28","pc":[148,149]},{"teal":20,"source":"contracts\\Moderator.algo.ts:28","pc":[150]},{"teal":21,"source":"contracts\\Moderator.algo.ts:28","pc":[151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176]},{"teal":25,"source":"contracts\\Moderator.algo.ts:28","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[177]},{"teal":30,"source":"contracts\\Moderator.algo.ts:41","pc":[178,179,180]},{"teal":31,"source":"contracts\\Moderator.algo.ts:41","pc":[181,182,183]},{"teal":34,"source":"contracts\\Moderator.algo.ts:41","pc":[184,185,186]},{"teal":35,"source":"contracts\\Moderator.algo.ts:41","pc":[187]},{"teal":36,"source":"contracts\\Moderator.algo.ts:41","pc":[188]},{"teal":40,"source":"contracts\\Moderator.algo.ts:41","pc":[189,190,191]},{"teal":44,"source":"contracts\\Moderator.algo.ts:42","pc":[192]},{"teal":45,"source":"contracts\\Moderator.algo.ts:42","pc":[193,194]},{"teal":46,"source":"contracts\\Moderator.algo.ts:42","pc":[195]},{"teal":47,"source":"contracts\\Moderator.algo.ts:42","pc":[196]},{"teal":48,"source":"contracts\\Moderator.algo.ts:42","pc":[197]},{"teal":49,"source":"contracts\\Moderator.algo.ts:42","pc":[198,199,200]},{"teal":50,"source":"contracts\\Moderator.algo.ts:42","pc":[201]},{"teal":51,"source":"contracts\\Moderator.algo.ts:42","pc":[202]},{"teal":52,"source":"contracts\\Moderator.algo.ts:42","pc":[203]},{"teal":53,"source":"contracts\\Moderator.algo.ts:41","pc":[204]},{"teal":58,"source":"contracts\\Moderator.algo.ts:46","pc":[205,206,207]},{"teal":59,"source":"contracts\\Moderator.algo.ts:46","pc":[208,209,210]},{"teal":62,"source":"contracts\\Moderator.algo.ts:46","pc":[211,212,213]},{"teal":63,"source":"contracts\\Moderator.algo.ts:46","pc":[214]},{"teal":64,"source":"contracts\\Moderator.algo.ts:46","pc":[215]},{"teal":68,"source":"contracts\\Moderator.algo.ts:46","pc":[216,217,218]},{"teal":72,"source":"contracts\\Moderator.algo.ts:47","pc":[219,220]},{"teal":73,"source":"contracts\\Moderator.algo.ts:47","pc":[221,222,223]},{"teal":74,"source":"contracts\\Moderator.algo.ts:47","pc":[224,225]},{"teal":75,"source":"contracts\\Moderator.algo.ts:47","pc":[226]},{"teal":76,"source":"contracts\\Moderator.algo.ts:47","pc":[227]},{"teal":77,"source":"contracts\\Moderator.algo.ts:47","pc":[228]},{"teal":81,"source":"contracts\\Moderator.algo.ts:48","pc":[229]},{"teal":82,"source":"contracts\\Moderator.algo.ts:48","pc":[230,231]},{"teal":83,"source":"contracts\\Moderator.algo.ts:48","pc":[232]},{"teal":84,"source":"contracts\\Moderator.algo.ts:48","pc":[233]},{"teal":85,"source":"contracts\\Moderator.algo.ts:48","pc":[234]},{"teal":86,"source":"contracts\\Moderator.algo.ts:48","pc":[235,236,237]},{"teal":87,"source":"contracts\\Moderator.algo.ts:48","pc":[238]},{"teal":88,"source":"contracts\\Moderator.algo.ts:48","pc":[239]},{"teal":89,"source":"contracts\\Moderator.algo.ts:48","pc":[240]},{"teal":90,"source":"contracts\\Moderator.algo.ts:46","pc":[241]},{"teal":95,"source":"contracts\\Moderator.algo.ts:52","pc":[242]},{"teal":98,"source":"contracts\\Moderator.algo.ts:52","pc":[243,244,245]},{"teal":99,"source":"contracts\\Moderator.algo.ts:52","pc":[246]},{"teal":100,"source":"contracts\\Moderator.algo.ts:52","pc":[247]},{"teal":101,"source":"contracts\\Moderator.algo.ts:52","pc":[248]},{"teal":102,"source":"contracts\\Moderator.algo.ts:52","pc":[249,250,251]},{"teal":103,"source":"contracts\\Moderator.algo.ts:52","pc":[252]},{"teal":104,"source":"contracts\\Moderator.algo.ts:52","pc":[253]},{"teal":105,"source":"contracts\\Moderator.algo.ts:52","pc":[254]},{"teal":106,"source":"contracts\\Moderator.algo.ts:52","pc":[255]},{"teal":107,"source":"contracts\\Moderator.algo.ts:52","pc":[256]},{"teal":108,"source":"contracts\\Moderator.algo.ts:52","pc":[257]},{"teal":112,"source":"contracts\\Moderator.algo.ts:52","pc":[258,259,260]},{"teal":116,"source":"contracts\\Moderator.algo.ts:53","pc":[261]},{"teal":117,"source":"contracts\\Moderator.algo.ts:53","pc":[262]},{"teal":118,"source":"contracts\\Moderator.algo.ts:53","pc":[263,264,265]},{"teal":119,"source":"contracts\\Moderator.algo.ts:52","pc":[266]},{"teal":124,"source":"contracts\\Moderator.algo.ts:57","pc":[267,268]},{"teal":125,"source":"contracts\\Moderator.algo.ts:57","pc":[269]},{"teal":126,"source":"contracts\\Moderator.algo.ts:57","pc":[270]},{"teal":127,"source":"contracts\\Moderator.algo.ts:57","pc":[271]},{"teal":128,"source":"contracts\\Moderator.algo.ts:57","pc":[272,273]},{"teal":129,"source":"contracts\\Moderator.algo.ts:57","pc":[274]},{"teal":130,"source":"contracts\\Moderator.algo.ts:57","pc":[275]},{"teal":133,"source":"contracts\\Moderator.algo.ts:57","errorMessage":"argument 0 (mbrPay) for storeClassificationSelectionCriteria must be a pay transaction","pc":[276]},{"teal":136,"source":"contracts\\Moderator.algo.ts:57","pc":[277,278,279]},{"teal":137,"source":"contracts\\Moderator.algo.ts:57","pc":[280]},{"teal":138,"source":"contracts\\Moderator.algo.ts:57","pc":[281]},{"teal":139,"source":"contracts\\Moderator.algo.ts:57","pc":[282]},{"teal":140,"source":"contracts\\Moderator.algo.ts:57","pc":[283]},{"teal":143,"source":"contracts\\Moderator.algo.ts:57","errorMessage":"argument 1 (evaluationMetrics) for storeClassificationSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[284]},{"teal":146,"source":"contracts\\Moderator.algo.ts:57","pc":[285,286,287]},{"teal":147,"source":"contracts\\Moderator.algo.ts:57","pc":[288]},{"teal":148,"source":"contracts\\Moderator.algo.ts:57","pc":[289]},{"teal":152,"source":"contracts\\Moderator.algo.ts:57","pc":[290,291,292]},{"teal":157,"source":"contracts\\Moderator.algo.ts:58","pc":[293,294]},{"teal":158,"source":"contracts\\Moderator.algo.ts:58","pc":[295,296,297]},{"teal":159,"source":"contracts\\Moderator.algo.ts:58","pc":[298,299]},{"teal":160,"source":"contracts\\Moderator.algo.ts:58","pc":[300]},{"teal":161,"source":"contracts\\Moderator.algo.ts:58","pc":[301]},{"teal":164,"source":"contracts\\Moderator.algo.ts:58","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[302]},{"teal":173,"source":"contracts\\Moderator.algo.ts:59","pc":[303,304]},{"teal":174,"source":"contracts\\Moderator.algo.ts:60","pc":[305,306]},{"teal":175,"source":"contracts\\Moderator.algo.ts:60","pc":[307,308]},{"teal":176,"source":"contracts\\Moderator.algo.ts:60","pc":[309]},{"teal":179,"source":"contracts\\Moderator.algo.ts:60","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[310]},{"teal":182,"source":"contracts\\Moderator.algo.ts:59","pc":[311,312]},{"teal":183,"source":"contracts\\Moderator.algo.ts:61","pc":[313,314]},{"teal":184,"source":"contracts\\Moderator.algo.ts:61","pc":[315,316]},{"teal":185,"source":"contracts\\Moderator.algo.ts:61","pc":[317]},{"teal":188,"source":"contracts\\Moderator.algo.ts:61","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[318]},{"teal":191,"source":"contracts\\Moderator.algo.ts:59","pc":[319,320]},{"teal":192,"source":"contracts\\Moderator.algo.ts:62","pc":[321,322]},{"teal":193,"source":"contracts\\Moderator.algo.ts:62","pc":[323]},{"teal":194,"source":"contracts\\Moderator.algo.ts:62","pc":[324]},{"teal":197,"source":"contracts\\Moderator.algo.ts:62","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[325]},{"teal":201,"source":"contracts\\Moderator.algo.ts:65","pc":[326]},{"teal":202,"source":"contracts\\Moderator.algo.ts:65","pc":[327]},{"teal":203,"source":"contracts\\Moderator.algo.ts:65","pc":[328]},{"teal":204,"source":"contracts\\Moderator.algo.ts:65","pc":[329]},{"teal":208,"source":"contracts\\Moderator.algo.ts:66","pc":[330]},{"teal":209,"source":"contracts\\Moderator.algo.ts:66","pc":[331,332]},{"teal":210,"source":"contracts\\Moderator.algo.ts:66","pc":[333]},{"teal":211,"source":"contracts\\Moderator.algo.ts:57","pc":[334]},{"teal":216,"source":"contracts\\Moderator.algo.ts:70","pc":[335]},{"teal":219,"source":"contracts\\Moderator.algo.ts:70","pc":[336,337,338]},{"teal":220,"source":"contracts\\Moderator.algo.ts:70","pc":[339]},{"teal":221,"source":"contracts\\Moderator.algo.ts:70","pc":[340]},{"teal":222,"source":"contracts\\Moderator.algo.ts:70","pc":[341]},{"teal":223,"source":"contracts\\Moderator.algo.ts:70","pc":[342]},{"teal":227,"source":"contracts\\Moderator.algo.ts:70","pc":[343,344,345]},{"teal":231,"source":"contracts\\Moderator.algo.ts:71","pc":[346]},{"teal":232,"source":"contracts\\Moderator.algo.ts:71","pc":[347]},{"teal":233,"source":"contracts\\Moderator.algo.ts:71","pc":[348]},{"teal":234,"source":"contracts\\Moderator.algo.ts:71","pc":[349]},{"teal":235,"source":"contracts\\Moderator.algo.ts:71","pc":[350]},{"teal":239,"source":"contracts\\Moderator.algo.ts:72","pc":[351]},{"teal":240,"source":"contracts\\Moderator.algo.ts:72","pc":[352]},{"teal":243,"source":"contracts\\Moderator.algo.ts:72","errorMessage":"box value does not exist: this.classificationPerformanceMetrics('InitialModelMetrics').value","pc":[353]},{"teal":244,"source":"contracts\\Moderator.algo.ts:70","pc":[354]},{"teal":249,"source":"contracts\\Moderator.algo.ts:76","pc":[355]},{"teal":252,"source":"contracts\\Moderator.algo.ts:76","pc":[356,357,358]},{"teal":253,"source":"contracts\\Moderator.algo.ts:76","pc":[359]},{"teal":254,"source":"contracts\\Moderator.algo.ts:76","pc":[360]},{"teal":255,"source":"contracts\\Moderator.algo.ts:76","pc":[361]},{"teal":256,"source":"contracts\\Moderator.algo.ts:76","pc":[362]},{"teal":259,"source":"contracts\\Moderator.algo.ts:76","errorMessage":"argument 0 (modelEvaluationMetrics) for classModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[363]},{"teal":262,"source":"contracts\\Moderator.algo.ts:76","pc":[364,365,366]},{"teal":263,"source":"contracts\\Moderator.algo.ts:76","pc":[367]},{"teal":264,"source":"contracts\\Moderator.algo.ts:76","pc":[368]},{"teal":265,"source":"contracts\\Moderator.algo.ts:76","pc":[369]},{"teal":266,"source":"contracts\\Moderator.algo.ts:76","pc":[370,371,372]},{"teal":267,"source":"contracts\\Moderator.algo.ts:76","pc":[373]},{"teal":268,"source":"contracts\\Moderator.algo.ts:76","pc":[374]},{"teal":269,"source":"contracts\\Moderator.algo.ts:76","pc":[375]},{"teal":270,"source":"contracts\\Moderator.algo.ts:76","pc":[376]},{"teal":271,"source":"contracts\\Moderator.algo.ts:76","pc":[377]},{"teal":272,"source":"contracts\\Moderator.algo.ts:76","pc":[378]},{"teal":276,"source":"contracts\\Moderator.algo.ts:76","pc":[379,380,381]},{"teal":280,"source":"contracts\\Moderator.algo.ts:77","pc":[382]},{"teal":281,"source":"contracts\\Moderator.algo.ts:77","pc":[383]},{"teal":282,"source":"contracts\\Moderator.algo.ts:77","pc":[384]},{"teal":283,"source":"contracts\\Moderator.algo.ts:77","pc":[385]},{"teal":284,"source":"contracts\\Moderator.algo.ts:77","pc":[386]},{"teal":291,"source":"contracts\\Moderator.algo.ts:80","pc":[387,388]},{"teal":292,"source":"contracts\\Moderator.algo.ts:80","pc":[389,390,391]},{"teal":293,"source":"contracts\\Moderator.algo.ts:80","pc":[392]},{"teal":294,"source":"contracts\\Moderator.algo.ts:78","pc":[393]},{"teal":295,"source":"contracts\\Moderator.algo.ts:78","pc":[394,395]},{"teal":296,"source":"contracts\\Moderator.algo.ts:78","pc":[396]},{"teal":297,"source":"contracts\\Moderator.algo.ts:78","pc":[397]},{"teal":298,"source":"contracts\\Moderator.algo.ts:80","pc":[398]},{"teal":299,"source":"contracts\\Moderator.algo.ts:80","pc":[399]},{"teal":300,"source":"contracts\\Moderator.algo.ts:80","pc":[400]},{"teal":301,"source":"contracts\\Moderator.algo.ts:80","pc":[401,402,403]},{"teal":302,"source":"contracts\\Moderator.algo.ts:81","pc":[404,405]},{"teal":303,"source":"contracts\\Moderator.algo.ts:81","pc":[406,407,408]},{"teal":304,"source":"contracts\\Moderator.algo.ts:81","pc":[409]},{"teal":305,"source":"contracts\\Moderator.algo.ts:78","pc":[410]},{"teal":306,"source":"contracts\\Moderator.algo.ts:78","pc":[411]},{"teal":307,"source":"contracts\\Moderator.algo.ts:78","pc":[412]},{"teal":308,"source":"contracts\\Moderator.algo.ts:78","pc":[413]},{"teal":309,"source":"contracts\\Moderator.algo.ts:81","pc":[414]},{"teal":310,"source":"contracts\\Moderator.algo.ts:81","pc":[415]},{"teal":311,"source":"contracts\\Moderator.algo.ts:80","pc":[416]},{"teal":314,"source":"contracts\\Moderator.algo.ts:81","pc":[417]},{"teal":315,"source":"contracts\\Moderator.algo.ts:81","pc":[418,419,420]},{"teal":316,"source":"contracts\\Moderator.algo.ts:82","pc":[421,422]},{"teal":317,"source":"contracts\\Moderator.algo.ts:82","pc":[423,424,425]},{"teal":318,"source":"contracts\\Moderator.algo.ts:82","pc":[426]},{"teal":319,"source":"contracts\\Moderator.algo.ts:78","pc":[427]},{"teal":320,"source":"contracts\\Moderator.algo.ts:78","pc":[428,429]},{"teal":321,"source":"contracts\\Moderator.algo.ts:78","pc":[430]},{"teal":322,"source":"contracts\\Moderator.algo.ts:78","pc":[431]},{"teal":323,"source":"contracts\\Moderator.algo.ts:82","pc":[432]},{"teal":324,"source":"contracts\\Moderator.algo.ts:82","pc":[433]},{"teal":325,"source":"contracts\\Moderator.algo.ts:81","pc":[434]},{"teal":328,"source":"contracts\\Moderator.algo.ts:79","pc":[435,436,437]},{"teal":333,"source":"contracts\\Moderator.algo.ts:84","pc":[438,439]},{"teal":334,"source":"contracts\\Moderator.algo.ts:84","pc":[440]},{"teal":339,"source":"contracts\\Moderator.algo.ts:86","pc":[441,442]},{"teal":340,"source":"contracts\\Moderator.algo.ts:76","pc":[443]},{"teal":345,"source":"contracts\\Moderator.algo.ts:90","pc":[444,445,446]},{"teal":346,"source":"contracts\\Moderator.algo.ts:90","pc":[447]},{"teal":347,"source":"contracts\\Moderator.algo.ts:90","pc":[448]},{"teal":348,"source":"contracts\\Moderator.algo.ts:90","pc":[449]},{"teal":349,"source":"contracts\\Moderator.algo.ts:90","pc":[450]},{"teal":352,"source":"contracts\\Moderator.algo.ts:90","errorMessage":"argument 0 (evaluationMetrics) for storeModelRegressionSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[451]},{"teal":355,"source":"contracts\\Moderator.algo.ts:90","pc":[452,453,454]},{"teal":356,"source":"contracts\\Moderator.algo.ts:90","pc":[455]},{"teal":357,"source":"contracts\\Moderator.algo.ts:90","pc":[456]},{"teal":361,"source":"contracts\\Moderator.algo.ts:90","pc":[457,458,459]},{"teal":366,"source":"contracts\\Moderator.algo.ts:91","pc":[460,461]},{"teal":367,"source":"contracts\\Moderator.algo.ts:91","pc":[462,463,464]},{"teal":368,"source":"contracts\\Moderator.algo.ts:91","pc":[465,466]},{"teal":369,"source":"contracts\\Moderator.algo.ts:91","pc":[467]},{"teal":370,"source":"contracts\\Moderator.algo.ts:91","pc":[468]},{"teal":373,"source":"contracts\\Moderator.algo.ts:91","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.app.creator\"}","pc":[469]},{"teal":377,"source":"contracts\\Moderator.algo.ts:92","pc":[470]},{"teal":378,"source":"contracts\\Moderator.algo.ts:92","pc":[471,472]},{"teal":379,"source":"contracts\\Moderator.algo.ts:92","pc":[473]},{"teal":380,"source":"contracts\\Moderator.algo.ts:90","pc":[474]},{"teal":385,"source":"contracts\\Moderator.algo.ts:96","pc":[475]},{"teal":388,"source":"contracts\\Moderator.algo.ts:96","pc":[476,477,478]},{"teal":389,"source":"contracts\\Moderator.algo.ts:96","pc":[479]},{"teal":390,"source":"contracts\\Moderator.algo.ts:96","pc":[480]},{"teal":391,"source":"contracts\\Moderator.algo.ts:96","pc":[481]},{"teal":392,"source":"contracts\\Moderator.algo.ts:96","pc":[482]},{"teal":395,"source":"contracts\\Moderator.algo.ts:96","errorMessage":"argument 0 (modelEvaluationMetrics) for regModelSelectionCriteria must be a (uint64,uint64,uint64,uint64)","pc":[483]},{"teal":398,"source":"contracts\\Moderator.algo.ts:96","pc":[484,485,486]},{"teal":399,"source":"contracts\\Moderator.algo.ts:96","pc":[487]},{"teal":400,"source":"contracts\\Moderator.algo.ts:96","pc":[488]},{"teal":401,"source":"contracts\\Moderator.algo.ts:96","pc":[489]},{"teal":402,"source":"contracts\\Moderator.algo.ts:96","pc":[490,491,492]},{"teal":403,"source":"contracts\\Moderator.algo.ts:96","pc":[493]},{"teal":404,"source":"contracts\\Moderator.algo.ts:96","pc":[494]},{"teal":405,"source":"contracts\\Moderator.algo.ts:96","pc":[495]},{"teal":406,"source":"contracts\\Moderator.algo.ts:96","pc":[496]},{"teal":407,"source":"contracts\\Moderator.algo.ts:96","pc":[497]},{"teal":408,"source":"contracts\\Moderator.algo.ts:96","pc":[498]},{"teal":412,"source":"contracts\\Moderator.algo.ts:96","pc":[499,500,501]},{"teal":420,"source":"contracts\\Moderator.algo.ts:99","pc":[502,503]},{"teal":421,"source":"contracts\\Moderator.algo.ts:99","pc":[504,505,506]},{"teal":422,"source":"contracts\\Moderator.algo.ts:99","pc":[507]},{"teal":423,"source":"contracts\\Moderator.algo.ts:97","pc":[508]},{"teal":424,"source":"contracts\\Moderator.algo.ts:97","pc":[509,510]},{"teal":425,"source":"contracts\\Moderator.algo.ts:97","pc":[511]},{"teal":426,"source":"contracts\\Moderator.algo.ts:97","pc":[512]},{"teal":427,"source":"contracts\\Moderator.algo.ts:99","pc":[513]},{"teal":428,"source":"contracts\\Moderator.algo.ts:99","pc":[514]},{"teal":429,"source":"contracts\\Moderator.algo.ts:99","pc":[515]},{"teal":430,"source":"contracts\\Moderator.algo.ts:99","pc":[516,517,518]},{"teal":431,"source":"contracts\\Moderator.algo.ts:100","pc":[519,520]},{"teal":432,"source":"contracts\\Moderator.algo.ts:100","pc":[521,522,523]},{"teal":433,"source":"contracts\\Moderator.algo.ts:100","pc":[524]},{"teal":434,"source":"contracts\\Moderator.algo.ts:97","pc":[525]},{"teal":435,"source":"contracts\\Moderator.algo.ts:97","pc":[526,527]},{"teal":436,"source":"contracts\\Moderator.algo.ts:97","pc":[528]},{"teal":437,"source":"contracts\\Moderator.algo.ts:97","pc":[529]},{"teal":438,"source":"contracts\\Moderator.algo.ts:100","pc":[530]},{"teal":439,"source":"contracts\\Moderator.algo.ts:100","pc":[531]},{"teal":440,"source":"contracts\\Moderator.algo.ts:99","pc":[532]},{"teal":443,"source":"contracts\\Moderator.algo.ts:100","pc":[533]},{"teal":444,"source":"contracts\\Moderator.algo.ts:100","pc":[534,535,536]},{"teal":445,"source":"contracts\\Moderator.algo.ts:101","pc":[537,538]},{"teal":446,"source":"contracts\\Moderator.algo.ts:101","pc":[539,540,541]},{"teal":447,"source":"contracts\\Moderator.algo.ts:101","pc":[542]},{"teal":448,"source":"contracts\\Moderator.algo.ts:97","pc":[543]},{"teal":449,"source":"contracts\\Moderator.algo.ts:97","pc":[544]},{"teal":450,"source":"contracts\\Moderator.algo.ts:97","pc":[545]},{"teal":451,"source":"contracts\\Moderator.algo.ts:97","pc":[546]},{"teal":452,"source":"contracts\\Moderator.algo.ts:101","pc":[547]},{"teal":453,"source":"contracts\\Moderator.algo.ts:101","pc":[548]},{"teal":454,"source":"contracts\\Moderator.algo.ts:100","pc":[549]},{"teal":457,"source":"contracts\\Moderator.algo.ts:101","pc":[550]},{"teal":458,"source":"contracts\\Moderator.algo.ts:101","pc":[551,552,553]},{"teal":459,"source":"contracts\\Moderator.algo.ts:102","pc":[554,555]},{"teal":460,"source":"contracts\\Moderator.algo.ts:102","pc":[556,557,558]},{"teal":461,"source":"contracts\\Moderator.algo.ts:102","pc":[559]},{"teal":462,"source":"contracts\\Moderator.algo.ts:97","pc":[560]},{"teal":463,"source":"contracts\\Moderator.algo.ts:97","pc":[561,562]},{"teal":464,"source":"contracts\\Moderator.algo.ts:97","pc":[563]},{"teal":465,"source":"contracts\\Moderator.algo.ts:97","pc":[564]},{"teal":466,"source":"contracts\\Moderator.algo.ts:102","pc":[565]},{"teal":467,"source":"contracts\\Moderator.algo.ts:102","pc":[566]},{"teal":468,"source":"contracts\\Moderator.algo.ts:101","pc":[567]},{"teal":471,"source":"contracts\\Moderator.algo.ts:98","pc":[568,569,570]},{"teal":476,"source":"contracts\\Moderator.algo.ts:104","pc":[571,572]},{"teal":477,"source":"contracts\\Moderator.algo.ts:104","pc":[573]},{"teal":482,"source":"contracts\\Moderator.algo.ts:106","pc":[574,575]},{"teal":483,"source":"contracts\\Moderator.algo.ts:96","pc":[576]},{"teal":488,"source":"contracts\\Moderator.algo.ts:110","pc":[577,578,579]},{"teal":491,"source":"contracts\\Moderator.algo.ts:110","pc":[580,581,582]},{"teal":492,"source":"contracts\\Moderator.algo.ts:110","pc":[583]},{"teal":493,"source":"contracts\\Moderator.algo.ts:110","pc":[584]},{"teal":494,"source":"contracts\\Moderator.algo.ts:110","pc":[585]},{"teal":495,"source":"contracts\\Moderator.algo.ts:110","pc":[586]},{"teal":498,"source":"contracts\\Moderator.algo.ts:110","errorMessage":"argument 1 (Address) for storeModelParams must be a address","pc":[587]},{"teal":501,"source":"contracts\\Moderator.algo.ts:110","pc":[588,589]},{"teal":502,"source":"contracts\\Moderator.algo.ts:110","pc":[590]},{"teal":503,"source":"contracts\\Moderator.algo.ts:110","pc":[591]},{"teal":504,"source":"contracts\\Moderator.algo.ts:110","pc":[592]},{"teal":505,"source":"contracts\\Moderator.algo.ts:110","pc":[593,594]},{"teal":506,"source":"contracts\\Moderator.algo.ts:110","pc":[595]},{"teal":507,"source":"contracts\\Moderator.algo.ts:110","pc":[596]},{"teal":510,"source":"contracts\\Moderator.algo.ts:110","errorMessage":"argument 2 (mbrPay) for storeModelParams must be a pay transaction","pc":[597]},{"teal":513,"source":"contracts\\Moderator.algo.ts:110","pc":[598,599,600]},{"teal":514,"source":"contracts\\Moderator.algo.ts:110","pc":[601]},{"teal":515,"source":"contracts\\Moderator.algo.ts:110","pc":[602]},{"teal":519,"source":"contracts\\Moderator.algo.ts:110","pc":[603,604,605]},{"teal":524,"source":"contracts\\Moderator.algo.ts:111","pc":[606,607]},{"teal":525,"source":"contracts\\Moderator.algo.ts:111","pc":[608,609]},{"teal":526,"source":"contracts\\Moderator.algo.ts:111","pc":[610]},{"teal":529,"source":"contracts\\Moderator.algo.ts:111","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[611]},{"teal":538,"source":"contracts\\Moderator.algo.ts:112","pc":[612,613]},{"teal":539,"source":"contracts\\Moderator.algo.ts:113","pc":[614,615]},{"teal":540,"source":"contracts\\Moderator.algo.ts:113","pc":[616,617]},{"teal":541,"source":"contracts\\Moderator.algo.ts:113","pc":[618]},{"teal":544,"source":"contracts\\Moderator.algo.ts:113","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","pc":[619]},{"teal":547,"source":"contracts\\Moderator.algo.ts:112","pc":[620,621]},{"teal":548,"source":"contracts\\Moderator.algo.ts:114","pc":[622,623]},{"teal":549,"source":"contracts\\Moderator.algo.ts:114","pc":[624,625]},{"teal":550,"source":"contracts\\Moderator.algo.ts:114","pc":[626]},{"teal":553,"source":"contracts\\Moderator.algo.ts:114","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[627]},{"teal":556,"source":"contracts\\Moderator.algo.ts:112","pc":[628,629]},{"teal":557,"source":"contracts\\Moderator.algo.ts:115","pc":[630,631]},{"teal":558,"source":"contracts\\Moderator.algo.ts:115","pc":[632]},{"teal":559,"source":"contracts\\Moderator.algo.ts:115","pc":[633]},{"teal":562,"source":"contracts\\Moderator.algo.ts:115","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"boxMbr\"}","pc":[634]},{"teal":566,"source":"contracts\\Moderator.algo.ts:118","pc":[635,636]},{"teal":567,"source":"contracts\\Moderator.algo.ts:118","pc":[637]},{"teal":568,"source":"contracts\\Moderator.algo.ts:118","pc":[638]},{"teal":569,"source":"contracts\\Moderator.algo.ts:118","pc":[639]},{"teal":573,"source":"contracts\\Moderator.algo.ts:119","pc":[640,641]},{"teal":574,"source":"contracts\\Moderator.algo.ts:119","pc":[642]},{"teal":575,"source":"contracts\\Moderator.algo.ts:119","pc":[643]},{"teal":576,"source":"contracts\\Moderator.algo.ts:119","pc":[644]},{"teal":577,"source":"contracts\\Moderator.algo.ts:119","pc":[645,646]},{"teal":578,"source":"contracts\\Moderator.algo.ts:119","pc":[647]},{"teal":579,"source":"contracts\\Moderator.algo.ts:110","pc":[648]},{"teal":584,"source":"contracts\\Moderator.algo.ts:123","pc":[649]},{"teal":587,"source":"contracts\\Moderator.algo.ts:123","pc":[650,651,652]},{"teal":588,"source":"contracts\\Moderator.algo.ts:123","pc":[653]},{"teal":589,"source":"contracts\\Moderator.algo.ts:123","pc":[654]},{"teal":590,"source":"contracts\\Moderator.algo.ts:123","pc":[655]},{"teal":591,"source":"contracts\\Moderator.algo.ts:123","pc":[656]},{"teal":594,"source":"contracts\\Moderator.algo.ts:123","errorMessage":"argument 0 (Address) for getBoxValue must be a address","pc":[657]},{"teal":597,"source":"contracts\\Moderator.algo.ts:123","pc":[658,659,660]},{"teal":598,"source":"contracts\\Moderator.algo.ts:123","pc":[661]},{"teal":599,"source":"contracts\\Moderator.algo.ts:123","pc":[662]},{"teal":600,"source":"contracts\\Moderator.algo.ts:123","pc":[663]},{"teal":601,"source":"contracts\\Moderator.algo.ts:123","pc":[664]},{"teal":605,"source":"contracts\\Moderator.algo.ts:123","pc":[665,666,667]},{"teal":609,"source":"contracts\\Moderator.algo.ts:124","pc":[668,669]},{"teal":610,"source":"contracts\\Moderator.algo.ts:124","pc":[670]},{"teal":611,"source":"contracts\\Moderator.algo.ts:124","pc":[671]},{"teal":612,"source":"contracts\\Moderator.algo.ts:124","pc":[672]},{"teal":613,"source":"contracts\\Moderator.algo.ts:124","pc":[673]},{"teal":617,"source":"contracts\\Moderator.algo.ts:125","pc":[674,675]},{"teal":618,"source":"contracts\\Moderator.algo.ts:125","pc":[676]},{"teal":621,"source":"contracts\\Moderator.algo.ts:125","errorMessage":"box value does not exist: this.paramsData(Address).value","pc":[677]},{"teal":622,"source":"contracts\\Moderator.algo.ts:123","pc":[678]},{"teal":627,"source":"contracts\\Moderator.algo.ts:129","pc":[679,680,681]},{"teal":628,"source":"contracts\\Moderator.algo.ts:129","pc":[682]},{"teal":629,"source":"contracts\\Moderator.algo.ts:129","pc":[683]},{"teal":633,"source":"contracts\\Moderator.algo.ts:129","pc":[684,685,686]},{"teal":637,"source":"contracts\\Moderator.algo.ts:130","pc":[687,688]},{"teal":638,"source":"contracts\\Moderator.algo.ts:130","pc":[689,690,691]},{"teal":639,"source":"contracts\\Moderator.algo.ts:130","pc":[692,693]},{"teal":640,"source":"contracts\\Moderator.algo.ts:130","pc":[694]},{"teal":641,"source":"contracts\\Moderator.algo.ts:130","pc":[695]},{"teal":642,"source":"contracts\\Moderator.algo.ts:130","pc":[696]},{"teal":643,"source":"contracts\\Moderator.algo.ts:129","pc":[697]},{"teal":646,"source":"contracts\\Moderator.algo.ts:28","pc":[698,699,700,701,702,703]},{"teal":647,"source":"contracts\\Moderator.algo.ts:28","pc":[704,705,706]},{"teal":648,"source":"contracts\\Moderator.algo.ts:28","pc":[707,708,709,710]},{"teal":651,"source":"contracts\\Moderator.algo.ts:28","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[711]},{"teal":654,"source":"contracts\\Moderator.algo.ts:28","pc":[712,713,714,715,716,717]},{"teal":655,"source":"contracts\\Moderator.algo.ts:28","pc":[718,719,720,721,722,723]},{"teal":656,"source":"contracts\\Moderator.algo.ts:28","pc":[724,725,726,727,728,729]},{"teal":657,"source":"contracts\\Moderator.algo.ts:28","pc":[730,731,732,733,734,735]},{"teal":658,"source":"contracts\\Moderator.algo.ts:28","pc":[736,737,738,739,740,741]},{"teal":659,"source":"contracts\\Moderator.algo.ts:28","pc":[742,743,744,745,746,747]},{"teal":660,"source":"contracts\\Moderator.algo.ts:28","pc":[748,749,750,751,752,753]},{"teal":661,"source":"contracts\\Moderator.algo.ts:28","pc":[754,755,756,757,758,759]},{"teal":662,"source":"contracts\\Moderator.algo.ts:28","pc":[760,761,762]},{"teal":663,"source":"contracts\\Moderator.algo.ts:28","pc":[763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780]},{"teal":666,"source":"contracts\\Moderator.algo.ts:28","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[781]},{"teal":669,"source":"contracts\\Moderator.algo.ts:28","pc":[782,783,784,785,786,787]},{"teal":670,"source":"contracts\\Moderator.algo.ts:28","pc":[788,789,790]},{"teal":671,"source":"contracts\\Moderator.algo.ts:28","pc":[791,792,793,794]},{"teal":674,"source":"contracts\\Moderator.algo.ts:28","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[795]},{"teal":677,"source":"contracts\\Moderator.algo.ts:28","pc":[796,797,798,799,800,801]},{"teal":678,"source":"contracts\\Moderator.algo.ts:28","pc":[802,803,804]},{"teal":679,"source":"contracts\\Moderator.algo.ts:28","pc":[805,806,807,808]},{"teal":682,"source":"contracts\\Moderator.algo.ts:28","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[809]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAQggwIQ9ABAmBhUAE0luaXRpYWxNb2RlbE1ldHJpY3MKAAhyZWdNb2RlbAQVH3x1CGlwZnNIYXNoMU1vZGVsIGhhcyBiZWVuIGFjY2VwdGVkIGZvciBmdXJ0aGVyIGNvbnNpZGVyYXRpb24fZmFpbGVkIHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50czEYFIEGCzEZCI0MAhcAAAAAAAACXQJrAgkAAAAAAAAAAAAAADYaAVcCAIgAAiJDigEAK4v/SRUWVwYCTFBniTYaAVcCAIgAAiJDigEAMQA2MgByB0gSRCuL/0kVFlcGAkxQZ4kqiAAMSRUWVwYCTFBQsCJDigABK2RXAgCJMRYiCUk4ECISRDYaAUkVJBJEiAACIkOKAgAxADYyAHIHSBJEi/44ADEAEkSL/jgHMgoSRIv+OAglEkQoJLlIKIv/v4kqiAAEULAiQ4oAASi9TEhEKL5EiSo2GgFJFSQSRIgADEkVFlcGAkxQULAiQ4oBASi9TEhEi/9XAAgXKCEEI7oXD0lBAA2L/1cICBcoIyO6Fw8QSUEADov/VxAIFyghBSO6Fw8QQQADJwSJJwWJNhoBSRUkEkSIAAIiQ4oBADEANjIAcgdIEkQpi/+/iSo2GgFJFSQSRIgADEkVFlcGAkxQULAiQ4oBAYv/VwAIFykhBCO6Fw5JQQAOi/9XEAgXKSEFI7oXDhBJQQANi/9XCAgXKSMjuhcOEElBAA6L/1cYCBcpgRgjuhcPEEEAAycEiScFiTYaAjYaAUkVJBJEMRYiCUk4ECISRIgAAiJDigMAMQAxABJEi/84ADEAEkSL/zgHMgoSRIv/OAglEkSL/iS5SIv+SbxIi/2/iSo2GgFJFSQSRIgABFCwIkOKAQGL/71MSESL/75EiYgAAiJDigAAMQA2MgByB0gSRImABBFXVts2GgCOAf3rAIAEFTfBlIAEt4kY9YAEbdzf3IAE0anB64AEfeLfzYAEv4re34AEW1U23oAE7a7beTYaAI4I/eX9/v5C/lb+r/7O/zT/fACABBdHQFs2GgCOAf2yAIAEJIfDLDYaAI4B/34A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ParamsData = {
  paramHash: string,
  paramKey: string
}


/**
 * Converts the ABI tuple representation of a ParamsData to the struct representation
 */
export function ParamsDataFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ParamsData, APP_SPEC.structs) as ParamsData
}

export type Regression = {
  mse: bigint,
  rmse: bigint,
  mae: bigint,
  cod: bigint
}


/**
 * Converts the ABI tuple representation of a Regression to the struct representation
 */
export function RegressionFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Regression, APP_SPEC.structs) as Regression
}

export type Classification = {
  accuracy: bigint,
  precision: bigint,
  recall: bigint,
  f1score: bigint
}


/**
 * Converts the ABI tuple representation of a Classification to the struct representation
 */
export function ClassificationFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Classification, APP_SPEC.structs) as Classification
}

/**
 * The argument types for the DmlChain contract
 */
export type DmlChainArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string)void': {
      modelHash: string
    }
    'updateApplication(string)void': {
      modelHash: string
    }
    'printHash()string': Record<string, never>
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': {
      evaluationMetrics: Classification
      mbrPay: AppMethodCallTransactionArgument
    }
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Record<string, never>
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Classification
    }
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': {
      evaluationMetrics: Regression
    }
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': {
      modelEvaluationMetrics: Regression
    }
    'storeModelParams(pay,address,(string,string))void': {
      mbrPay: AppMethodCallTransactionArgument
      address: string
      paramsData: ParamsData
    }
    'getBoxValue(address)(string,string)': {
      address: string
    }
    'deleteApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string)void': [modelHash: string]
    'updateApplication(string)void': [modelHash: string]
    'printHash()string': []
    'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': [evaluationMetrics: Classification, mbrPay: AppMethodCallTransactionArgument]
    'getClassificationCriteria()(uint64,uint64,uint64,uint64)': []
    'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Classification]
    'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': [evaluationMetrics: Regression]
    'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': [modelEvaluationMetrics: Regression]
    'storeModelParams(pay,address,(string,string))void': [mbrPay: AppMethodCallTransactionArgument, address: string, paramsData: ParamsData]
    'getBoxValue(address)(string,string)': [address: string]
    'deleteApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DmlChainReturns = {
  'createApplication(string)void': void
  'updateApplication(string)void': void
  'printHash()string': string
  'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void': void
  'getClassificationCriteria()(uint64,uint64,uint64,uint64)': Classification
  'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void': void
  'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string': string
  'storeModelParams(pay,address,(string,string))void': void
  'getBoxValue(address)(string,string)': ParamsData
  'deleteApplication()void': void
}

/**
 * Defines the types of available calls and state of the DmlChain smart contract.
 */
export type DmlChainTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string)void' | 'createApplication', {
      argsObj: DmlChainArgs['obj']['createApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['createApplication(string)void']
      returns: DmlChainReturns['createApplication(string)void']
    }>
    & Record<'updateApplication(string)void' | 'updateApplication', {
      argsObj: DmlChainArgs['obj']['updateApplication(string)void']
      argsTuple: DmlChainArgs['tuple']['updateApplication(string)void']
      returns: DmlChainReturns['updateApplication(string)void']
    }>
    & Record<'printHash()string' | 'printHash', {
      argsObj: DmlChainArgs['obj']['printHash()string']
      argsTuple: DmlChainArgs['tuple']['printHash()string']
      returns: DmlChainReturns['printHash()string']
    }>
    & Record<'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' | 'storeClassificationSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      argsTuple: DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
      returns: DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']
    }>
    & Record<'getClassificationCriteria()(uint64,uint64,uint64,uint64)' | 'getClassificationCriteria', {
      argsObj: DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      argsTuple: DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
      returns: DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'classModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' | 'storeModelRegressionSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      argsTuple: DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
      returns: DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' | 'regModelSelectionCriteria', {
      argsObj: DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      argsTuple: DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
      returns: DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']
    }>
    & Record<'storeModelParams(pay,address,(string,string))void' | 'storeModelParams', {
      argsObj: DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void']
      argsTuple: DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']
      returns: DmlChainReturns['storeModelParams(pay,address,(string,string))void']
    }>
    & Record<'getBoxValue(address)(string,string)' | 'getBoxValue', {
      argsObj: DmlChainArgs['obj']['getBoxValue(address)(string,string)']
      argsTuple: DmlChainArgs['tuple']['getBoxValue(address)(string,string)']
      returns: DmlChainReturns['getBoxValue(address)(string,string)']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: DmlChainArgs['obj']['deleteApplication()void']
      argsTuple: DmlChainArgs['tuple']['deleteApplication()void']
      returns: DmlChainReturns['deleteApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ipfsHash: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        paramsData: Map<string, ParamsData>
        regressionPerformanceMetrics: Map<string, Regression>
        classificationPerformanceMetrics: Map<string, Classification>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DmlChainSignatures = keyof DmlChainTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DmlChainNonVoidMethodSignatures = keyof DmlChainTypes['methods'] extends infer T ? T extends keyof DmlChainTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DmlChain smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DmlChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DmlChainSignatures> = DmlChainTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DmlChainTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DmlChainTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DmlChainCreateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & {method: 'createApplication(string)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type DmlChainUpdateCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & {method: 'updateApplication(string)void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type DmlChainDeleteCallParams =
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type DmlChainDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DmlChainCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: DmlChainUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: DmlChainDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DmlChain smart contract
 */
export abstract class DmlChainParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DmlChainCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string)void':
            return DmlChainParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DMLChain smart contract using the createApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends DmlChainUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(string)void':
            return DmlChainParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the DMLChain smart contract using the updateApplication(string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(string)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.modelHash],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends DmlChainDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return DmlChainParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the DMLChain smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the printHash()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'printHash()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getClassificationCriteria()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the classModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'classModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.evaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'regModelSelectionCriteria((uint64,uint64,uint64,uint64))string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.modelEvaluationMetrics],
    }
  }
  /**
   * Constructs a no op call for the storeModelParams(pay,address,(string,string))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeModelParams(pay,address,(string,string))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay, params.args.address, params.args.paramsData],
    }
  }
  /**
   * Constructs a no op call for the getBoxValue(address)(string,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBoxValue(address)(string,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DMLChain smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DmlChainFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DmlChainFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DmlChainClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DmlChainClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DMLChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DmlChainDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DmlChainParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      updateParams: params.updateParams?.method ? DmlChainParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams,
      deleteParams: params.deleteParams?.method ? DmlChainParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams,
    })
    return { result: result.result, appClient: new DmlChainClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the updateApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(DmlChainParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(DmlChainParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(DmlChainParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DMLChain smart contract using an ABI method call using the createApplication(string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DmlChainArgs['obj']['createApplication(string)void'] | DmlChainArgs['tuple']['createApplication(string)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(DmlChainParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | DmlChainReturns['createApplication(string)void'] }, appClient: new DmlChainClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DMLChain smart contract
 */
export class DmlChainClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DmlChain app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DmlChainClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DmlChainNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DmlChainClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DmlChainClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DmlChainClient> {
    return new DmlChainClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DmlChainParamsFactory.getBoxValue(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(DmlChainParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(DmlChainParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    printHash: (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.printHash(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeClassificationSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getClassificationCriteria: (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getClassificationCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    classModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelRegressionSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    regModelSelectionCriteria: (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeModelParams: (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.storeModelParams(params))
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBoxValue: (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DmlChainParamsFactory.getBoxValue(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the DMLChain smart contract using the `updateApplication(string)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(DmlChainParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as undefined | DmlChainReturns['updateApplication(string)void']}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the DMLChain smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(DmlChainParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as undefined | DmlChainReturns['deleteApplication()void']}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DMLChain smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DMLChain smart contract using the `printHash()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    printHash: async (params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.printHash(params))
      return {...result, return: result.return as undefined | DmlChainReturns['printHash()string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeClassificationSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeClassificationSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getClassificationCriteria()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getClassificationCriteria: async (params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getClassificationCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `classModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    classModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.classModelSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelRegressionSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelRegressionSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `regModelSelectionCriteria((uint64,uint64,uint64,uint64))string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    regModelSelectionCriteria: async (params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.regModelSelectionCriteria(params))
      return {...result, return: result.return as undefined | DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `storeModelParams(pay,address,(string,string))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeModelParams: async (params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.storeModelParams(params))
      return {...result, return: result.return as undefined | DmlChainReturns['storeModelParams(pay,address,(string,string))void']}
    },

    /**
     * Makes a call to the DMLChain smart contract using the `getBoxValue(address)(string,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBoxValue: async (params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DmlChainParamsFactory.getBoxValue(params))
      return {...result, return: result.return as undefined | DmlChainReturns['getBoxValue(address)(string,string)']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DmlChainClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DMLChain app
   */
  state = {
    /**
     * Methods to access global state for the current DMLChain app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ipfsHash: result.ipfsHash,
        }
      },
      /**
       * Get the current value of the ipfsHash key in global state
       */
      ipfsHash: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("ipfsHash")) as string | undefined },
    },
    /**
     * Methods to access box state for the current DMLChain app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the paramsData map in box state
       */
      paramsData: {
        /**
         * Get all current values of the paramsData map in box state
         */
        getMap: async (): Promise<Map<string, ParamsData>> => { return (await this.appClient.state.box.getMap("paramsData")) as Map<string, ParamsData> },
        /**
         * Get a current value of the paramsData map by key from box state
         */
        value: async (key: string): Promise<ParamsData | undefined> => { return await this.appClient.state.box.getMapValue("paramsData", key) as ParamsData | undefined },
      },
      /**
       * Get values from the regressionPerformanceMetrics map in box state
       */
      regressionPerformanceMetrics: {
        /**
         * Get all current values of the regressionPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Regression>> => { return (await this.appClient.state.box.getMap("regressionPerformanceMetrics")) as Map<string, Regression> },
        /**
         * Get a current value of the regressionPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Regression | undefined> => { return await this.appClient.state.box.getMapValue("regressionPerformanceMetrics", key) as Regression | undefined },
      },
      /**
       * Get values from the classificationPerformanceMetrics map in box state
       */
      classificationPerformanceMetrics: {
        /**
         * Get all current values of the classificationPerformanceMetrics map in box state
         */
        getMap: async (): Promise<Map<string, Classification>> => { return (await this.appClient.state.box.getMap("classificationPerformanceMetrics")) as Map<string, Classification> },
        /**
         * Get a current value of the classificationPerformanceMetrics map by key from box state
         */
        value: async (key: string): Promise<Classification | undefined> => { return await this.appClient.state.box.getMapValue("classificationPerformanceMetrics", key) as Classification | undefined },
      },
    },
  }

  public newGroup(): DmlChainComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a printHash()string method call against the DMLChain contract
       */
      printHash(params: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.printHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('printHash()string', v))
        return this
      },
      /**
       * Add a storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void method call against the DMLChain contract
       */
      storeClassificationSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeClassificationSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getClassificationCriteria()(uint64,uint64,uint64,uint64) method call against the DMLChain contract
       */
      getClassificationCriteria(params: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getClassificationCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('getClassificationCriteria()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a classModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      classModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.classModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('classModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void method call against the DMLChain contract
       */
      storeModelRegressionSelectionCriteria(params: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelRegressionSelectionCriteria(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a regModelSelectionCriteria((uint64,uint64,uint64,uint64))string method call against the DMLChain contract
       */
      regModelSelectionCriteria(params: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.regModelSelectionCriteria(params)))
        resultMappers.push((v) => client.decodeReturnValue('regModelSelectionCriteria((uint64,uint64,uint64,uint64))string', v))
        return this
      },
      /**
       * Add a storeModelParams(pay,address,(string,string))void method call against the DMLChain contract
       */
      storeModelParams(params: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeModelParams(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getBoxValue(address)(string,string) method call against the DMLChain contract
       */
      getBoxValue(params: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBoxValue(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBoxValue(address)(string,string)', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<DmlChainArgs['obj']['updateApplication(string)void'] | DmlChainArgs['tuple']['updateApplication(string)void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DMLChain contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DmlChainComposer
  }
}
export type DmlChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the printHash()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  printHash(params?: CallParams<DmlChainArgs['obj']['printHash()string'] | DmlChainArgs['tuple']['printHash()string']>): DmlChainComposer<[...TReturns, DmlChainReturns['printHash()string'] | undefined]>

  /**
   * Calls the storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeClassificationSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | DmlChainArgs['tuple']['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeClassificationSelectionCriteria((uint64,uint64,uint64,uint64),pay)void'] | undefined]>

  /**
   * Calls the getClassificationCriteria()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getClassificationCriteria(params?: CallParams<DmlChainArgs['obj']['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | DmlChainArgs['tuple']['getClassificationCriteria()(uint64,uint64,uint64,uint64)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getClassificationCriteria()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the classModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  classModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['classModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelRegressionSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | DmlChainArgs['tuple']['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelRegressionSelectionCriteria((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the regModelSelectionCriteria((uint64,uint64,uint64,uint64))string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  regModelSelectionCriteria(params?: CallParams<DmlChainArgs['obj']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | DmlChainArgs['tuple']['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string']>): DmlChainComposer<[...TReturns, DmlChainReturns['regModelSelectionCriteria((uint64,uint64,uint64,uint64))string'] | undefined]>

  /**
   * Calls the storeModelParams(pay,address,(string,string))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeModelParams(params?: CallParams<DmlChainArgs['obj']['storeModelParams(pay,address,(string,string))void'] | DmlChainArgs['tuple']['storeModelParams(pay,address,(string,string))void']>): DmlChainComposer<[...TReturns, DmlChainReturns['storeModelParams(pay,address,(string,string))void'] | undefined]>

  /**
   * Calls the getBoxValue(address)(string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBoxValue(params?: CallParams<DmlChainArgs['obj']['getBoxValue(address)(string,string)'] | DmlChainArgs['tuple']['getBoxValue(address)(string,string)']>): DmlChainComposer<[...TReturns, DmlChainReturns['getBoxValue(address)(string,string)'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DMLChain smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<DmlChainArgs['obj']['deleteApplication()void'] | DmlChainArgs['tuple']['deleteApplication()void']>): DmlChainComposer<[...TReturns, DmlChainReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DMLChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DmlChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DmlChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DmlChainComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DmlChainComposerResults<TReturns>>
}
export type DmlChainComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

